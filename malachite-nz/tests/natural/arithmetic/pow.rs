use std::str::FromStr;

use malachite_base::num::arithmetic::traits::{Pow, PowAssign};
use malachite_base::num::conversion::traits::ExactFrom;
use malachite_nz_test_util::natural::arithmetic::pow::{
    natural_pow_naive, natural_pow_simple_binary,
};
use num::traits::Pow as NumPow;
use num::BigUint;
use rug::ops::Pow as RugPow;

#[cfg(feature = "32_bit_limbs")]
use malachite_nz::natural::arithmetic::pow::{
    _limb_pow_alt_estimated_out_len, _limb_pow_alt_estimated_scratch_len,
    _limbs_pow_alt_estimated_out_len, _limbs_pow_alt_estimated_scratch_len, limb_pow_alt,
    limb_pow_to_out_alt, limbs_pow_alt, limbs_pow_to_out_alt,
};
use malachite_nz::natural::Natural;
#[cfg(feature = "32_bit_limbs")]
use malachite_nz::platform::Limb;

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limb_pow() {
    let test = |x: Limb, exp: u64, out: &[Limb]| {
        assert_eq!(limb_pow_alt(x, exp), out);
    };
    test(2, 2, &[4]);
    test(2, 10, &[1024]);
    test(2, 100, &[0, 0, 0, 16]);
    test(
        3,
        100,
        &[3476558801, 3600055637, 1531049845, 1731684438, 1514558410],
    );
    test(10, 9, &[1000000000]);
    test(
        10,
        100,
        &[
            0, 0, 0, 2821623568, 2863809288, 2384534140, 4085960256, 2227490315, 2095778599,
            2904921283, 4681,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_fail_1() {
    limb_pow_alt(0, 2);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_fail_2() {
    limb_pow_alt(1, 2);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_fail_3() {
    limb_pow_alt(2, 0);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_fail_4() {
    limb_pow_alt(2, 1);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limb_pow_to_out() {
    let test = |out_before: &[Limb], x: Limb, exp: u64, out_after: &[Limb], out_len: usize| {
        let mut out = out_before.to_vec();
        assert_eq!(out.len(), _limb_pow_alt_estimated_out_len(x, exp));
        let mut scratch = vec![0; _limb_pow_alt_estimated_scratch_len(x, exp)];
        assert_eq!(limb_pow_to_out_alt(&mut out, x, exp, &mut scratch), out_len);
        assert_eq!(out, out_after);
    };
    test(&[10, 10], 2, 2, &[4, 0], 1);
    test(&[10, 10], 2, 10, &[1024, 0], 1);
    test(&[10; 8], 2, 100, &[0, 0, 0, 16, 10, 10, 10, 10], 4);
    test(
        &[10; 8],
        3,
        100,
        &[
            3476558801, 3600055637, 1531049845, 1731684438, 1514558410, 0, 10, 10,
        ],
        5,
    );
    test(&[10, 10], 10, 9, &[1000000000, 0], 1);
    test(
        &[10; 14],
        10,
        100,
        &[
            0, 0, 0, 2821623568, 2863809288, 2384534140, 4085960256, 2227490315, 2095778599,
            2904921283, 4681, 0, 10, 10,
        ],
        11,
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_1() {
    limb_pow_to_out_alt(&mut [10, 10], 0, 2, &mut [10, 10]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_2() {
    limb_pow_to_out_alt(&mut [10, 10], 1, 2, &mut [10, 10]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_3() {
    limb_pow_to_out_alt(&mut [10, 10], 2, 0, &mut [10, 10]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_4() {
    limb_pow_to_out_alt(&mut [10, 10], 2, 1, &mut [10, 10]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_5() {
    limb_pow_to_out_alt(&mut [10], 2, 2, &mut [10, 10]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limb_pow_to_out_fail_6() {
    limb_pow_to_out_alt(&mut [10; 8], 2, 100, &mut []);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_pow() {
    let test = |xs: &[Limb], exp: u64, out: &[Limb]| {
        assert_eq!(limbs_pow_alt(xs, exp), out);
    };
    test(&[1, 1], 2, &[1, 2, 1]);
    test(
        &[1, 1],
        10,
        &[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1],
    );
    test(
        &[1, 1],
        100,
        &[
            1, 100, 4950, 161700, 3921225, 75287520, 1192052400, 3122658912, 1404300575,
            3856263611, 1591254002, 3258062030, 899556955, 803216378, 1310151248, 1499375850,
            2332619193, 3968431524, 4085749530, 1136679331, 273489285, 3338642246, 3544105701,
            844866219, 1175366874, 758834048, 646998201, 3049457170, 733614013, 1400647268,
            3979434005, 2770685599, 4038926785, 264011298, 2126789533, 3205011234, 3674235589,
            3864120130, 1717547830, 3817918906, 2976806973, 2930427077, 3798905017, 2672346699,
            2426398649, 1834316445, 4131270269, 887459147, 1698650569, 3123194158, 2868271121,
            3706731654, 2073725215, 570568395, 729640870, 1868322716, 3338774936, 3779458204,
            3890882669, 1414262575, 1200805502, 3641833126, 342345696, 1286652406, 3703949518,
            47177294, 1562872441, 3379562707, 2490682825, 640606377, 1577764504, 3545174992,
            2808433500, 3939117033, 343741199, 2292546107, 1377056316, 1693477863, 368237605,
            832210433, 2481934560, 2826277781, 3285796914, 2204777130, 3821989418, 1802445372,
            1367480655, 813259882, 901179532, 3258302570, 1591286535, 3856267598, 1404301014,
            3122658955, 1192052403, 75287520, 3921225, 161700, 4950, 100, 1,
        ],
    );
    test(
        &[1, 2, 3],
        10,
        &[
            1, 20, 210, 1500, 8085, 34704, 122520, 363120, 915570, 1980440, 3692140, 5941320,
            8240130, 9804240, 9924120, 8433072, 5893965, 3280500, 1377810, 393660, 59049,
        ],
    );
    test(
        &[u32::MAX; 3],
        5,
        &[
            u32::MAX,
            u32::MAX,
            u32::MAX,
            4,
            0,
            0,
            0xffff_fff6,
            u32::MAX,
            u32::MAX,
            9,
            0,
            0,
            0xffff_fffb,
            u32::MAX,
            u32::MAX,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_pow_fail_1() {
    limbs_pow_alt(&[], 2);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_pow_fail_2() {
    limbs_pow_alt(&[1], 2);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_pow_fail_3() {
    limbs_pow_alt(&[1, 1], 0);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_pow_fail_4() {
    limbs_pow_alt(&[1, 1], 1);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_pow_to_out() {
    let test = |out_before: &[Limb], xs: &[Limb], exp: u64, out_after: &[Limb], out_len: usize| {
        let mut out = out_before.to_vec();
        assert_eq!(out.len(), _limbs_pow_alt_estimated_out_len(xs, exp));
        let mut scratch = vec![0; _limbs_pow_alt_estimated_scratch_len(xs, exp)];
        assert_eq!(
            limbs_pow_to_out_alt(&mut out, xs, exp, &mut scratch),
            out_len
        );
        assert_eq!(out, out_after);
    };
    test(&[10; 4], &[1, 1], 2, &[1, 2, 1, 0], 3);
    test(
        &[10; 12],
        &[1, 1],
        10,
        &[1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1, 0],
        11,
    );
    test(
        &[10; 104],
        &[1, 1],
        100,
        &[
            1, 100, 4950, 161700, 3921225, 75287520, 1192052400, 3122658912, 1404300575,
            3856263611, 1591254002, 3258062030, 899556955, 803216378, 1310151248, 1499375850,
            2332619193, 3968431524, 4085749530, 1136679331, 273489285, 3338642246, 3544105701,
            844866219, 1175366874, 758834048, 646998201, 3049457170, 733614013, 1400647268,
            3979434005, 2770685599, 4038926785, 264011298, 2126789533, 3205011234, 3674235589,
            3864120130, 1717547830, 3817918906, 2976806973, 2930427077, 3798905017, 2672346699,
            2426398649, 1834316445, 4131270269, 887459147, 1698650569, 3123194158, 2868271121,
            3706731654, 2073725215, 570568395, 729640870, 1868322716, 3338774936, 3779458204,
            3890882669, 1414262575, 1200805502, 3641833126, 342345696, 1286652406, 3703949518,
            47177294, 1562872441, 3379562707, 2490682825, 640606377, 1577764504, 3545174992,
            2808433500, 3939117033, 343741199, 2292546107, 1377056316, 1693477863, 368237605,
            832210433, 2481934560, 2826277781, 3285796914, 2204777130, 3821989418, 1802445372,
            1367480655, 813259882, 901179532, 3258302570, 1591286535, 3856267598, 1404301014,
            3122658955, 1192052403, 75287520, 3921225, 161700, 4950, 100, 1, 0, 10, 10,
        ],
        101,
    );
    test(
        &[10; 22],
        &[1, 2, 3],
        10,
        &[
            1, 20, 210, 1500, 8085, 34704, 122520, 363120, 915570, 1980440, 3692140, 5941320,
            8240130, 9804240, 9924120, 8433072, 5893965, 3280500, 1377810, 393660, 59049, 0,
        ],
        21,
    );
    test(
        &[10; 15],
        &[u32::MAX; 3],
        5,
        &[
            u32::MAX,
            u32::MAX,
            u32::MAX,
            4,
            0,
            0,
            0xffff_fff6,
            u32::MAX,
            u32::MAX,
            9,
            0,
            0,
            0xffff_fffb,
            u32::MAX,
            u32::MAX,
        ],
        15,
    );
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_1() {
    limbs_pow_to_out_alt(&mut [10; 4], &[], 2, &mut [10; 4]);
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_2() {
    limbs_pow_to_out_alt(&mut [10; 4], &[1], 2, &mut [10; 4]);
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_3() {
    limbs_pow_to_out_alt(&mut [10; 4], &[1, 1], 0, &mut [10; 4]);
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_4() {
    limbs_pow_to_out_alt(&mut [10; 4], &[1, 1], 1, &mut [10; 4]);
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_5() {
    limbs_pow_to_out_alt(&mut [10; 103], &[1, 1], 100, &mut [10; 103]);
}

#[cfg(feature = "32_bit_limbss")]
#[test]
#[should_panic]
fn limbs_pow_to_out_fail_6() {
    limbs_pow_to_out_alt(&mut [10; 104], &[1, 1], 100, &mut [10; 4]);
}

#[test]
fn test_pow() {
    let test = |u, exp, out| {
        let mut x = Natural::from_str(u).unwrap();
        x.pow_assign(exp);
        assert_eq!(x.to_string(), out);
        assert!(x.is_valid());

        let x = Natural::from_str(u).unwrap().pow(exp);
        assert_eq!(x.to_string(), out);
        assert!(x.is_valid());

        let x = (&Natural::from_str(u).unwrap()).pow(exp);
        assert_eq!(x.to_string(), out);
        assert!(x.is_valid());

        let x = BigUint::from_str(u).unwrap().pow(exp);
        assert_eq!(x.to_string(), out);

        let x = rug::Integer::from_str(u).unwrap().pow(u32::exact_from(exp));
        assert_eq!(x.to_string(), out);

        assert_eq!(
            natural_pow_naive(&Natural::from_str(u).unwrap(), exp).to_string(),
            out
        );
        assert_eq!(
            natural_pow_simple_binary(&Natural::from_str(u).unwrap(), exp).to_string(),
            out
        );
    };
    test("0", 0, "1");
    test("1", 0, "1");
    test("2", 0, "1");
    test("1000", 0, "1");
    test("1000000000000", 0, "1");
    test("0", 1, "0");
    test("1", 1, "1");
    test("2", 1, "2");
    test("1000", 1, "1000");
    test("1000000000000", 1, "1000000000000");
    test("0", 2, "0");
    test("1", 2, "1");
    test("2", 2, "4");
    test("3", 2, "9");
    test("1000", 2, "1000000");
    test("1000000000000", 2, "1000000000000000000000000");
    test(
        "123",
        456,
        "992500687720988567008314620574696326372959408198869005198162988813828671047493990779211286\
        6142614463805542423693627187249280035274164990211814381967260156999810012079049675951763646\
        5445895625741609866209900500198407153244604778968016963028050310261417615914468729918240685\
        4878786176459769390634643579861657117309763994785076492286863414669671679101266533421349427\
        4485146389992748709248661097714611276356710167264595313219648143933987301708814041466127119\
        8500333255713096142335151414630651683065518784081203678487703002802082091236603519026256880\
        6244996817813872275740354848312715156831237421490955692604636096559777009388445806119312464\
        9516620869554031369814001163802732256625268978083813635182879531427216211122223117090171561\
        2355701347552371530013693855379834865667060014643302459100429783653966913783002290784283455\
        6282833554705299329560514844771293338811599302127586876027950885792304316616960102321873904\
        36601614145603241902386663442520160735566561"
    );
    test(
        "123",
        457,
        "122077584589681593742022698330687648143874007208460887639374047624100926538841760865842988\
        2535541579048081718114316144031661444338722293796053168981972999310976631485723110142066928\
        5249845161966218013543817761524404079849086387813066086452450188162154366757479653779943604\
        3150090699704551635048061160322983825429100971358564408551284200004369616529455783610825979\
        5761673005969108091237585315018897186991875350573545223526016721703880438110184127100333635\
        7415540990452710825507223623999570157017058810441988052453987469344656097222102232840229596\
        3168134608591106289916063646342463964290242202843387550190370239876852572154778834152675433\
        1890544366955145858487122143147736067564908084304309077127494182365547593968033443402091102\
        0319751265748941698191684344211719688477048381801126202469352863389437930395309281766466865\
        0422788527228751817535943325906869080673826714161693185751437958952453430943886092585590490\
        23701998539909198753993559603429979770474687003"
    );
    test(
        "10",
        100,
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00000000000"
    );
    test(
        "10",
        101,
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        000000000000"
    );
    test("2", 100, "1267650600228229401496703205376");
    test(
        "12345678987654321",
        5,
        "286797196211272153445658333952148540084053148773966942500383143133144940612575601",
    );
    test(
        "12345678987654321",
        6,
        "354070611898367606555445954656918550154832595750628623501854823341167403514406003590115726\
        6821921"
    );
}
