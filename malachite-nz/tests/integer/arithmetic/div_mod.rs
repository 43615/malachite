use std::str::FromStr;

use malachite_base::num::arithmetic::traits::{
    CeilingDivAssignMod, CeilingDivMod, CeilingMod, DivAssignMod, DivAssignRem, DivMod, DivRem,
    DivRound, Mod,
};
use malachite_base::num::basic::traits::Zero;
use malachite_base::rounding_modes::RoundingMode;
use num::{BigInt, Integer as NumInteger};

use malachite_nz::integer::Integer;

#[test]
fn test_div_mod() {
    let test = |u, v, quotient, remainder| {
        let mut x = Integer::from_str(u).unwrap();
        let r = x.div_assign_mod(Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Integer::from_str(u).unwrap();
        let r = x.div_assign_mod(&Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .div_mod(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .div_mod(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Integer::from_str(u).unwrap()).div_mod(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Integer::from_str(u).unwrap()).div_mod(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = BigInt::from_str(u)
            .unwrap()
            .div_mod_floor(&BigInt::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug::Integer::from_str(u)
            .unwrap()
            .div_rem_floor(rug::Integer::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (
            Integer::from_str(u)
                .unwrap()
                .div_round(Integer::from_str(v).unwrap(), RoundingMode::Floor),
            Integer::from_str(u)
                .unwrap()
                .mod_op(Integer::from_str(v).unwrap()),
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);
    };
    test("0", "1", "0", "0");
    test("0", "123", "0", "0");
    test("1", "1", "1", "0");
    test("123", "1", "123", "0");
    test("123", "123", "1", "0");
    test("123", "456", "0", "123");
    test("456", "123", "3", "87");
    test("4294967295", "1", "4294967295", "0");
    test("4294967295", "4294967295", "1", "0");
    test("1000000000000", "1", "1000000000000", "0");
    test("1000000000000", "3", "333333333333", "1");
    test("1000000000000", "123", "8130081300", "100");
    test("1000000000000", "4294967295", "232", "3567587560");
    test(
        "1000000000000000000000000",
        "1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "3",
        "333333333333333333333333",
        "1",
    );
    test(
        "1000000000000000000000000",
        "123",
        "8130081300813008130081",
        "37",
    );
    test(
        "1000000000000000000000000",
        "4294967295",
        "232830643708079",
        "3167723695",
    );
    test(
        "1000000000000000000000000",
        "1234567890987",
        "810000006723",
        "530068894399",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018654",
        "779655053998040854338961591319296066",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253979",
        "37816691783627670491375998320948925696",
    );
    test(
        "253640751230376270397812803167",
        "2669936877441",
        "94998781946290113",
        "1520301762334",
    );
    test(
        "3768477692975601",
        "11447376614057827956",
        "0",
        "3768477692975601",
    );
    test(
        "3356605361737854",
        "3081095617839357",
        "1",
        "275509743898497",
    );
    test(
        "1098730198198174614195",
        "953382298040157850476",
        "1",
        "145347900158016763719",
    );
    test(
        "69738658860594537152875081748",
        "69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test("123", "1000000000000000000000000", "0", "123");

    test("0", "-1", "0", "0");
    test("0", "-123", "0", "0");
    test("1", "-1", "-1", "0");
    test("123", "-1", "-123", "0");
    test("123", "-123", "-1", "0");
    test("123", "-456", "-1", "-333");
    test("456", "-123", "-4", "-36");
    test("4294967295", "-1", "-4294967295", "0");
    test("4294967295", "-4294967295", "-1", "0");
    test("1000000000000", "-1", "-1000000000000", "0");
    test("1000000000000", "-3", "-333333333334", "-2");
    test("1000000000000", "-123", "-8130081301", "-23");
    test("1000000000000", "-4294967295", "-233", "-727379735");
    test(
        "1000000000000000000000000",
        "-1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-3",
        "-333333333333333333333334",
        "-2",
    );
    test(
        "1000000000000000000000000",
        "-123",
        "-8130081300813008130082",
        "-86",
    );
    test(
        "1000000000000000000000000",
        "-4294967295",
        "-232830643708080",
        "-1127243600",
    );
    test(
        "1000000000000000000000000",
        "-1234567890987",
        "-810000006724",
        "-704498996588",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         0",
        "-1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018655",
        "-454912836989613466895606299668358255",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         0",
        "-316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253980",
        "-278232688309211835744673381771890580480",
    );
    test(
        "253640751230376270397812803167",
        "-2669936877441",
        "-94998781946290114",
        "-1149635115107",
    );
    test(
        "3768477692975601",
        "-11447376614057827956",
        "-1",
        "-11443608136364852355",
    );
    test(
        "3356605361737854",
        "-3081095617839357",
        "-2",
        "-2805585873940860",
    );
    test(
        "1098730198198174614195",
        "-953382298040157850476",
        "-2",
        "-808034397882141086757",
    );
    test(
        "69738658860594537152875081748",
        "-69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-1000000000000000000000000",
        "-1",
        "0",
    );
    test("0", "-1000000000000000000000000", "0", "0");
    test(
        "123",
        "-1000000000000000000000000",
        "-1",
        "-999999999999999999999877",
    );

    test("-1", "1", "-1", "0");
    test("-123", "1", "-123", "0");
    test("-123", "123", "-1", "0");
    test("-123", "456", "-1", "333");
    test("-456", "123", "-4", "36");
    test("-4294967295", "-1", "4294967295", "0");
    test("-4294967295", "4294967295", "-1", "0");
    test("-1000000000000", "1", "-1000000000000", "0");
    test("-1000000000000", "3", "-333333333334", "2");
    test("-1000000000000", "123", "-8130081301", "23");
    test("-1000000000000", "4294967295", "-233", "727379735");
    test(
        "-1000000000000000000000000",
        "1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "3",
        "-333333333333333333333334",
        "2",
    );
    test(
        "-1000000000000000000000000",
        "123",
        "-8130081300813008130082",
        "86",
    );
    test(
        "-1000000000000000000000000",
        "4294967295",
        "-232830643708080",
        "1127243600",
    );
    test(
        "-1000000000000000000000000",
        "1234567890987",
        "-810000006724",
        "704498996588",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018655",
        "454912836989613466895606299668358255",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253980",
        "278232688309211835744673381771890580480",
    );
    test(
        "-253640751230376270397812803167",
        "2669936877441",
        "-94998781946290114",
        "1149635115107",
    );
    test(
        "-3768477692975601",
        "11447376614057827956",
        "-1",
        "11443608136364852355",
    );
    test(
        "-3356605361737854",
        "3081095617839357",
        "-2",
        "2805585873940860",
    );
    test(
        "-1098730198198174614195",
        "953382298040157850476",
        "-2",
        "808034397882141086757",
    );
    test(
        "-69738658860594537152875081748",
        "69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "1000000000000000000000000",
        "-1",
        "0",
    );
    test(
        "-123",
        "1000000000000000000000000",
        "-1",
        "999999999999999999999877",
    );

    test("-1", "-1", "1", "0");
    test("-123", "-1", "123", "0");
    test("-123", "-123", "1", "0");
    test("-123", "-456", "0", "-123");
    test("-456", "-123", "3", "-87");
    test("-4294967295", "-1", "4294967295", "0");
    test("-4294967295", "-4294967295", "1", "0");
    test("-1000000000000", "-1", "1000000000000", "0");
    test("-1000000000000", "-3", "333333333333", "-1");
    test("-1000000000000", "-123", "8130081300", "-100");
    test("-1000000000000", "-4294967295", "232", "-3567587560");
    test(
        "-1000000000000000000000000",
        "-1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-3",
        "333333333333333333333333",
        "-1",
    );
    test(
        "-1000000000000000000000000",
        "-123",
        "8130081300813008130081",
        "-37",
    );
    test(
        "-1000000000000000000000000",
        "-4294967295",
        "232830643708079",
        "-3167723695",
    );
    test(
        "-1000000000000000000000000",
        "-1234567890987",
        "810000006723",
        "-530068894399",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "-1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018654",
        "-779655053998040854338961591319296066",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "-316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253979",
        "-37816691783627670491375998320948925696",
    );
    test(
        "-253640751230376270397812803167",
        "-2669936877441",
        "94998781946290113",
        "-1520301762334",
    );
    test(
        "-3768477692975601",
        "-11447376614057827956",
        "0",
        "-3768477692975601",
    );
    test(
        "-3356605361737854",
        "-3081095617839357",
        "1",
        "-275509743898497",
    );
    test(
        "-1098730198198174614195",
        "-953382298040157850476",
        "1",
        "-145347900158016763719",
    );
    test(
        "-69738658860594537152875081748",
        "-69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-1000000000000000000000000",
        "1",
        "0",
    );
    test("-123", "-1000000000000000000000000", "0", "-123");
}

#[test]
#[should_panic]
fn div_assign_mod_fail() {
    Integer::from(10).div_assign_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_assign_mod_ref_fail() {
    Integer::from(10).div_assign_mod(&Integer::ZERO);
}

#[test]
#[should_panic]
fn div_mod_fail() {
    Integer::from(10).div_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_mod_val_ref_fail() {
    Integer::from(10).div_mod(&Integer::ZERO);
}

#[test]
#[should_panic]
fn div_mod_ref_val_fail() {
    (&Integer::from(10)).div_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_mod_ref_ref_fail() {
    (&Integer::from(10)).div_mod(&Integer::ZERO);
}

#[test]
fn test_div_rem() {
    let test = |u, v, quotient, remainder| {
        let mut x = Integer::from_str(u).unwrap();
        let r = x.div_assign_rem(Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Integer::from_str(u).unwrap();
        let r = x.div_assign_rem(&Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .div_rem(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .div_rem(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Integer::from_str(u).unwrap()).div_rem(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Integer::from_str(u).unwrap()).div_rem(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = BigInt::from_str(u)
            .unwrap()
            .div_rem(&BigInt::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug::Integer::from_str(u)
            .unwrap()
            .div_rem(rug::Integer::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (
            Integer::from_str(u).unwrap() / Integer::from_str(v).unwrap(),
            Integer::from_str(u).unwrap() % Integer::from_str(v).unwrap(),
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);
    };
    test("0", "1", "0", "0");
    test("0", "123", "0", "0");
    test("1", "1", "1", "0");
    test("123", "1", "123", "0");
    test("123", "123", "1", "0");
    test("123", "456", "0", "123");
    test("456", "123", "3", "87");
    test("4294967295", "1", "4294967295", "0");
    test("4294967295", "4294967295", "1", "0");
    test("1000000000000", "1", "1000000000000", "0");
    test("1000000000000", "3", "333333333333", "1");
    test("1000000000000", "123", "8130081300", "100");
    test("1000000000000", "4294967295", "232", "3567587560");
    test(
        "1000000000000000000000000",
        "1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "3",
        "333333333333333333333333",
        "1",
    );
    test(
        "1000000000000000000000000",
        "123",
        "8130081300813008130081",
        "37",
    );
    test(
        "1000000000000000000000000",
        "4294967295",
        "232830643708079",
        "3167723695",
    );
    test(
        "1000000000000000000000000",
        "1234567890987",
        "810000006723",
        "530068894399",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018654",
        "779655053998040854338961591319296066",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253979",
        "37816691783627670491375998320948925696",
    );
    test(
        "253640751230376270397812803167",
        "2669936877441",
        "94998781946290113",
        "1520301762334",
    );
    test(
        "3768477692975601",
        "11447376614057827956",
        "0",
        "3768477692975601",
    );
    test(
        "3356605361737854",
        "3081095617839357",
        "1",
        "275509743898497",
    );
    test(
        "1098730198198174614195",
        "953382298040157850476",
        "1",
        "145347900158016763719",
    );
    test(
        "69738658860594537152875081748",
        "69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test("123", "1000000000000000000000000", "0", "123");

    test("0", "-1", "0", "0");
    test("0", "-123", "0", "0");
    test("1", "-1", "-1", "0");
    test("123", "-1", "-123", "0");
    test("123", "-123", "-1", "0");
    test("123", "-456", "0", "123");
    test("456", "-123", "-3", "87");
    test("4294967295", "-1", "-4294967295", "0");
    test("4294967295", "-4294967295", "-1", "0");
    test("1000000000000", "-1", "-1000000000000", "0");
    test("1000000000000", "-3", "-333333333333", "1");
    test("1000000000000", "-123", "-8130081300", "100");
    test("1000000000000", "-4294967295", "-232", "3567587560");
    test(
        "1000000000000000000000000",
        "-1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-3",
        "-333333333333333333333333",
        "1",
    );
    test(
        "1000000000000000000000000",
        "-123",
        "-8130081300813008130081",
        "37",
    );
    test(
        "1000000000000000000000000",
        "-4294967295",
        "-232830643708079",
        "3167723695",
    );
    test(
        "1000000000000000000000000",
        "-1234567890987",
        "-810000006723",
        "530068894399",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "-1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018654",
        "779655053998040854338961591319296066",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "-316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253979",
        "37816691783627670491375998320948925696",
    );
    test(
        "253640751230376270397812803167",
        "-2669936877441",
        "-94998781946290113",
        "1520301762334",
    );
    test(
        "3768477692975601",
        "-11447376614057827956",
        "0",
        "3768477692975601",
    );
    test(
        "3356605361737854",
        "-3081095617839357",
        "-1",
        "275509743898497",
    );
    test(
        "1098730198198174614195",
        "-953382298040157850476",
        "-1",
        "145347900158016763719",
    );
    test(
        "69738658860594537152875081748",
        "-69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-1000000000000000000000000",
        "-1",
        "0",
    );
    test("0", "-1000000000000000000000000", "0", "0");
    test("123", "-1000000000000000000000000", "0", "123");

    test("-1", "1", "-1", "0");
    test("-123", "1", "-123", "0");
    test("-123", "123", "-1", "0");
    test("-123", "456", "0", "-123");
    test("-456", "123", "-3", "-87");
    test("-4294967295", "1", "-4294967295", "0");
    test("-4294967295", "4294967295", "-1", "0");
    test("-1000000000000", "1", "-1000000000000", "0");
    test("-1000000000000", "3", "-333333333333", "-1");
    test("-1000000000000", "123", "-8130081300", "-100");
    test("-1000000000000", "4294967295", "-232", "-3567587560");
    test(
        "-1000000000000000000000000",
        "1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "3",
        "-333333333333333333333333",
        "-1",
    );
    test(
        "-1000000000000000000000000",
        "123",
        "-8130081300813008130081",
        "-37",
    );
    test(
        "-1000000000000000000000000",
        "4294967295",
        "-232830643708079",
        "-3167723695",
    );
    test(
        "-1000000000000000000000000",
        "1234567890987",
        "-810000006723",
        "-530068894399",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018654",
        "-779655053998040854338961591319296066",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253979",
        "-37816691783627670491375998320948925696",
    );
    test(
        "-253640751230376270397812803167",
        "2669936877441",
        "-94998781946290113",
        "-1520301762334",
    );
    test(
        "-3768477692975601",
        "11447376614057827956",
        "0",
        "-3768477692975601",
    );
    test(
        "-3356605361737854",
        "3081095617839357",
        "-1",
        "-275509743898497",
    );
    test(
        "-1098730198198174614195",
        "953382298040157850476",
        "-1",
        "-145347900158016763719",
    );
    test(
        "-69738658860594537152875081748",
        "69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "1000000000000000000000000",
        "-1",
        "0",
    );
    test("-123", "1000000000000000000000000", "0", "-123");

    test("-1", "-1", "1", "0");
    test("-123", "-1", "123", "0");
    test("-123", "-123", "1", "0");
    test("-123", "-456", "0", "-123");
    test("-456", "-123", "3", "-87");
    test("-4294967295", "-1", "4294967295", "0");
    test("-4294967295", "-4294967295", "1", "0");
    test("-1000000000000", "-1", "1000000000000", "0");
    test("-1000000000000", "-3", "333333333333", "-1");
    test("-1000000000000", "-123", "8130081300", "-100");
    test("-1000000000000", "-4294967295", "232", "-3567587560");
    test(
        "-1000000000000000000000000",
        "-1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-3",
        "333333333333333333333333",
        "-1",
    );
    test(
        "-1000000000000000000000000",
        "-123",
        "8130081300813008130081",
        "-37",
    );
    test(
        "-1000000000000000000000000",
        "-4294967295",
        "232830643708079",
        "-3167723695",
    );
    test(
        "-1000000000000000000000000",
        "-1234567890987",
        "810000006723",
        "-530068894399",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "-1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018654",
        "-779655053998040854338961591319296066",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "-316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253979",
        "-37816691783627670491375998320948925696",
    );
    test(
        "-253640751230376270397812803167",
        "-2669936877441",
        "94998781946290113",
        "-1520301762334",
    );
    test(
        "-3768477692975601",
        "-11447376614057827956",
        "0",
        "-3768477692975601",
    );
    test(
        "-3356605361737854",
        "-3081095617839357",
        "1",
        "-275509743898497",
    );
    test(
        "-1098730198198174614195",
        "-953382298040157850476",
        "1",
        "-145347900158016763719",
    );
    test(
        "-69738658860594537152875081748",
        "-69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-1000000000000000000000000",
        "1",
        "0",
    );
    test("-123", "-1000000000000000000000000", "0", "-123");
}

#[test]
#[should_panic]
fn div_assign_rem_fail() {
    Integer::from(10).div_assign_rem(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_assign_rem_ref_fail() {
    Integer::from(10).div_assign_rem(&Integer::ZERO);
}

#[test]
#[should_panic]
fn div_rem_fail() {
    Integer::from(10).div_rem(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_rem_val_ref_fail() {
    Integer::from(10).div_rem(&Integer::ZERO);
}

#[test]
#[should_panic]
fn div_rem_ref_val_fail() {
    (&Integer::from(10)).div_rem(Integer::ZERO);
}

#[test]
#[should_panic]
fn div_rem_ref_ref_fail() {
    (&Integer::from(10)).div_rem(&Integer::ZERO);
}

#[test]
fn test_ceiling_div_mod() {
    let test = |u, v, quotient, remainder| {
        let mut x = Integer::from_str(u).unwrap();
        let r = x.ceiling_div_assign_mod(Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Integer::from_str(u).unwrap();
        let r = x.ceiling_div_assign_mod(&Integer::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .ceiling_div_mod(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Integer::from_str(u)
            .unwrap()
            .ceiling_div_mod(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) =
            (&Integer::from_str(u).unwrap()).ceiling_div_mod(Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) =
            (&Integer::from_str(u).unwrap()).ceiling_div_mod(&Integer::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug::Integer::from_str(u)
            .unwrap()
            .div_rem_ceil(rug::Integer::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (
            Integer::from_str(u)
                .unwrap()
                .div_round(Integer::from_str(v).unwrap(), RoundingMode::Ceiling),
            Integer::from_str(u)
                .unwrap()
                .ceiling_mod(Integer::from_str(v).unwrap()),
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);
    };
    test("0", "1", "0", "0");
    test("0", "123", "0", "0");
    test("1", "1", "1", "0");
    test("123", "1", "123", "0");
    test("123", "123", "1", "0");
    test("123", "456", "1", "-333");
    test("456", "123", "4", "-36");
    test("4294967295", "1", "4294967295", "0");
    test("4294967295", "4294967295", "1", "0");
    test("1000000000000", "1", "1000000000000", "0");
    test("1000000000000", "3", "333333333334", "-2");
    test("1000000000000", "123", "8130081301", "-23");
    test("1000000000000", "4294967295", "233", "-727379735");
    test(
        "1000000000000000000000000",
        "1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "3",
        "333333333333333333333334",
        "-2",
    );
    test(
        "1000000000000000000000000",
        "123",
        "8130081300813008130082",
        "-86",
    );
    test(
        "1000000000000000000000000",
        "4294967295",
        "232830643708080",
        "-1127243600",
    );
    test(
        "1000000000000000000000000",
        "1234567890987",
        "810000006724",
        "-704498996588",
    );
    test(
        "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018655",
        "-454912836989613466895606299668358255",
    );
    test(
        "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253980",
        "-278232688309211835744673381771890580480",
    );
    test(
        "253640751230376270397812803167",
        "2669936877441",
        "94998781946290114",
        "-1149635115107",
    );
    test(
        "3768477692975601",
        "11447376614057827956",
        "1",
        "-11443608136364852355",
    );
    test(
        "3356605361737854",
        "3081095617839357",
        "2",
        "-2805585873940860",
    );
    test(
        "1098730198198174614195",
        "953382298040157850476",
        "2",
        "-808034397882141086757",
    );
    test(
        "69738658860594537152875081748",
        "69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test(
        "123",
        "1000000000000000000000000",
        "1",
        "-999999999999999999999877",
    );

    test("0", "-1", "0", "0");
    test("0", "-123", "0", "0");
    test("1", "-1", "-1", "0");
    test("123", "-1", "-123", "0");
    test("123", "-123", "-1", "0");
    test("123", "-456", "0", "123");
    test("456", "-123", "-3", "87");
    test("4294967295", "-1", "-4294967295", "0");
    test("4294967295", "-4294967295", "-1", "0");
    test("1000000000000", "-1", "-1000000000000", "0");
    test("1000000000000", "-3", "-333333333333", "1");
    test("1000000000000", "-123", "-8130081300", "100");
    test("1000000000000", "-4294967295", "-232", "3567587560");
    test(
        "1000000000000000000000000",
        "-1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-3",
        "-333333333333333333333333",
        "1",
    );
    test(
        "1000000000000000000000000",
        "-123",
        "-8130081300813008130081",
        "37",
    );
    test(
        "1000000000000000000000000",
        "-4294967295",
        "-232830643708079",
        "3167723695",
    );
    test(
        "1000000000000000000000000",
        "-1234567890987",
        "-810000006723",
        "530068894399",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "-1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018654",
        "779655053998040854338961591319296066",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "-316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253979",
        "37816691783627670491375998320948925696",
    );
    test(
        "253640751230376270397812803167",
        "-2669936877441",
        "-94998781946290113",
        "1520301762334",
    );
    test(
        "3768477692975601",
        "-11447376614057827956",
        "0",
        "3768477692975601",
    );
    test(
        "3356605361737854",
        "-3081095617839357",
        "-1",
        "275509743898497",
    );
    test(
        "1098730198198174614195",
        "-953382298040157850476",
        "-1",
        "145347900158016763719",
    );
    test(
        "69738658860594537152875081748",
        "-69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "-1000000000000000000000000",
        "-1",
        "0",
    );
    test("0", "-1000000000000000000000000", "0", "0");
    test("123", "-1000000000000000000000000", "0", "123");

    test("-1", "1", "-1", "0");
    test("-123", "1", "-123", "0");
    test("-123", "123", "-1", "0");
    test("-123", "456", "0", "-123");
    test("-456", "123", "-3", "-87");
    test("-4294967295", "1", "-4294967295", "0");
    test("-4294967295", "4294967295", "-1", "0");
    test("-1000000000000", "1", "-1000000000000", "0");
    test("-1000000000000", "3", "-333333333333", "-1");
    test("-1000000000000", "123", "-8130081300", "-100");
    test("-1000000000000", "4294967295", "-232", "-3567587560");
    test(
        "-1000000000000000000000000",
        "1",
        "-1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "3",
        "-333333333333333333333333",
        "-1",
    );
    test(
        "-1000000000000000000000000",
        "123",
        "-8130081300813008130081",
        "-37",
    );
    test(
        "-1000000000000000000000000",
        "4294967295",
        "-232830643708079",
        "-3167723695",
    );
    test(
        "-1000000000000000000000000",
        "1234567890987",
        "-810000006723",
        "-530068894399",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "1234567890987654321234567890987654321",
        "-810000006723000055638900467181273922269593923137018654",
        "-779655053998040854338961591319296066",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        00",
        "316049380092839506236049380092839506176",
        "-3164062526261718967339454949926851258865601262253979",
        "-37816691783627670491375998320948925696",
    );
    test(
        "-253640751230376270397812803167",
        "2669936877441",
        "-94998781946290113",
        "-1520301762334",
    );
    test(
        "-3768477692975601",
        "11447376614057827956",
        "0",
        "-3768477692975601",
    );
    test(
        "-3356605361737854",
        "3081095617839357",
        "-1",
        "-275509743898497",
    );
    test(
        "-1098730198198174614195",
        "953382298040157850476",
        "-1",
        "-145347900158016763719",
    );
    test(
        "-69738658860594537152875081748",
        "69738658860594537152875081748",
        "-1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "1000000000000000000000000",
        "-1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test("-123", "1000000000000000000000000", "0", "-123");

    test("-1", "-1", "1", "0");
    test("-123", "-1", "123", "0");
    test("-123", "-123", "1", "0");
    test("-123", "-456", "1", "333");
    test("-456", "-123", "4", "36");
    test("-4294967295", "-1", "4294967295", "0");
    test("-4294967295", "-4294967295", "1", "0");
    test("-1000000000000", "-1", "1000000000000", "0");
    test("-1000000000000", "-3", "333333333334", "2");
    test("-1000000000000", "-123", "8130081301", "23");
    test("-1000000000000", "-4294967295", "233", "727379735");
    test(
        "-1000000000000000000000000",
        "-1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-3",
        "333333333333333333333334",
        "2",
    );
    test(
        "-1000000000000000000000000",
        "-123",
        "8130081300813008130082",
        "86",
    );
    test(
        "-1000000000000000000000000",
        "-4294967295",
        "232830643708080",
        "1127243600",
    );
    test(
        "-1000000000000000000000000",
        "-1234567890987",
        "810000006724",
        "704498996588",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "-1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018655",
        "454912836989613466895606299668358255",
    );
    test(
        "-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "-316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253980",
        "278232688309211835744673381771890580480",
    );
    test(
        "-253640751230376270397812803167",
        "-2669936877441",
        "94998781946290114",
        "1149635115107",
    );
    test(
        "-3768477692975601",
        "-11447376614057827956",
        "1",
        "11443608136364852355",
    );
    test(
        "-3356605361737854",
        "-3081095617839357",
        "2",
        "2805585873940860",
    );
    test(
        "-1098730198198174614195",
        "-953382298040157850476",
        "2",
        "808034397882141086757",
    );
    test(
        "-69738658860594537152875081748",
        "-69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "-1000000000000000000000000",
        "-1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "-1000000000000000000000000", "0", "0");
    test(
        "-123",
        "-1000000000000000000000000",
        "1",
        "999999999999999999999877",
    );
}

#[test]
#[should_panic]
fn ceiling_div_assign_mod_fail() {
    Integer::from(10).ceiling_div_assign_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_assign_mod_ref_fail() {
    Integer::from(10).ceiling_div_assign_mod(&Integer::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_mod_fail() {
    Integer::from(10).ceiling_div_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_mod_val_ref_fail() {
    Integer::from(10).ceiling_div_mod(&Integer::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_mod_ref_val_fail() {
    (&Integer::from(10)).ceiling_div_mod(Integer::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_mod_ref_ref_fail() {
    (&Integer::from(10)).ceiling_div_mod(&Integer::ZERO);
}
