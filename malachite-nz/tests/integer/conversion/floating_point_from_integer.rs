use std::str::FromStr;

use malachite_base::num::conversion::traits::{
    CheckedFrom, ConvertibleFrom, ExactFrom, RoundingFrom,
};
use malachite_base::num::floats::PrimitiveFloat;
use malachite_base::rounding_modes::RoundingMode;

use malachite_nz::integer::Integer;

#[test]
fn test_f32_rounding_from_integer() {
    let test = |n: &str, rm: RoundingMode, out| {
        assert_eq!(f32::rounding_from(Integer::from_str(n).unwrap(), rm), out);
        assert_eq!(f32::rounding_from(&Integer::from_str(n).unwrap(), rm), out);
    };
    test("3", RoundingMode::Exact, 3.0);
    test("-3", RoundingMode::Exact, -3.0);
    test("123", RoundingMode::Exact, 123.0);
    test("-123", RoundingMode::Exact, -123.0);
    test("0", RoundingMode::Exact, 0.0);
    test("1000000000", RoundingMode::Exact, 1.0e9);
    test("-1000000000", RoundingMode::Exact, -1.0e9);
    test("16777216", RoundingMode::Exact, 1.677_721_6e7);
    test("-16777216", RoundingMode::Exact, -1.677_721_6e7);
    test("16777218", RoundingMode::Exact, 1.677_721_8e7);
    test("-16777218", RoundingMode::Exact, -1.677_721_8e7);
    test("16777217", RoundingMode::Floor, 1.677_721_6e7);
    test("16777217", RoundingMode::Down, 1.677_721_6e7);
    test("16777217", RoundingMode::Ceiling, 1.677_721_8e7);
    test("16777217", RoundingMode::Up, 1.677_721_8e7);
    test("16777217", RoundingMode::Nearest, 1.677_721_6e7);
    test("-16777217", RoundingMode::Floor, -1.677_721_8e7);
    test("-16777217", RoundingMode::Down, -1.677_721_6e7);
    test("-16777217", RoundingMode::Ceiling, -1.677_721_6e7);
    test("-16777217", RoundingMode::Up, -1.677_721_8e7);
    test("-16777217", RoundingMode::Nearest, -1.677_721_6e7);
    test("33554432", RoundingMode::Exact, 3.355_443_2e7);
    test("-33554432", RoundingMode::Exact, -3.355_443_2e7);
    test("33554436", RoundingMode::Exact, 3.355_443_6e7);
    test("-33554436", RoundingMode::Exact, -3.355_443_6e7);
    test("33554433", RoundingMode::Floor, 3.355_443_2e7);
    test("33554433", RoundingMode::Down, 3.355_443_2e7);
    test("33554433", RoundingMode::Ceiling, 3.355_443_6e7);
    test("33554433", RoundingMode::Up, 3.355_443_6e7);
    test("33554433", RoundingMode::Nearest, 3.355_443_2e7);
    test("-33554433", RoundingMode::Floor, -3.355_443_6e7);
    test("-33554433", RoundingMode::Down, -3.355_443_2e7);
    test("-33554433", RoundingMode::Ceiling, -3.355_443_2e7);
    test("-33554433", RoundingMode::Up, -3.355_443_6e7);
    test("-33554433", RoundingMode::Nearest, -3.355_443_2e7);
    test("33554434", RoundingMode::Nearest, 3.355_443_2e7);
    test("-33554434", RoundingMode::Nearest, -3.355_443_2e7);
    test("33554435", RoundingMode::Nearest, 3.355_443_6e7);
    test("-33554435", RoundingMode::Nearest, -3.355_443_6e7);
    test(
        "340282346638528859811704183484516925439",
        RoundingMode::Floor,
        3.402_823_3e38,
    );
    test(
        "340282346638528859811704183484516925439",
        RoundingMode::Down,
        3.402_823_3e38,
    );
    test(
        "340282346638528859811704183484516925439",
        RoundingMode::Ceiling,
        3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925439",
        RoundingMode::Up,
        3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925439",
        RoundingMode::Nearest,
        3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925439",
        RoundingMode::Floor,
        -3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925439",
        RoundingMode::Down,
        -3.402_823_3e38,
    );
    test(
        "-340282346638528859811704183484516925439",
        RoundingMode::Ceiling,
        -3.402_823_3e38,
    );
    test(
        "-340282346638528859811704183484516925439",
        RoundingMode::Up,
        -3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925439",
        RoundingMode::Nearest,
        -3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925440",
        RoundingMode::Exact,
        3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925440",
        RoundingMode::Exact,
        -3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925441",
        RoundingMode::Floor,
        3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925441",
        RoundingMode::Down,
        3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925441",
        RoundingMode::Nearest,
        3.402_823_5e38,
    );
    test(
        "340282346638528859811704183484516925441",
        RoundingMode::Ceiling,
        f32::POSITIVE_INFINITY,
    );
    test(
        "340282346638528859811704183484516925441",
        RoundingMode::Up,
        f32::POSITIVE_INFINITY,
    );
    test(
        "-340282346638528859811704183484516925441",
        RoundingMode::Floor,
        f32::NEGATIVE_INFINITY,
    );
    test(
        "-340282346638528859811704183484516925441",
        RoundingMode::Down,
        -3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925441",
        RoundingMode::Nearest,
        -3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925441",
        RoundingMode::Ceiling,
        -3.402_823_5e38,
    );
    test(
        "-340282346638528859811704183484516925441",
        RoundingMode::Up,
        f32::NEGATIVE_INFINITY,
    );
    test(
        "10000000000000000000000000000000000000000000000000000",
        RoundingMode::Floor,
        3.402_823_5e38,
    );
    test(
        "10000000000000000000000000000000000000000000000000000",
        RoundingMode::Down,
        3.402_823_5e38,
    );
    test(
        "10000000000000000000000000000000000000000000000000000",
        RoundingMode::Nearest,
        3.402_823_5e38,
    );
    test(
        "10000000000000000000000000000000000000000000000000000",
        RoundingMode::Ceiling,
        f32::POSITIVE_INFINITY,
    );
    test(
        "10000000000000000000000000000000000000000000000000000",
        RoundingMode::Up,
        f32::POSITIVE_INFINITY,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        RoundingMode::Floor,
        f32::NEGATIVE_INFINITY,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        RoundingMode::Down,
        -3.402_823_5e38,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        RoundingMode::Nearest,
        -3.402_823_5e38,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        RoundingMode::Ceiling,
        -3.402_823_5e38,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        RoundingMode::Up,
        f32::NEGATIVE_INFINITY,
    );
    test("1125899873419263", RoundingMode::Floor, 1.125_899_84e15);
    test("1125899873419263", RoundingMode::Down, 1.125_899_84e15);
    test("1125899873419263", RoundingMode::Ceiling, 1.125_899_9e15);
    test("1125899873419263", RoundingMode::Up, 1.125_899_9e15);
    test("1125899873419263", RoundingMode::Nearest, 1.125_899_9e15);
    test("-1125899873419263", RoundingMode::Floor, -1.125_899_9e15);
    test("-1125899873419263", RoundingMode::Down, -1.125_899_84e15);
    test("-1125899873419263", RoundingMode::Ceiling, -1.125_899_84e15);
    test("-1125899873419263", RoundingMode::Up, -1.125_899_9e15);
    test("-1125899873419263", RoundingMode::Nearest, -1.125_899_9e15);
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_fail_1() {
    f32::rounding_from(
        Integer::from_str("340282346638528859811704183484516925439").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_fail_2() {
    f32::rounding_from(
        Integer::from_str("340282346638528859811704183484516925441").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_fail_3() {
    f32::rounding_from(Integer::from_str("16777217").unwrap(), RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_fail_4() {
    f32::rounding_from(
        Integer::from_str("10000000000000000000000000000000000000000000000000000").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_ref_fail_1() {
    f32::rounding_from(
        &Integer::from_str("340282346638528859811704183484516925439").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_ref_fail_2() {
    f32::rounding_from(
        &Integer::from_str("340282346638528859811704183484516925441").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_ref_fail_3() {
    f32::rounding_from(&Integer::from_str("16777217").unwrap(), RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f32_rounding_from_integer_ref_fail_4() {
    f32::rounding_from(
        &Integer::from_str("10000000000000000000000000000000000000000000000000000").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
fn test_f64_rounding_from_integer() {
    let test = |n: &str, rm: RoundingMode, out| {
        assert_eq!(f64::rounding_from(Integer::from_str(n).unwrap(), rm), out);
    };
    test("3", RoundingMode::Exact, 3.0);
    test("-3", RoundingMode::Exact, -3.0);
    test("123", RoundingMode::Exact, 123.0);
    test("-123", RoundingMode::Exact, -123.0);
    test("0", RoundingMode::Exact, 0.0);
    test("100000000000000000000", RoundingMode::Exact, 1.0e20);
    test("-100000000000000000000", RoundingMode::Exact, -1.0e20);
    test(
        "9007199254740992",
        RoundingMode::Exact,
        9.007_199_254_740_992e15,
    );
    test(
        "-9007199254740992",
        RoundingMode::Exact,
        -9.007_199_254_740_992e15,
    );
    test(
        "9007199254740994",
        RoundingMode::Exact,
        9.007_199_254_740_994e15,
    );
    test(
        "-9007199254740994",
        RoundingMode::Exact,
        -9.007_199_254_740_994e15,
    );
    test(
        "9007199254740993",
        RoundingMode::Floor,
        9.007_199_254_740_992e15,
    );
    test(
        "9007199254740993",
        RoundingMode::Down,
        9.007_199_254_740_992e15,
    );
    test(
        "9007199254740993",
        RoundingMode::Ceiling,
        9.007_199_254_740_994e15,
    );
    test(
        "9007199254740993",
        RoundingMode::Up,
        9.007_199_254_740_994e15,
    );
    test(
        "9007199254740993",
        RoundingMode::Nearest,
        9.007_199_254_740_992e15,
    );
    test(
        "-9007199254740993",
        RoundingMode::Floor,
        -9.007_199_254_740_994e15,
    );
    test(
        "-9007199254740993",
        RoundingMode::Down,
        -9.007_199_254_740_992e15,
    );
    test(
        "-9007199254740993",
        RoundingMode::Ceiling,
        -9.007_199_254_740_992e15,
    );
    test(
        "-9007199254740993",
        RoundingMode::Up,
        -9.007_199_254_740_994e15,
    );
    test(
        "-9007199254740993",
        RoundingMode::Nearest,
        -9.007_199_254_740_992e15,
    );
    test(
        "18014398509481984",
        RoundingMode::Exact,
        1.801_439_850_948_198_4e16,
    );
    test(
        "-18014398509481984",
        RoundingMode::Exact,
        -1.801_439_850_948_198_4e16,
    );
    test(
        "18014398509481988",
        RoundingMode::Exact,
        1.801_439_850_948_198_8e16,
    );
    test(
        "-18014398509481988",
        RoundingMode::Exact,
        -1.801_439_850_948_198_8e16,
    );
    test(
        "18014398509481985",
        RoundingMode::Floor,
        1.801_439_850_948_198_4e16,
    );
    test(
        "18014398509481985",
        RoundingMode::Down,
        1.801_439_850_948_198_4e16,
    );
    test(
        "18014398509481985",
        RoundingMode::Ceiling,
        1.801_439_850_948_198_8e16,
    );
    test(
        "18014398509481985",
        RoundingMode::Up,
        1.801_439_850_948_198_8e16,
    );
    test(
        "18014398509481985",
        RoundingMode::Nearest,
        1.801_439_850_948_198_4e16,
    );
    test(
        "-18014398509481985",
        RoundingMode::Floor,
        -1.801_439_850_948_198_8e16,
    );
    test(
        "-18014398509481985",
        RoundingMode::Down,
        -1.801_439_850_948_198_4e16,
    );
    test(
        "-18014398509481985",
        RoundingMode::Ceiling,
        -1.801_439_850_948_198_4e16,
    );
    test(
        "-18014398509481985",
        RoundingMode::Up,
        -1.801_439_850_948_198_8e16,
    );
    test(
        "-18014398509481985",
        RoundingMode::Nearest,
        -1.801_439_850_948_198_4e16,
    );
    test(
        "18014398509481986",
        RoundingMode::Nearest,
        1.801_439_850_948_198_4e16,
    );
    test(
        "-18014398509481986",
        RoundingMode::Nearest,
        -1.801_439_850_948_198_4e16,
    );
    test(
        "18014398509481987",
        RoundingMode::Nearest,
        1.801_439_850_948_198_8e16,
    );
    test(
        "-18014398509481987",
        RoundingMode::Nearest,
        -1.801_439_850_948_198_8e16,
    );
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", RoundingMode::Floor, 1.797_693_134_862_315_5e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", RoundingMode::Down, 1.797_693_134_862_315_5e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", RoundingMode::Ceiling, 1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", RoundingMode::Up, 1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", RoundingMode::Nearest, 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", RoundingMode::Floor, -1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", RoundingMode::Down, -1.797_693_134_862_315_5e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367",
        RoundingMode::Ceiling,
        -1.797_693_134_862_315_5e308
    );
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", RoundingMode::Up, -1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367",
        RoundingMode::Nearest,
        -1.797_693_134_862_315_7e308
    );
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368", RoundingMode::Exact, 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368", RoundingMode::Exact, -1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", RoundingMode::Floor, 1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", RoundingMode::Down, 1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", RoundingMode::Nearest, 1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", RoundingMode::Ceiling, f64::POSITIVE_INFINITY);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", RoundingMode::Up, f64::POSITIVE_INFINITY);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", RoundingMode::Floor, f64::NEGATIVE_INFINITY);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", RoundingMode::Down, -1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369",
        RoundingMode::Nearest,
        -1.797_693_134_862_315_7e308
    );
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369",
        RoundingMode::Ceiling,
        -1.797_693_134_862_315_7e308
    );
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", RoundingMode::Up, f64::NEGATIVE_INFINITY);
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_fail_1() {
    f64::rounding_from(Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367").unwrap(),
                       RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_fail_2() {
    f64::rounding_from(Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369").unwrap(),
                       RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_fail_3() {
    f64::rounding_from(
        Integer::from_str("9007199254740993").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_ref_fail_1() {
    f64::rounding_from(&Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367").unwrap(),
                       RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_ref_fail_2() {
    f64::rounding_from(&Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369").unwrap(),
                       RoundingMode::Exact);
}

#[test]
#[should_panic]
fn f64_rounding_from_integer_ref_fail_3() {
    f64::rounding_from(
        &Integer::from_str("9007199254740993").unwrap(),
        RoundingMode::Exact,
    );
}

#[test]
fn test_f32_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f32::from(Integer::from_str(n).unwrap()), out);
    };
    test("3", 3.0);
    test("-3", -3.0);
    test("123", 123.0);
    test("-123", -123.0);
    test("0", 0.0);
    test("1000000000", 1.0e9);
    test("-1000000000", -1.0e9);
    test("16777216", 1.677_721_6e7);
    test("-16777216", -1.677_721_6e7);
    test("16777218", 1.677_721_8e7);
    test("-16777218", -1.677_721_8e7);
    test("16777217", 1.677_721_6e7);
    test("-16777217", -1.677_721_6e7);
    test("33554432", 3.355_443_2e7);
    test("-33554432", -3.355_443_2e7);
    test("33554436", 3.355_443_6e7);
    test("-33554436", -3.355_443_6e7);
    test("33554433", 3.355_443_2e7);
    test("-33554433", -3.355_443_2e7);
    test("33554434", 3.355_443_2e7);
    test("-33554434", -3.355_443_2e7);
    test("33554435", 3.355_443_6e7);
    test("-33554435", -3.355_443_6e7);
    test("340282346638528859811704183484516925439", 3.402_823_5e38);
    test("-340282346638528859811704183484516925439", -3.402_823_5e38);
    test("340282346638528859811704183484516925440", 3.402_823_5e38);
    test("-340282346638528859811704183484516925440", -3.402_823_5e38);
    test("340282346638528859811704183484516925441", 3.402_823_5e38);
    test("-340282346638528859811704183484516925441", -3.402_823_5e38);
    test(
        "10000000000000000000000000000000000000000000000000000",
        3.402_823_5e38,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        -3.402_823_5e38,
    );
}

#[test]
fn test_f64_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f64::from(Integer::from_str(n).unwrap()), out);
    };
    test("3", 3.0);
    test("-3", -3.0);
    test("123", 123.0);
    test("-123", -123.0);
    test("0", 0.0);
    test("1000000000", 1.0e9);
    test("-1000000000", -1.0e9);
    test("9007199254740992", 9.007_199_254_740_992e15);
    test("-9007199254740992", -9.007_199_254_740_992e15);
    test("9007199254740994", 9.007_199_254_740_994e15);
    test("-9007199254740994", -9.007_199_254_740_994e15);
    test("9007199254740993", 9.007_199_254_740_992e15);
    test("-9007199254740993", -9.007_199_254_740_992e15);
    test("18014398509481984", 1.801_439_850_948_198_4e16);
    test("-18014398509481984", -1.801_439_850_948_198_4e16);
    test("18014398509481988", 1.801_439_850_948_198_8e16);
    test("-18014398509481988", -1.801_439_850_948_198_8e16);
    test("18014398509481985", 1.801_439_850_948_198_4e16);
    test("-18014398509481985", -1.801_439_850_948_198_4e16);
    test("18014398509481986", 1.801_439_850_948_198_4e16);
    test("-18014398509481986", -1.801_439_850_948_198_4e16);
    test("18014398509481987", 1.801_439_850_948_198_8e16);
    test("-18014398509481987", -1.801_439_850_948_198_8e16);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", -1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368", 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368", -1.797_693_134_862_315_7e308);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", -1.797_693_134_862_315_7e308);
}

#[test]
fn test_f32_checked_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f32::checked_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", Some(3.0));
    test("-3", Some(-3.0));
    test("123", Some(123.0));
    test("-123", Some(-123.0));
    test("0", Some(0.0));
    test("1000000000", Some(1.0e9));
    test("-1000000000", Some(-1.0e9));
    test("16777216", Some(1.677_721_6e7));
    test("-16777216", Some(-1.677_721_6e7));
    test("16777218", Some(1.677_721_8e7));
    test("-16777218", Some(-1.677_721_8e7));
    test("16777217", None);
    test("-16777217", None);
    test("33554432", Some(3.355_443_2e7));
    test("-33554432", Some(-3.355_443_2e7));
    test("33554436", Some(3.355_443_6e7));
    test("-33554436", Some(-3.355_443_6e7));
    test("33554433", None);
    test("-33554433", None);
    test("33554434", None);
    test("-33554434", None);
    test("33554435", None);
    test("-33554435", None);
    test("340282346638528859811704183484516925439", None);
    test("-340282346638528859811704183484516925439", None);
    test(
        "340282346638528859811704183484516925440",
        Some(3.402_823_5e38),
    );
    test(
        "-340282346638528859811704183484516925440",
        Some(-3.402_823_5e38),
    );
    test("340282346638528859811704183484516925441", None);
    test("-340282346638528859811704183484516925441", None);
    test(
        "10000000000000000000000000000000000000000000000000000",
        None,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        None,
    );
}

#[test]
fn test_f64_checked_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f64::checked_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", Some(3.0));
    test("-3", Some(-3.0));
    test("123", Some(123.0));
    test("-123", Some(-123.0));
    test("0", Some(0.0));
    test("1000000000", Some(1.0e9));
    test("-1000000000", Some(-1.0e9));
    test("9007199254740992", Some(9.007_199_254_740_992e15));
    test("-9007199254740992", Some(-9.007_199_254_740_992e15));
    test("9007199254740994", Some(9.007_199_254_740_994e15));
    test("-9007199254740994", Some(-9.007_199_254_740_994e15));
    test("9007199254740993", None);
    test("-9007199254740993", None);
    test("18014398509481984", Some(1.801_439_850_948_198_4e16));
    test("-18014398509481984", Some(-1.801_439_850_948_198_4e16));
    test("18014398509481988", Some(1.801_439_850_948_198_8e16));
    test("-18014398509481988", Some(-1.801_439_850_948_198_8e16));
    test("18014398509481985", None);
    test("-18014398509481985", None);
    test("18014398509481986", None);
    test("-18014398509481986", None);
    test("18014398509481987", None);
    test("-18014398509481987", None);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", None);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", None);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368", Some(1.797_693_134_862_315_7e308));
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368", Some(-1.797_693_134_862_315_7e308));
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", None);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", None);
}

#[test]
fn test_f32_exact_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f32::exact_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", 3.0);
    test("-3", -3.0);
    test("123", 123.0);
    test("-123", -123.0);
    test("0", 0.0);
    test("1000000000", 1.0e9);
    test("-1000000000", -1.0e9);
    test("16777216", 1.677_721_6e7);
    test("-16777216", -1.677_721_6e7);
    test("16777218", 1.677_721_8e7);
    test("-16777218", -1.677_721_8e7);
    test("33554432", 3.355_443_2e7);
    test("-33554432", -3.355_443_2e7);
    test("33554436", 3.355_443_6e7);
    test("-33554436", -3.355_443_6e7);
    test("340282346638528859811704183484516925440", 3.402_823_5e38);
    test("-340282346638528859811704183484516925440", -3.402_823_5e38);
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_1() {
    f32::exact_from(Integer::from_str("16777217").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_2() {
    f32::exact_from(Integer::from_str("-16777217").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_3() {
    f32::exact_from(Integer::from_str("33554433").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_4() {
    f32::exact_from(Integer::from_str("-33554433").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_5() {
    f32::exact_from(Integer::from_str("33554434").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_6() {
    f32::exact_from(Integer::from_str("-33554434").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_7() {
    f32::exact_from(Integer::from_str("33554435").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_8() {
    f32::exact_from(Integer::from_str("-33554435").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_9() {
    f32::exact_from(Integer::from_str("340282346638528859811704183484516925439").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_10() {
    f32::exact_from(Integer::from_str("-340282346638528859811704183484516925439").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_11() {
    f32::exact_from(Integer::from_str("340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_12() {
    f32::exact_from(Integer::from_str("-340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_13() {
    f32::exact_from(Integer::from_str("340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_14() {
    f32::exact_from(Integer::from_str("-340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_15() {
    f32::exact_from(
        Integer::from_str("10000000000000000000000000000000000000000000000000000").unwrap(),
    );
}

#[test]
#[should_panic]
fn f32_exact_from_integer_fail_16() {
    f32::exact_from(
        Integer::from_str("-10000000000000000000000000000000000000000000000000000").unwrap(),
    );
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_1() {
    f32::exact_from(&Integer::from_str("16777217").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_2() {
    f32::exact_from(&Integer::from_str("-16777217").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_3() {
    f32::exact_from(&Integer::from_str("33554433").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_4() {
    f32::exact_from(&Integer::from_str("-33554433").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_5() {
    f32::exact_from(&Integer::from_str("33554434").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_6() {
    f32::exact_from(&Integer::from_str("-33554434").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_7() {
    f32::exact_from(&Integer::from_str("33554435").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_8() {
    f32::exact_from(&Integer::from_str("-33554435").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_9() {
    f32::exact_from(&Integer::from_str("340282346638528859811704183484516925439").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_10() {
    f32::exact_from(&Integer::from_str("-340282346638528859811704183484516925439").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_11() {
    f32::exact_from(&Integer::from_str("340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_12() {
    f32::exact_from(&Integer::from_str("-340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_13() {
    f32::exact_from(&Integer::from_str("340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_14() {
    f32::exact_from(&Integer::from_str("-340282346638528859811704183484516925441").unwrap());
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_15() {
    f32::exact_from(
        &Integer::from_str("10000000000000000000000000000000000000000000000000000").unwrap(),
    );
}

#[test]
#[should_panic]
fn f32_exact_from_integer_ref_fail_16() {
    f32::exact_from(
        &Integer::from_str("-10000000000000000000000000000000000000000000000000000").unwrap(),
    );
}

#[test]
fn test_f64_exact_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f64::exact_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", 3.0);
    test("-3", -3.0);
    test("123", 123.0);
    test("-123", -123.0);
    test("0", 0.0);
    test("1000000000", 1.0e9);
    test("-1000000000", -1.0e9);
    test("9007199254740992", 9.007_199_254_740_992e15);
    test("-9007199254740992", -9.007_199_254_740_992e15);
    test("9007199254740994", 9.007_199_254_740_994e15);
    test("-9007199254740994", -9.007_199_254_740_994e15);
    test("18014398509481984", 1.801_439_850_948_198_4e16);
    test("-18014398509481984", -1.801_439_850_948_198_4e16);
    test("18014398509481988", 1.801_439_850_948_198_8e16);
    test("-18014398509481988", -1.801_439_850_948_198_8e16);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368", 1.797_693_134_862_315_7e308);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368", -1.797_693_134_862_315_7e308);
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_1() {
    f64::exact_from(Integer::from_str("18014398509481983").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_2() {
    f64::exact_from(Integer::from_str("-18014398509481983").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_3() {
    f64::exact_from(Integer::from_str("18014398509481985").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_4() {
    f64::exact_from(Integer::from_str("-18014398509481985").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_5() {
    f64::exact_from(Integer::from_str("18014398509481986").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_6() {
    f64::exact_from(Integer::from_str("-18014398509481986").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_7() {
    f64::exact_from(Integer::from_str("18014398509481987").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_8() {
    f64::exact_from(Integer::from_str("-18014398509481987").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_9() {
    f64::exact_from(Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_10() {
    f64::exact_from(Integer::from_str(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_11() {
    f64::exact_from(Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_fail_12() {
    f64::exact_from(Integer::from_str(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_1() {
    f64::exact_from(&Integer::from_str("18014398509481983").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_2() {
    f64::exact_from(&Integer::from_str("-18014398509481983").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_3() {
    f64::exact_from(&Integer::from_str("18014398509481985").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_4() {
    f64::exact_from(&Integer::from_str("-18014398509481985").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_5() {
    f64::exact_from(Integer::from_str("18014398509481986").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_6() {
    f64::exact_from(&Integer::from_str("-18014398509481986").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_7() {
    f64::exact_from(&Integer::from_str("18014398509481987").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_8() {
    f64::exact_from(&Integer::from_str("-18014398509481987").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_9() {
    f64::exact_from(&Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_10() {
    f64::exact_from(&Integer::from_str(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_11() {
    f64::exact_from(&Integer::from_str(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369").unwrap());
}

#[test]
#[should_panic]
fn f64_exact_from_integer_ref_fail_12() {
    f64::exact_from(&Integer::from_str(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369").unwrap());
}

#[test]
fn test_f32_convertible_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f32::convertible_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", true);
    test("-3", true);
    test("123", true);
    test("-123", true);
    test("0", true);
    test("1000000000", true);
    test("-1000000000", true);
    test("16777216", true);
    test("-16777216", true);
    test("16777218", true);
    test("-16777218", true);
    test("16777217", false);
    test("-16777217", false);
    test("33554432", true);
    test("-33554432", true);
    test("33554436", true);
    test("-33554436", true);
    test("33554433", false);
    test("-33554433", false);
    test("33554434", false);
    test("-33554434", false);
    test("33554435", false);
    test("-33554435", false);
    test("340282346638528859811704183484516925439", false);
    test("-340282346638528859811704183484516925439", false);
    test("340282346638528859811704183484516925440", true);
    test("-340282346638528859811704183484516925440", true);
    test("340282346638528859811704183484516925441", false);
    test("-340282346638528859811704183484516925441", false);
    test(
        "10000000000000000000000000000000000000000000000000000",
        false,
    );
    test(
        "-10000000000000000000000000000000000000000000000000000",
        false,
    );
}

#[test]
fn test_f64_convertible_from_integer() {
    let test = |n: &str, out| {
        assert_eq!(f64::convertible_from(Integer::from_str(n).unwrap()), out);
    };
    test("3", true);
    test("-3", true);
    test("123", true);
    test("-123", true);
    test("0", true);
    test("1000000000", true);
    test("-1000000000", true);
    test("9007199254740992", true);
    test("-9007199254740992", true);
    test("9007199254740994", true);
    test("-9007199254740994", true);
    test("9007199254740993", false);
    test("-9007199254740993", false);
    test("18014398509481984", true);
    test("-18014398509481984", true);
    test("18014398509481988", true);
    test("-18014398509481988", true);
    test("18014398509481985", false);
    test("-18014398509481985", false);
    test("18014398509481986", false);
    test("-18014398509481986", false);
    test("18014398509481987", false);
    test("-18014398509481987", false);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858367", false);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858367", false);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368", true);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368", true);
    test(
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858369", false);
    test(
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858369", false);
}
