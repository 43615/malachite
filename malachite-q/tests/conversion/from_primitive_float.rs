use malachite_base::num::basic::floats::PrimitiveFloat;
use malachite_base::num::conversion::traits::ExactFrom;
use malachite_base::num::float::NiceFloat;
use malachite_base::test_util::generators::primitive_float_gen_var_8;
use malachite_q::test_util::common::rug_rational_to_rational;
use malachite_q::Rational;

#[test]
fn test_from_f32() {
    let test = |f: f32, out| {
        let x = Rational::from(f);
        assert_eq!(x.to_string(), out);
        assert!(x.is_valid());
    };
    test(0.0, "0");
    test(-0.0, "0");
    test(123.0, "123");
    test(-123.0, "-123");
    test(1.0e9, "1000000000");
    test(-1.0e9, "-1000000000");
    test(4294967295.0, "4294967296");
    test(-4294967295.0, "-4294967296");
    test(4294967296.0, "4294967296");
    test(-4294967296.0, "-4294967296");
    test(18446744073709551615.0, "18446744073709551616");
    test(-18446744073709551615.0, "-18446744073709551616");
    test(18446744073709551616.0, "18446744073709551616");
    test(-18446744073709551616.0, "-18446744073709551616");
    test(1.0e20, "100000002004087734272");
    test(-1.0e20, "-100000002004087734272");
    test(1.23e20, "122999999650278146048");
    test(-1.23e20, "-122999999650278146048");
    test(123.1, "16134963/131072");
    test(-123.1, "-16134963/131072");
    test(123.9, "16239821/131072");
    test(-123.9, "-16239821/131072");
    test(123.5, "247/2");
    test(-123.5, "-247/2");
    test(124.5, "249/2");
    test(-124.5, "-249/2");
    test(-0.499, "-8371831/16777216");
    test(-0.5, "-1/2");
    test(0.1, "13421773/134217728");
    test(
        f32::MIN_POSITIVE_SUBNORMAL,
        "1/713623846352979940529142984724747568191373312",
    );
    test(
        -f32::MIN_POSITIVE_SUBNORMAL,
        "-1/713623846352979940529142984724747568191373312",
    );
    test(
        f32::MAX_SUBNORMAL,
        "8388607/713623846352979940529142984724747568191373312",
    );
    test(
        -f32::MAX_SUBNORMAL,
        "-8388607/713623846352979940529142984724747568191373312",
    );
    test(
        f32::MIN_POSITIVE_NORMAL,
        "1/85070591730234615865843651857942052864",
    );
    test(
        -f32::MIN_POSITIVE_NORMAL,
        "-1/85070591730234615865843651857942052864",
    );
    test(f32::MAX_FINITE, "340282346638528859811704183484516925440");
    test(-f32::MAX_FINITE, "-340282346638528859811704183484516925440");

    test(std::f32::consts::SQRT_2, "11863283/8388608");
    test(std::f32::consts::PI, "13176795/4194304");
    test(std::f32::consts::E, "2850325/1048576");
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f32_fail_1() {
    Rational::from(f32::NAN);
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f32_fail_2() {
    Rational::from(f32::POSITIVE_INFINITY);
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f32_fail_3() {
    Rational::from(f32::NEGATIVE_INFINITY);
}

#[test]
fn test_from_f64() {
    let test = |f: f64, out| {
        let x = Rational::from(f);
        assert_eq!(x.to_string(), out);
        assert!(x.is_valid());
    };
    test(0.0, "0");
    test(-0.0, "0");
    test(123.0, "123");
    test(-123.0, "-123");
    test(1.0e9, "1000000000");
    test(-1.0e9, "-1000000000");
    test(4294967295.0, "4294967295");
    test(-4294967295.0, "-4294967295");
    test(4294967296.0, "4294967296");
    test(-4294967296.0, "-4294967296");
    test(18446744073709551615.0, "18446744073709551616");
    test(-18446744073709551615.0, "-18446744073709551616");
    test(18446744073709551616.0, "18446744073709551616");
    test(-18446744073709551616.0, "-18446744073709551616");
    test(1.0e20, "100000000000000000000");
    test(-1.0e20, "-100000000000000000000");
    test(1.23e20, "123000000000000000000");
    test(-1.23e20, "-123000000000000000000");
    test(
        1.0e100,
        "100000000000000001590289110975991804683608085639452813897813275577478387721703810608134699\
        85856815104",
    );
    test(
        -1.0e100,
        "-10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469\
        985856815104",
    );
    test(
        1.23e100,
        "123000000000000008366862950845375853795062237854139353014252897832358837028676639186389822\
        00322686976",
    );
    test(
        -1.23e100,
        "-12300000000000000836686295084537585379506223785413935301425289783235883702867663918638982\
        200322686976",
    );
    test(123.1, "4331196204135219/35184372088832");
    test(-123.1, "-4331196204135219/35184372088832");
    test(123.9, "4359343701806285/35184372088832");
    test(-123.9, "-4359343701806285/35184372088832");
    test(123.5, "247/2");
    test(-123.5, "-247/2");
    test(124.5, "249/2");
    test(-124.5, "-249/2");
    test(-0.499, "-4494592428115755/9007199254740992");
    test(-0.5, "-1/2");
    test(
        f64::MIN_POSITIVE_SUBNORMAL,
        "1/2024022533073106183524953467189173070495566497641421183569013580274303395679953468919603\
        8370143712449518707786431681191138980873738579347686701339994073850992151742427656636136446\
        6907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552\
        333414615230502532186327508646006263307707741093494784"
    );
    test(
        -f64::MIN_POSITIVE_SUBNORMAL,
        "-1/202402253307310618352495346718917307049556649764142118356901358027430339567995346891960\
        3837014371244951870778643168119113898087373857934768670133999407385099215174242765663613644\
        6690774209321634123976767847274506856200748342469269861810335564915955634081005651235876955\
        2333414615230502532186327508646006263307707741093494784"
    );
    test(
        f64::MAX_SUBNORMAL,
        "4503599627370495/2024022533073106183524953467189173070495566497641421183569013580274303395\
        6799534689196038370143712449518707786431681191138980873738579347686701339994073850992151742\
        4276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810\
        056512358769552333414615230502532186327508646006263307707741093494784"
    );
    test(
        -f64::MAX_SUBNORMAL,
        "-4503599627370495/202402253307310618352495346718917307049556649764142118356901358027430339\
        5679953468919603837014371244951870778643168119113898087373857934768670133999407385099215174\
        2427656636136446690774209321634123976767847274506856200748342469269861810335564915955634081\
        0056512358769552333414615230502532186327508646006263307707741093494784"
    );
    test(
        f64::MIN_POSITIVE_NORMAL,
        "1/4494232837155789769323262976972561834044942447355766431835752028943316895137524078317711\
        9330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075\
        5549003115235298632707380212514422095376705856157203684782776352068092908376276711465745599\
        86811484619929076208839082406056034304"
    );
    test(
        -f64::MIN_POSITIVE_NORMAL,
        "-1/449423283715578976932326297697256183404494244735576643183575202894331689513752407831771\
        1933060188400528002846996784833941469744220360415562321185765986853109444197335621637131907\
        5554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559\
        986811484619929076208839082406056034304"
    );
    test(
        f64::MAX_FINITE,
        "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558\
        6327668781715404589535143824642343213268894641827684675467035375169860499105765512820762454\
        9009038932894407586850845513394230458323690322294816580855933212334827479782620414472316873\
        8177180919299881250404026184124858368"
    );
    test(
        -f64::MAX_FINITE,
        "-17976931348623157081452742373170435679807056752584499659891747680315726078002853876058955\
        8632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245\
        4900903893289440758685084551339423045832369032229481658085593321233482747978262041447231687\
        38177180919299881250404026184124858368"
    );

    test(
        std::f64::consts::SQRT_2,
        "6369051672525773/4503599627370496",
    );
    test(std::f64::consts::PI, "884279719003555/281474976710656");
    test(std::f64::consts::E, "6121026514868073/2251799813685248");
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f64_fail_1() {
    Rational::from(f64::NAN);
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f64_fail_2() {
    Rational::from(f64::POSITIVE_INFINITY);
}

#[test]
#[should_panic]
#[allow(unused_must_use)]
fn from_f64_fail_3() {
    Rational::from(f64::NEGATIVE_INFINITY);
}

fn from_float_properties_helper<T: ExactFrom<Rational> + PrimitiveFloat>()
where
    Rational: From<T>,
{
    primitive_float_gen_var_8::<T>().test_properties(|f| {
        let n = Rational::from(f);
        assert!(n.is_valid());
        assert_eq!(Rational::from(-f), -&n);
        assert_eq!(
            NiceFloat(T::exact_from(n)),
            NiceFloat(f.abs_negative_zero())
        );
    });
}

#[test]
fn from_float_properties() {
    apply_fn_to_primitive_floats!(from_float_properties_helper);

    primitive_float_gen_var_8::<f32>().test_properties(|f| {
        assert_eq!(
            Rational::from(f),
            rug_rational_to_rational(&rug::Rational::from_f32(f).unwrap())
        );
    });

    primitive_float_gen_var_8::<f64>().test_properties(|f| {
        assert_eq!(
            Rational::from(f),
            rug_rational_to_rational(&rug::Rational::from_f64(f).unwrap())
        );
    });
}
