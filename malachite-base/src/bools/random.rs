use rand::Rng;
use rand_chacha::ChaCha20Rng;

use num::arithmetic::traits::Parity;
use random::Seed;

/// Uniformly generates random `bool`s, as if by flips of a fair coin.
///
/// This `struct` is created by the `random_bools` method. See its documentation for more.
#[derive(Clone, Debug)]
pub struct RandomBools {
    rng: ChaCha20Rng,
    x: u32,
    bits_left: u8,
}

impl Iterator for RandomBools {
    type Item = bool;

    #[inline]
    fn next(&mut self) -> Option<bool> {
        if self.bits_left == 0 {
            self.x = self.rng.gen();
            self.bits_left = 31;
        } else {
            self.x >>= 1;
            self.bits_left -= 1;
        }
        Some(self.x.odd())
    }
}

/// Uniformly generates random `bool`s, as if by flips of a fair coin.
///
/// $P(\text{false}) = P(\text{true}) = \frac{1}{2}$.
///
/// The output length is infinite.
///
/// # Complexity per iteration
///
/// Constant time and additional memory.
///
/// # Examples
/// ```
/// use malachite_base::bools::random::random_bools;
/// use malachite_base::random::EXAMPLE_SEED;
///
/// assert_eq!(
///     random_bools(EXAMPLE_SEED).take(10).collect::<Vec<_>>(),
///     &[true, false, false, false, true, true, true, false, true, true]
/// )
/// ```
///
/// # Implementation notes
/// The resulting iterator uses every random bit generated by the PRNG, unlike some implementations
/// which only use one bit out of 32 or 64.
pub fn random_bools(seed: Seed) -> RandomBools {
    RandomBools {
        rng: seed.get_rng(),
        x: 0,
        bits_left: 0,
    }
}
