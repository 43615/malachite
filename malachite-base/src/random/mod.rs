use std::marker::PhantomData;

use rand_chacha::ChaCha20Rng;

use random::seed::Seed;

/// A trait that lets us avoid having to write `where Standard: Distribution<T>` everywhere
pub trait StandardRand {
    fn standard_gen(rng: &mut ChaCha20Rng) -> Self;
}

/// This seed was generated by random.org.
pub const EXAMPLE_SEED: Seed = Seed::from_bytes([
    0xbf, 0x18, 0x11, 0xce, 0x15, 0xee, 0xfd, 0x20, 0x2f, 0xdf, 0x67, 0x6a, 0x6b, 0xba, 0xaf, 0x04,
    0xff, 0x71, 0xe0, 0xf8, 0x0b, 0x2a, 0xcf, 0x27, 0x85, 0xb3, 0x32, 0xc6, 0x20, 0x80, 0x5e, 0x36,
]);

/// An `Iterator` that generates values from a type's `Standard` distribution.
#[derive(Clone, Debug)]
pub struct StandardRandomValues<T: StandardRand> {
    phantom: PhantomData<T>,
    rng: ChaCha20Rng,
}

impl<T: StandardRand> Iterator for StandardRandomValues<T> {
    type Item = T;

    #[inline]
    fn next(&mut self) -> Option<T> {
        Some(T::standard_gen(&mut self.rng))
    }
}

/// Generates random values from a distribution defined by `T`'s `StandardRand` trait.
///
/// Length is infinite.
///
/// Time per iteration: worst case time for `<T as StandardRand>::gen::<T>(ChaCha20Rng)`
///
/// Additional memory per iteration: worst case additional memory for
/// `<T as StandardRand>::gen::<T>(ChaCha20Rng)`
///
/// # Examples
/// ```
/// use malachite_base::random::{standard_random_values, EXAMPLE_SEED};
///
/// assert_eq!(
///     standard_random_values::<u8>(EXAMPLE_SEED).take(10).collect::<Vec<u8>>(),
///     &[113, 228, 87, 188, 93, 189, 117, 151, 7, 72]
/// )
/// ```
#[inline]
pub fn standard_random_values<T: StandardRand>(seed: Seed) -> StandardRandomValues<T> {
    StandardRandomValues {
        phantom: PhantomData,
        rng: seed.get_rng(),
    }
}

pub mod seed;
