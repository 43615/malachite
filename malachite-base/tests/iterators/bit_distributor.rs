use malachite_base::iterators::bit_distributor::{BitDistributor, BitDistributorOutputType};

fn bit_map_helper(
    output_types: &[BitDistributorOutputType],
    bit_map: &[usize],
    expected_outputs: &[&[usize]],
) {
    let mut distributor = BitDistributor::new(output_types);
    assert_eq!(distributor.bit_map_as_slice(), bit_map);
    let mut outputs = Vec::new();
    for _ in 0..20 {
        outputs.push(
            (0..output_types.len())
                .map(|i| distributor.get_output(i))
                .collect::<Vec<usize>>(),
        );
        distributor.increment_counter();
    }
    assert_eq!(outputs, expected_outputs);
}

#[test]
fn test_bit_map() {
    bit_map_helper(
        &[BitDistributorOutputType::normal(1)],
        &[0; 64],
        &[
            &[0],
            &[1],
            &[2],
            &[3],
            &[4],
            &[5],
            &[6],
            &[7],
            &[8],
            &[9],
            &[10],
            &[11],
            &[12],
            &[13],
            &[14],
            &[15],
            &[16],
            &[17],
            &[18],
            &[19],
        ],
    );
    bit_map_helper(
        &[BitDistributorOutputType::normal(1); 2],
        &[
            1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
            1, 0, 1, 0, 1, 0,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[1, 0],
            &[1, 1],
            &[0, 2],
            &[0, 3],
            &[1, 2],
            &[1, 3],
            &[2, 0],
            &[2, 1],
            &[3, 0],
            &[3, 1],
            &[2, 2],
            &[2, 3],
            &[3, 2],
            &[3, 3],
            &[0, 4],
            &[0, 5],
            &[1, 4],
            &[1, 5],
        ],
    );
    bit_map_helper(
        &[BitDistributorOutputType::normal(1); 3],
        &[
            2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1,
            0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2,
            1, 0, 2, 1, 0, 2,
        ],
        &[
            &[0, 0, 0],
            &[0, 0, 1],
            &[0, 1, 0],
            &[0, 1, 1],
            &[1, 0, 0],
            &[1, 0, 1],
            &[1, 1, 0],
            &[1, 1, 1],
            &[0, 0, 2],
            &[0, 0, 3],
            &[0, 1, 2],
            &[0, 1, 3],
            &[1, 0, 2],
            &[1, 0, 3],
            &[1, 1, 2],
            &[1, 1, 3],
            &[0, 2, 0],
            &[0, 2, 1],
            &[0, 3, 0],
            &[0, 3, 1],
        ],
    );
    bit_map_helper(
        &[BitDistributorOutputType::normal(1); 5],
        &[
            4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1,
            0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2, 1, 0, 4, 3, 2,
            1, 0, 4, 3, 2, 1,
        ],
        &[
            &[0, 0, 0, 0, 0],
            &[0, 0, 0, 0, 1],
            &[0, 0, 0, 1, 0],
            &[0, 0, 0, 1, 1],
            &[0, 0, 1, 0, 0],
            &[0, 0, 1, 0, 1],
            &[0, 0, 1, 1, 0],
            &[0, 0, 1, 1, 1],
            &[0, 1, 0, 0, 0],
            &[0, 1, 0, 0, 1],
            &[0, 1, 0, 1, 0],
            &[0, 1, 0, 1, 1],
            &[0, 1, 1, 0, 0],
            &[0, 1, 1, 0, 1],
            &[0, 1, 1, 1, 0],
            &[0, 1, 1, 1, 1],
            &[1, 0, 0, 0, 0],
            &[1, 0, 0, 0, 1],
            &[1, 0, 0, 1, 0],
            &[1, 0, 0, 1, 1],
        ],
    );
    bit_map_helper(
        &[BitDistributorOutputType::normal(2); 2],
        &[
            1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1,
            1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
            0, 0, 1, 1, 0, 0,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[0, 2],
            &[0, 3],
            &[1, 0],
            &[1, 1],
            &[1, 2],
            &[1, 3],
            &[2, 0],
            &[2, 1],
            &[2, 2],
            &[2, 3],
            &[3, 0],
            &[3, 1],
            &[3, 2],
            &[3, 3],
            &[0, 4],
            &[0, 5],
            &[0, 6],
            &[0, 7],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::normal(2),
        ],
        &[
            1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
            0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,
            1, 0, 1, 1, 0, 1,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[0, 2],
            &[0, 3],
            &[1, 0],
            &[1, 1],
            &[1, 2],
            &[1, 3],
            &[0, 4],
            &[0, 5],
            &[0, 6],
            &[0, 7],
            &[1, 4],
            &[1, 5],
            &[1, 6],
            &[1, 7],
            &[0, 8],
            &[0, 9],
            &[0, 10],
            &[0, 11],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(2),
            BitDistributorOutputType::normal(1),
        ],
        &[
            1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
            0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
            0, 0, 1, 0, 0, 1,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[1, 0],
            &[1, 1],
            &[2, 0],
            &[2, 1],
            &[3, 0],
            &[3, 1],
            &[0, 2],
            &[0, 3],
            &[1, 2],
            &[1, 3],
            &[2, 2],
            &[2, 3],
            &[3, 2],
            &[3, 3],
            &[4, 0],
            &[4, 1],
            &[5, 0],
            &[5, 1],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(2),
            BitDistributorOutputType::normal(3),
        ],
        &[
            1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0,
            0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1,
            0, 0, 1, 1, 1, 0,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[0, 2],
            &[0, 3],
            &[0, 4],
            &[0, 5],
            &[0, 6],
            &[0, 7],
            &[1, 0],
            &[1, 1],
            &[1, 2],
            &[1, 3],
            &[1, 4],
            &[1, 5],
            &[1, 6],
            &[1, 7],
            &[2, 0],
            &[2, 1],
            &[2, 2],
            &[2, 3],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::tiny(),
        ],
        &[
            1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[0, 2],
            &[0, 3],
            &[1, 0],
            &[1, 1],
            &[1, 2],
            &[1, 3],
            &[0, 4],
            &[0, 5],
            &[0, 6],
            &[0, 7],
            &[1, 4],
            &[1, 5],
            &[1, 6],
            &[1, 7],
            &[2, 0],
            &[2, 1],
            &[2, 2],
            &[2, 3],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::tiny(),
            BitDistributorOutputType::normal(1),
        ],
        &[
            0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 0,
        ],
        &[
            &[0, 0],
            &[1, 0],
            &[2, 0],
            &[3, 0],
            &[0, 1],
            &[1, 1],
            &[2, 1],
            &[3, 1],
            &[4, 0],
            &[5, 0],
            &[6, 0],
            &[7, 0],
            &[4, 1],
            &[5, 1],
            &[6, 1],
            &[7, 1],
            &[0, 2],
            &[1, 2],
            &[2, 2],
            &[3, 2],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::tiny(),
            BitDistributorOutputType::tiny(),
        ],
        &[
            2, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2,
        ],
        &[
            &[0, 0, 0],
            &[0, 0, 1],
            &[0, 1, 0],
            &[0, 1, 1],
            &[1, 0, 0],
            &[1, 0, 1],
            &[1, 1, 0],
            &[1, 1, 1],
            &[0, 0, 2],
            &[0, 0, 3],
            &[0, 1, 2],
            &[0, 1, 3],
            &[1, 0, 2],
            &[1, 0, 3],
            &[1, 1, 2],
            &[1, 1, 3],
            &[2, 0, 0],
            &[2, 0, 1],
            &[2, 1, 0],
            &[2, 1, 1],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::tiny(),
            BitDistributorOutputType::tiny(),
        ],
        &[
            3, 2, 1, 3, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 1, 3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
            1, 0, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
            1, 0, 1, 0, 1, 3,
        ],
        &[
            &[0, 0, 0, 0],
            &[0, 0, 0, 1],
            &[0, 0, 1, 0],
            &[0, 0, 1, 1],
            &[0, 1, 0, 0],
            &[0, 1, 0, 1],
            &[0, 1, 1, 0],
            &[0, 1, 1, 1],
            &[0, 0, 0, 2],
            &[0, 0, 0, 3],
            &[0, 0, 1, 2],
            &[0, 0, 1, 3],
            &[0, 1, 0, 2],
            &[0, 1, 0, 3],
            &[0, 1, 1, 2],
            &[0, 1, 1, 3],
            &[1, 0, 0, 0],
            &[1, 0, 0, 1],
            &[1, 0, 1, 0],
            &[1, 0, 1, 1],
        ],
    );
    bit_map_helper(
        &[BitDistributorOutputType::normal_with_max_bits(1, 5)],
        &[
            0,
            0,
            0,
            0,
            0,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
        ],
        &[
            &[0],
            &[1],
            &[2],
            &[3],
            &[4],
            &[5],
            &[6],
            &[7],
            &[8],
            &[9],
            &[10],
            &[11],
            &[12],
            &[13],
            &[14],
            &[15],
            &[16],
            &[17],
            &[18],
            &[19],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal(1),
            BitDistributorOutputType::normal_with_max_bits(1, 2),
        ],
        &[
            1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[1, 0],
            &[1, 1],
            &[0, 2],
            &[0, 3],
            &[1, 2],
            &[1, 3],
            &[2, 0],
            &[2, 1],
            &[3, 0],
            &[3, 1],
            &[2, 2],
            &[2, 3],
            &[3, 2],
            &[3, 3],
            &[4, 0],
            &[4, 1],
            &[5, 0],
            &[5, 1],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal_with_max_bits(1, 2),
            BitDistributorOutputType::normal(1),
        ],
        &[
            1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[1, 0],
            &[1, 1],
            &[0, 2],
            &[0, 3],
            &[1, 2],
            &[1, 3],
            &[2, 0],
            &[2, 1],
            &[3, 0],
            &[3, 1],
            &[2, 2],
            &[2, 3],
            &[3, 2],
            &[3, 3],
            &[0, 4],
            &[0, 5],
            &[1, 4],
            &[1, 5],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal_with_max_bits(1, 2),
            BitDistributorOutputType::tiny(),
        ],
        &[
            1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1,
        ],
        &[
            &[0, 0],
            &[0, 1],
            &[0, 2],
            &[0, 3],
            &[1, 0],
            &[1, 1],
            &[1, 2],
            &[1, 3],
            &[0, 4],
            &[0, 5],
            &[0, 6],
            &[0, 7],
            &[1, 4],
            &[1, 5],
            &[1, 6],
            &[1, 7],
            &[2, 0],
            &[2, 1],
            &[2, 2],
            &[2, 3],
        ],
    );
    bit_map_helper(
        &[
            BitDistributorOutputType::normal_with_max_bits(1, 2),
            BitDistributorOutputType::normal_with_max_bits(1, 1),
            BitDistributorOutputType::normal_with_max_bits(1, 5),
            BitDistributorOutputType::normal_with_max_bits(1, 3),
            BitDistributorOutputType::normal_with_max_bits(1, 4),
        ],
        &[
            4,
            3,
            2,
            1,
            0,
            4,
            3,
            2,
            0,
            4,
            3,
            2,
            4,
            2,
            2,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
            usize::MAX,
        ],
        &[
            &[0, 0, 0, 0, 0],
            &[0, 0, 0, 0, 1],
            &[0, 0, 0, 1, 0],
            &[0, 0, 0, 1, 1],
            &[0, 0, 1, 0, 0],
            &[0, 0, 1, 0, 1],
            &[0, 0, 1, 1, 0],
            &[0, 0, 1, 1, 1],
            &[0, 1, 0, 0, 0],
            &[0, 1, 0, 0, 1],
            &[0, 1, 0, 1, 0],
            &[0, 1, 0, 1, 1],
            &[0, 1, 1, 0, 0],
            &[0, 1, 1, 0, 1],
            &[0, 1, 1, 1, 0],
            &[0, 1, 1, 1, 1],
            &[1, 0, 0, 0, 0],
            &[1, 0, 0, 0, 1],
            &[1, 0, 0, 1, 0],
            &[1, 0, 0, 1, 1],
        ],
    );
}
