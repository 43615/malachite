use malachite_base::random::seed::Seed;
use malachite_base::random::{standard_random_values, EXAMPLE_SEED};

#[test]
fn test_standard_random_values() {
    let xs = standard_random_values::<Seed>(EXAMPLE_SEED);
    assert_eq!(
        xs.take(5).collect::<Vec<Seed>>(),
        [
            Seed::from_bytes([
                0x71, 0xef, 0x45, 0x6c, 0xe4, 0xd2, 0xa8, 0xa1, 0x57, 0x20, 0x6e, 0x53, 0xbc, 0x22,
                0x59, 0xee, 0x5d, 0xc8, 0x95, 0x73, 0xbd, 0x95, 0xd9, 0xc9, 0x75, 0x92, 0x1f, 0x48,
                0x97, 0xa9, 0xae, 0x21
            ]),
            Seed::from_bytes([
                0x7, 0x26, 0x51, 0x90, 0x48, 0x7f, 0x71, 0x80, 0xe9, 0x6b, 0x2e, 0x77, 0xc, 0x12,
                0xa4, 0xf3, 0x72, 0xae, 0x3b, 0xf7, 0x27, 0xae, 0xa0, 0xb8, 0x68, 0x25, 0x64, 0xfc,
                0xe4, 0x7a, 0x6b, 0x45
            ]),
            Seed::from_bytes([
                0xf2, 0xf8, 0xb3, 0x8e, 0xef, 0xe9, 0x3d, 0xbd, 0xeb, 0x55, 0xc0, 0x7, 0xc8, 0x5a,
                0xb9, 0xb2, 0x54, 0x0, 0xf7, 0xac, 0xd5, 0xef, 0x5f, 0xbc, 0x9b, 0x18, 0xaa, 0xae,
                0x75, 0xc3, 0x0, 0x15
            ]),
            Seed::from_bytes([
                0xae, 0xbb, 0x24, 0xb8, 0x66, 0x65, 0x7c, 0x22, 0x5d, 0xd, 0x56, 0x38, 0xd0, 0x23,
                0x6a, 0xb5, 0x16, 0xcc, 0x38, 0x9b, 0xf0, 0x64, 0x4c, 0x3c, 0xd6, 0xa4, 0xc4, 0xd8,
                0x6b, 0x43, 0x24, 0x2d
            ]),
            Seed::from_bytes([
                0xeb, 0x82, 0xf8, 0xd, 0x8, 0xdd, 0x0, 0x92, 0x81, 0x5a, 0xaa, 0xf8, 0xec, 0xa,
                0xce, 0xab, 0x73, 0xfc, 0x89, 0x28, 0x68, 0x0, 0x5b, 0x5c, 0x87, 0x48, 0x94, 0x57,
                0x77, 0x57, 0xcc, 0x91
            ])
        ]
    );
}
