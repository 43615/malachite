use malachite_base::num::basic::integers::PrimitiveInteger;

#[test]
fn test_divisible_by() {
    fn test<T: PrimitiveInteger>(x: T, y: T, out: bool) {
        assert_eq!(x.divisible_by(y), out);
    };
    test::<u8>(0, 0, true);
    test::<u16>(1, 0, false);
    test::<u64>(1_000_000_000_000, 0, false);
    test::<u32>(0, 1, true);
    test::<u128>(0, 123, true);
    test::<usize>(1, 1, true);
    test::<u8>(123, 1, true);
    test::<u16>(123, 123, true);
    test::<u32>(123, 456, false);
    test::<u64>(456, 123, false);
    test::<u128>(369, 123, true);
    test::<usize>(0xffff_ffff, 1, true);
    test::<u32>(u32::MAX, u32::MAX, true);
    test::<u64>(1_000_000_000_000, 1, true);
    test::<u64>(1_000_000_000_000, 3, false);
    test::<u64>(1_000_000_000_002, 3, true);
    test::<u64>(1_000_000_000_000, 123, false);
    test::<u64>(1_000_000_000_000, 0xffff_ffff, false);
    test::<u128>(1_000_000_000_000_000_000_000_000, 1, true);
    test::<u128>(1_000_000_000_000_000_000_000_000, 3, false);
    test::<u128>(1_000_000_000_000_000_000_000_002, 3, true);
    test::<u128>(1_000_000_000_000_000_000_000_000, 123, false);
    test::<u128>(1_000_000_000_000_000_000_000_000, 0xffff_ffff, false);
    test::<u128>(1_000_000_000_000_000_000_000_000, 1_000_000_000_000, true);
    test::<u128>(1_000_000_000_000_000_000_000_000, 1_000_000_000_001, false);

    test::<i64>(1_000_000_000_000, 0, false);
    test::<i32>(0, -1, true);
    test::<i128>(0, -123, true);
    test::<isize>(1, -1, true);
    test::<i8>(123, -1, true);
    test::<i16>(123, -123, true);
    test::<i32>(123, -456, false);
    test::<i64>(456, -123, false);
    test::<i128>(369, -123, true);
    test::<i64>(0xffff_ffff, -1, true);
    test::<i64>(0xffff_ffff, -0xffff_ffff, true);
    test::<i64>(1_000_000_000_000, -1, true);
    test::<i64>(1_000_000_000_000, -3, false);
    test::<i64>(1_000_000_000_002, -3, true);
    test::<i64>(1_000_000_000_000, -123, false);
    test::<i64>(1_000_000_000_000, -0xffff_ffff, false);
    test::<i128>(1_000_000_000_000_000_000_000_000, -1, true);
    test::<i128>(1_000_000_000_000_000_000_000_000, -3, false);
    test::<i128>(1_000_000_000_000_000_000_000_002, -3, true);
    test::<i128>(1_000_000_000_000_000_000_000_000, -123, false);
    test::<i128>(1_000_000_000_000_000_000_000_000, -0xffff_ffff, false);
    test::<i128>(1_000_000_000_000_000_000_000_000, -1_000_000_000_000, true);
    test::<i128>(1_000_000_000_000_000_000_000_000, -1_000_000_000_001, false);

    test::<i16>(-1, 0, false);
    test::<i64>(-1_000_000_000_000, 0, false);
    test::<isize>(-1, 1, true);
    test::<i8>(-123, 1, true);
    test::<i16>(-123, 123, true);
    test::<i32>(-123, 456, false);
    test::<i64>(-456, 123, false);
    test::<i128>(-369, 123, true);
    test::<i64>(-0xffff_ffff, 1, true);
    test::<i64>(-0xffff_ffff, 0xffff_ffff, true);
    test::<i64>(-1_000_000_000_000, 1, true);
    test::<i64>(-1_000_000_000_000, 3, false);
    test::<i64>(-1_000_000_000_002, 3, true);
    test::<i64>(-1_000_000_000_000, 123, false);
    test::<i64>(-1_000_000_000_000, 0xffff_ffff, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 1, true);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 3, false);
    test::<i128>(-1_000_000_000_000_000_000_000_002, 3, true);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 123, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 0xffff_ffff, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 1_000_000_000_000, true);
    test::<i128>(-1_000_000_000_000_000_000_000_000, 1_000_000_000_001, false);

    test::<isize>(-1, -1, true);
    test::<i8>(-123, -1, true);
    test::<i16>(-123, -123, true);
    test::<i32>(-123, -456, false);
    test::<i64>(-456, -123, false);
    test::<i128>(-369, -123, true);
    test::<i64>(-0xffff_ffff, -1, true);
    test::<i64>(-0xffff_ffff, -0xffff_ffff, true);
    test::<i64>(-1_000_000_000_000, -1, true);
    test::<i64>(-1_000_000_000_000, -3, false);
    test::<i64>(-1_000_000_000_002, -3, true);
    test::<i64>(-1_000_000_000_000, -123, false);
    test::<i64>(-1_000_000_000_000, -0xffff_ffff, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, -1, true);
    test::<i128>(-1_000_000_000_000_000_000_000_000, -3, false);
    test::<i128>(-1_000_000_000_000_000_000_000_002, -3, true);
    test::<i128>(-1_000_000_000_000_000_000_000_000, -123, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, -0xffff_ffff, false);
    test::<i128>(-1_000_000_000_000_000_000_000_000, -1_000_000_000_000, true);
    test::<i128>(
        -1_000_000_000_000_000_000_000_000,
        -1_000_000_000_001,
        false,
    );
}
