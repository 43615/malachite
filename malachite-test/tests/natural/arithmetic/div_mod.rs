use common::{test_properties, test_properties_custom_scale};
use malachite_base::num::arithmetic::traits::{
    CeilingDivAssignNegMod, CeilingDivNegMod, DivAssignMod, DivAssignRem, DivMod, DivRem,
};
use malachite_base::num::basic::integers::PrimitiveInteger;
use malachite_base::num::basic::traits::{One, Zero};
use malachite_base::num::conversion::traits::JoinHalves;
#[cfg(not(feature = "32_bit_limbs"))]
use malachite_nz::natural::arithmetic::div_mod::mpn_tdiv_qr;
use malachite_nz::natural::arithmetic::div_mod::{
    _limbs_div_mod_divide_and_conquer_helper, _limbs_div_mod_schoolbook, limbs_div_mod_by_two_limb,
    limbs_div_mod_three_limb_by_two_limb, limbs_two_limb_inverse_helper,
};
use malachite_nz::natural::Natural;
use malachite_nz::platform::{DoubleLimb, Limb};
use malachite_test::common::{
    biguint_to_natural, natural_to_biguint, natural_to_rug_integer, rug_integer_to_natural,
};
use malachite_test::inputs::base::{
    pairs_of_unsigneds_var_2, quadruples_of_three_unsigned_vecs_and_unsigned_var_1,
    quintuples_of_three_unsigned_vecs_unsigned_and_unsigned_vec_var_1, sextuples_of_limbs_var_1,
    triples_of_unsigned_vec_var_37,
};
use malachite_test::inputs::natural::{
    naturals, pairs_of_natural_and_positive_natural, pairs_of_natural_and_positive_natural_var_1,
    positive_naturals,
};
use malachite_test::natural::arithmetic::div_mod::rug_ceiling_div_neg_mod;
use num::{BigUint, Integer};
use rug;
use std::str::FromStr;

fn verify_limbs_two_limb_inverse_helper(hi: Limb, lo: Limb, result: Limb) {
    let b = Natural::ONE << Limb::WIDTH;
    let b_cubed_minus_1 = (Natural::ONE << (Limb::WIDTH * 3)) - 1 as Limb;
    let x = Natural::from(DoubleLimb::join_halves(hi, lo));
    //TODO use /
    let expected_result = (&b_cubed_minus_1).div_mod(&x).0 - &b;
    assert_eq!(result, expected_result);
    assert!(b_cubed_minus_1 - (result + b) * &x < x);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_two_limb_inverse_helper() {
    let test = |hi, lo, result| {
        assert_eq!(limbs_two_limb_inverse_helper(hi, lo), result);
        verify_limbs_two_limb_inverse_helper(hi, lo, result);
    };
    // hi_product >= lo
    // hi_product >= lo_product_hi
    test(0x8000_0000, 0, 0xffff_ffff);
    test(0x8000_0000, 123, 0xffff_ffff);
    test(0x8000_0123, 1, 0xffff_fb74);
    test(0xffff_ffff, 0, 1);
    // hi_product < lo
    test(0xffff_ffff, 123, 0);
    test(0xffff_f123, 1, 0xedd);
    test(0xffff_ffff, 0xffff_ffff, 0);
    // hi_product < lo_product_hi
    // !(hi_product > hi || hi_product == hi && lo_product_lo >= lo)
    test(0x8000_0001, 3, 0xffff_fffb);
    // hi_product > hi || hi_product == hi && lo_product_lo >= lo
    test(2325651385, 3907343530, 3636893938);
}

#[test]
#[should_panic]
fn limbs_two_limb_inverse_helper_fail() {
    limbs_two_limb_inverse_helper(0, 10);
}

fn verify_limbs_div_mod_three_limb_by_two_limb(
    n_2: Limb,
    n_1: Limb,
    n_0: Limb,
    d_1: Limb,
    d_0: Limb,
    q: Limb,
    r: DoubleLimb,
) {
    let n = Natural::from_owned_limbs_asc(vec![n_0, n_1, n_2]);
    let d = Natural::from(DoubleLimb::join_halves(d_1, d_0));
    let r = Natural::from(r);
    assert_eq!((&n).div_mod(&d), (Natural::from(q), r.clone()));
    assert!(r < d);
    assert_eq!(q * d + r, n);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_div_mod_three_limb_by_two_limb() {
    let test = |n_2, n_1, n_0, d_1, d_0, q, r| {
        assert_eq!(
            limbs_div_mod_three_limb_by_two_limb(
                n_2,
                n_1,
                n_0,
                d_1,
                d_0,
                limbs_two_limb_inverse_helper(d_1, d_0)
            ),
            (q, r)
        );
        verify_limbs_div_mod_three_limb_by_two_limb(n_2, n_1, n_0, d_1, d_0, q, r);
    };
    // r < d
    // r.upper_half() >= q_0
    test(1, 2, 3, 0x8000_0004, 5, 1, 0x7fff_fffd_ffff_fffe);
    test(2, 0x4000_0000, 4, 0x8000_0000, 0, 4, 0x4000_0000_0000_0004);
    // r >= d
    // r.upper_half() < q_0
    test(
        1614123406,
        3687984980,
        2695202596,
        2258238141,
        1642523191,
        3069918587,
        274277675918877623,
    );
}

fn verify_limbs_div_mod_by_two_limb(
    quotient_limbs_in: &[Limb],
    numerator_limbs_in: &[Limb],
    denominator_limbs: &[Limb],
    quotient_hi: bool,
    quotient_limbs_out: &[Limb],
    numerator_limbs_out: &[Limb],
) {
    let numerator = Natural::from_limbs_asc(numerator_limbs_in);
    let denominator = Natural::from_limbs_asc(denominator_limbs);
    let (expected_quotient, expected_remainder) = (&numerator).div_mod(&denominator);
    let base_quotient_length = numerator_limbs_in.len() - 2;
    let mut quotient_limbs = quotient_limbs_out[..base_quotient_length].to_vec();
    if quotient_hi {
        quotient_limbs.push(1);
    }
    let quotient = Natural::from_owned_limbs_asc(quotient_limbs);
    let remainder = Natural::from_limbs_asc(&numerator_limbs_out[..2]);
    assert_eq!(quotient, expected_quotient);
    assert_eq!(remainder, expected_remainder);
    assert_eq!(
        &quotient_limbs_in[base_quotient_length..],
        &quotient_limbs_out[base_quotient_length..]
    );
    assert_eq!(&numerator_limbs_in[2..], &numerator_limbs_out[2..]);

    assert!(remainder < denominator);
    assert_eq!(quotient * denominator + remainder, numerator);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_div_mod_by_two_limb() {
    let test = |quotient_limbs_in: &[Limb],
                numerator_limbs_in: &[Limb],
                denominator_limbs,
                quotient_hi,
                quotient_limbs_out: &[Limb],
                numerator_limbs_out: &[Limb]| {
        let mut quotient_limbs = quotient_limbs_in.to_vec();
        let mut numerator_limbs = numerator_limbs_in.to_vec();
        assert_eq!(
            limbs_div_mod_by_two_limb(&mut quotient_limbs, &mut numerator_limbs, denominator_limbs),
            quotient_hi
        );
        assert_eq!(quotient_limbs, quotient_limbs_out);
        assert_eq!(numerator_limbs, numerator_limbs_out);
        verify_limbs_div_mod_by_two_limb(
            quotient_limbs_in,
            numerator_limbs_in,
            denominator_limbs,
            quotient_hi,
            &quotient_limbs,
            &numerator_limbs,
        );
    };
    // !most_significant_quotient_limb
    test(&[10], &[1, 2], &[3, 0x8000_0000], false, &[10], &[1, 2]);
    test(
        &[10, 10, 10, 10],
        &[1, 2, 3, 4, 5],
        &[3, 0x8000_0000],
        false,
        &[4294967241, 7, 10, 10],
        &[166, 2147483626, 3, 4, 5],
    );
    // most_significant_quotient_limb
    test(
        &[0, 0],
        &[4142767597, 2922703399, 3921445909],
        &[2952867570, 2530544119],
        true,
        &[2360708771, 0],
        &[3037232599, 1218898013, 3921445909],
    );
}

#[test]
#[should_panic]
fn limbs_div_mod_by_two_limb_fail_1() {
    limbs_div_mod_by_two_limb(&mut [10], &mut [1, 2], &[3, 4]);
}

#[test]
#[should_panic]
fn limbs_div_mod_by_two_limb_fail_2() {
    limbs_div_mod_by_two_limb(&mut [10], &mut [1, 2], &[3, 0x8000_0000, 4]);
}

#[test]
#[should_panic]
fn limbs_div_mod_by_two_limb_fail_3() {
    limbs_div_mod_by_two_limb(&mut [10], &mut [1, 2, 3, 4], &[3, 0x8000_0000]);
}

fn verify_limbs_div_mod_schoolbook(
    quotient_limbs_in: &[Limb],
    numerator_limbs_in: &[Limb],
    denominator_limbs: &[Limb],
    quotient_hi: bool,
    quotient_limbs_out: &[Limb],
    numerator_limbs_out: &[Limb],
) {
    let numerator = Natural::from_limbs_asc(numerator_limbs_in);
    let denominator = Natural::from_limbs_asc(denominator_limbs);
    let (expected_quotient, expected_remainder) = (&numerator).div_mod(&denominator);
    let base_quotient_length = numerator_limbs_in.len() - denominator_limbs.len();
    let mut quotient_limbs = quotient_limbs_out[..base_quotient_length].to_vec();
    if quotient_hi {
        quotient_limbs.push(1);
    }
    let quotient = Natural::from_owned_limbs_asc(quotient_limbs);
    let remainder = Natural::from_limbs_asc(&numerator_limbs_out[..denominator_limbs.len()]);
    assert_eq!(quotient, expected_quotient);
    assert_eq!(remainder, expected_remainder,);
    assert_eq!(
        &quotient_limbs_in[base_quotient_length..],
        &quotient_limbs_out[base_quotient_length..]
    );
    assert!(remainder < denominator);
    assert_eq!(quotient * denominator + remainder, numerator);
}

#[test]
fn test_limbs_div_mod_schoolbook() {
    let test = |quotient_limbs_in: &[Limb],
                numerator_limbs_in: &[Limb],
                denominator_limbs: &[Limb],
                quotient_hi,
                quotient_limbs_out: &[Limb],
                numerator_limbs_out: &[Limb]| {
        let mut quotient_limbs = quotient_limbs_in.to_vec();
        let mut numerator_limbs = numerator_limbs_in.to_vec();
        let inverse = limbs_two_limb_inverse_helper(
            denominator_limbs[denominator_limbs.len() - 1],
            denominator_limbs[denominator_limbs.len() - 2],
        );
        assert_eq!(
            _limbs_div_mod_schoolbook(
                &mut quotient_limbs,
                &mut numerator_limbs,
                denominator_limbs,
                inverse
            ),
            quotient_hi
        );
        assert_eq!(quotient_limbs, quotient_limbs_out);
        assert_eq!(numerator_limbs, numerator_limbs_out);
        verify_limbs_div_mod_schoolbook(
            quotient_limbs_in,
            numerator_limbs_in,
            denominator_limbs,
            quotient_hi,
            &quotient_limbs,
            &numerator_limbs,
        );
    };
    #[cfg(feature = "32_bit_limbs")]
    {
        // !most_significant_quotient_limb
        test(
            &[10],
            &[1, 2, 3],
            &[3, 4, 0x8000_0000],
            false,
            &[10],
            &[1, 2, 3],
        );
        // !(n_1 == d_1 && numerator_limbs[i - 1] == d_0)
        // !carry
        test(
            &[10, 10, 10, 10],
            &[1, 2, 3, 4, 5, 6],
            &[3, 4, 0x8000_0000],
            false,
            &[4294967207, 9, 12, 10],
            &[268, 328, 2147483575, 4294967251, 5, 6],
        );
        // carry
        test(
            &[10],
            &[0, 0, 0, 1],
            &[1, 0, 2147483648],
            false,
            &[1],
            &[4294967295, 4294967295, 2147483647, 1],
        );
        // most_significant_quotient_limb
        test(
            &[10; 10],
            &[
                2460989955, 642673607, 1971681331, 2338977519, 475442971, 2516527409, 3470931196,
                4262052990,
            ],
            &[
                1430162564, 1873089879, 3090281851, 2861182896, 2502166555, 2486624904, 960387080,
                3073064701,
            ],
            true,
            &[10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
            &[
                1030827391, 3064551024, 3176366775, 3772761918, 2268243711, 29902504, 2510544116,
                1188988289,
            ],
        );
        // n_1 == d_1 && numerator_limbs[i - 1] == d_0
        test(
            &[10; 8],
            &[
                0, 67108864, 4294963200, 63, 4294443008, 4294967295, 4294967295, 8388575,
                4294836224, 1073741823,
            ],
            &[33554304, 4294443008, 4294967295],
            false,
            &[
                0, 4294443008, 4294967295, 4294967295, 4294967295, 4294967295, 1073741823, 10,
            ],
            &[
                0, 0, 0, 4294443072, 4293918720, 4294967295, 4294967295, 4294967295, 4294836224,
                1073741823,
            ],
        );
    }
    #[cfg(not(feature = "32_bit_limbs"))]
    {
        test(
            &[10; 17],
            &[
                9995257893114397114,
                9401504468144459131,
                558615837638945228,
                10733662027974786928,
                18295107704289976677,
                1814706268673753787,
                12474943759854623335,
                8814778832826774208,
                9159057654048965906,
                4451260977376821357,
                18241701617364042056,
                6169989192350218482,
                15071965537117101028,
                13509168527678537782,
                12224278653171635329,
                16077066393714953826,
                1433938684868066489,
                13014970036232570373,
                899282336249563956,
                3089487642230339536,
                3787737519477527148,
                16667686214395942740,
                8787122953224574943,
                7841835218775877827,
                9693303502025838409,
                16122224776459879427,
                144327425397945219,
            ],
            &[
                2350654041004706911,
                7834348511584604247,
                12756796070221345724,
                3842923787777653903,
                12373799197090248752,
                9712029403347085570,
                1426676505264168302,
                10586232903332693517,
                8387833601131974459,
                6290888746273553243,
                9503969704425173615,
            ],
            false,
            &[
                89235393247566392,
                5198286616477507104,
                15671556528191444298,
                6642842185819876016,
                1703950202232719208,
                6620591674460885314,
                9897211438557358662,
                12382449603707212210,
                13586842887558233290,
                11884313943008627054,
                3205830138969300059,
                4257812936318957065,
                11084100237971796628,
                13937343901544333624,
                11743372027422931451,
                280132530083052382,
                10,
            ],
            &[
                12688955427180652274,
                7641660693922643933,
                8789985477567049482,
                5698832637416200787,
                14684840547760545685,
                2822100467869581421,
                3557573565928866957,
                4409631974409684922,
                16994214656621423610,
                4513108841166793667,
                9009005527785483287,
                4330767427200269309,
                11409205475757922767,
                12430752173702915207,
                11990819624778098799,
                4145020291153594556,
                7099200056207569977,
                3510167930325480168,
                4731667122118327121,
                10720310942075546738,
                5799804483118787221,
                17268037247251138479,
                13305947798457087249,
                1405091439325174594,
                13072181651983436371,
                16122224776459879427,
                144327425397945219,
            ],
        )
    }
}

#[test]
fn test_limbs_div_mod_divide_and_conquer_helper() {
    let test = |quotient_limbs_in: &[Limb],
                numerator_limbs_in: &[Limb],
                denominator_limbs: &[Limb],
                scratch_in: &[Limb],
                quotient_hi,
                quotient_limbs_out: &[Limb],
                numerator_limbs_out: &[Limb],
                scratch_out: &[Limb]| {
        let mut quotient_limbs = quotient_limbs_in.to_vec();
        let mut numerator_limbs = numerator_limbs_in.to_vec();
        let mut scratch = scratch_in.to_vec();
        let inverse = limbs_two_limb_inverse_helper(
            denominator_limbs[denominator_limbs.len() - 1],
            denominator_limbs[denominator_limbs.len() - 2],
        );
        assert_eq!(
            _limbs_div_mod_divide_and_conquer_helper(
                &mut quotient_limbs,
                &mut numerator_limbs,
                denominator_limbs,
                inverse,
                &mut scratch
            ),
            quotient_hi
        );
        assert_eq!(quotient_limbs, quotient_limbs_out);
        assert_eq!(numerator_limbs, numerator_limbs_out);
        assert_eq!(scratch, scratch_out);
    };
    #[cfg(feature = "32_bit_limbs")]
    {
        // hi < DC_DIV_QR_THRESHOLD
        // most_significant_quotient_limb == 0
        // lo < DC_DIV_QR_THRESHOLD
        // !quotient_lo
        test(
            &[10; 6],
            &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            &[13, 14, 15, 16, 17, 0x8000_0000],
            &[5; 6],
            0,
            &[75085, 25656, 4294965798, 4294966499, 21, 24],
            &[
                4293991192, 4293582579, 4293501313, 4293412419, 4293313687, 2147082789, 37543,
                12845, 2147482899, 4294966897, 11, 12,
            ],
            &[976105, 1384718, 1465985, 363881, 4294944840, 14],
        );
        // carry != 0 first time
        // carry != 0 second time
        test(
            &[
                3650075163, 404462426, 2376958342, 648230142, 2692507541, 4254097613, 1837852164,
                3159945071, 3076827174, 1746393581, 848862043,
            ],
            &[
                1454965277, 156018042, 1386304234, 3933017003, 1840527397, 4169420651, 3343338814,
                1487329926, 3897306601, 3401241545, 3117994664, 2264466925, 3843062712, 3688462745,
                2751679318, 2963108470, 1519717633, 1232770303, 2194740901,
            ],
            &[
                881479879, 1942294987, 2496800868, 3046752185, 3774873792, 2622161570, 566787739,
                1447674683, 2410287828,
            ],
            &[
                4244462898, 2669959604, 1812876641, 540444868, 370935699, 3785539585, 3780133203,
                1773663273, 1379840789, 1410566894,
            ],
            0,
            &[
                4200257899, 3153780761, 4089908189, 4114439647, 2799123152, 4201558754, 3905055721,
                1211637777, 2196711975, 1746393581, 848862043,
            ],
            &[
                1719308272, 2140366608, 603584626, 4153497816, 2390323322, 1104162273, 2593179664,
                1832710243, 1641806016, 3807959572, 4011228742, 704173432, 2308977722, 3864948954,
                391140865, 637314672, 1519717633, 1232770303, 2194740901,
            ],
            &[
                1498616763, 1900241408, 1481354048, 1578056262, 3110801788, 2810296474, 3131608484,
                1900021275, 3616206906, 1410566894,
            ],
        );
        // most_significant_quotient_limb != 0
        test(
            &[
                1160649470, 1230989586, 512562924, 1373938734, 3299208920, 3401055209, 42251693,
                2288005213, 3343756354, 954674868, 3527744494, 1930721795, 3001821203, 3573297662,
                4048916297,
            ],
            &[
                2057148366, 583267941, 379603263, 1865015969, 1062830871, 2288359129, 3742364509,
                672116401, 3779321685, 3524939949, 68128087, 4130811928, 3561664791, 3396354675,
                2634760529, 2501767046,
            ],
            &[
                143145757, 1928526231, 53490016, 4085239653, 3537190597, 2299226070, 3077712915,
            ],
            &[
                3464102302, 114904991, 3306074524, 4090773383, 4268119608, 3155351764, 3566536963,
            ],
            1,
            &[
                32959004, 4135046788, 271859649, 290785547, 2160143013, 2409308839, 444666535,
                2288005213, 3343756354, 954674868, 3527744494, 1930721795, 3001821203, 3573297662,
                4048916297,
            ],
            &[
                449879714, 2878803964, 610959982, 3980950674, 2921132068, 1744272022, 1577940436,
                3129245204, 1125263020, 194810786, 58533608, 3405394822, 1262438721, 318641760,
                2634760529, 2501767046,
            ],
            &[
                1607268652, 1999431273, 4063610576, 3427915471, 871357890, 1653319155, 258584465,
            ],
        );
        // hi >= DC_DIV_QR_THRESHOLD
        // lo >= DC_DIV_QR_THRESHOLD
        test(
            &[
                1925999587, 3310842987, 1943880039, 3068623696, 3394859190, 3593884525, 2759145989,
                4181168246, 1640302881, 3837720411, 660860204, 511270360, 2627995609, 1809849060,
                615191647, 836844414, 1828195297, 3749120985, 159179676, 129309193, 3123771746,
                1011690856, 3278099944, 2517344232, 2914547791, 1835191081, 576624965, 561250890,
                582440631, 318411661, 1060428917, 4237290203, 901501900, 1855747497, 371007244,
                3283537081, 3237063803, 1485593014, 193923221, 1981929294, 617652486, 290656393,
                3013470276, 1031354037, 1068739322, 32355658, 1886082024, 1222490526, 4021843027,
                2253785709, 1514545130, 3968550004, 2129532850, 384056389, 3303449199, 3030639197,
                1693728619, 3379721754, 2596206443, 1207906168, 3133034696, 2249085793, 2830694631,
                614897762, 3616300986, 1800418887, 1586049611, 2456467232, 1932579993, 462953139,
                686240231, 1587148042, 2714049545, 3997401795, 1583798572, 1444461065, 78015599,
                1509108530, 2363890341, 489830073, 2786979498, 4081947412, 3376874670, 1104007584,
                1591646211, 905224254, 334699922, 246635559, 1617636730, 748018649, 889143140,
                50373080, 3351342053, 572744072, 2901371037, 2106149692, 2547050367, 4287383464,
                4054800630, 1542073428, 1479008428, 818312892, 3950789462, 3241273259, 2293449065,
                797464662, 3063425238, 2155388055, 1481420947, 780106530, 579092029, 3836696522,
                79494402, 4058534010, 81681058, 808971893, 3033983673, 994913191, 1497913790,
                3318581487, 1234677646, 2348191231, 2297107745, 1756885812, 3967547420, 68938920,
                2792342109, 2564431912, 3710061649, 3066477507, 906692329, 971192593, 3433101239,
                3781329010, 1467921514, 1245491152, 3954261867, 236530141, 3914896416, 2096194762,
                299508578, 3493226751, 2414573261, 571354822, 1841867387, 970344149, 2085042560,
                1299362491, 1913753608, 738639249, 519874939, 3157732274, 1274874879, 3613110677,
                218812728, 4172579643, 3707816606, 528702087, 3551605386, 3555196151, 3539938289,
                1651879332, 3758444796, 1660600737, 3929222748, 2687928169, 1693437382, 3375533994,
                1598030053, 2835638091, 4271135853, 1004799928, 3706096603, 1223481056, 2614484262,
                2428782661, 122045041, 872251822, 2976520080, 320209896, 1430353573, 634796284,
                889713253, 2553345511, 3154718773, 1573587943, 3434149495, 1222439451, 3818391276,
                127882650, 3428266099, 839828009, 2917982642, 185416346, 670838205, 2637097959,
                2412931975, 1023425398, 980612561, 3107345275, 1299250195, 490635258, 3006121984,
                50586217, 2933423714, 1867098753, 251360814, 1816611565, 3503934781, 3855566329,
                1359056046, 1308856656, 3023221749, 227767551, 1032521295, 1735360000, 2365425843,
                1790921994, 4233038373, 1104084146, 728221746, 516926849, 2830235548, 2385455431,
                3560186517, 1456935907, 1474184516, 502223446, 691936748, 2027265070, 894241983,
                873923167, 3424411519, 233264854, 2467955093, 4234157407, 1508466304, 3286062356,
                2103147761, 3756678995, 825011197, 3128974643, 566824549, 3707345735, 131619312,
                2097353521, 3403879978, 2480175805, 1774923780, 393188903, 3222896292, 3562618019,
                234890772, 269316353, 1244143512, 267234244, 1311937427, 1362450988, 3975430908,
                1341444418, 3661958165, 3280060275, 3434130706, 1634318561, 4001988842, 2557536012,
                2146387651, 366290469, 1567001566, 1906564439,
            ],
            &[
                3864356172, 3759381088, 2973528858, 2207455883, 732791701, 959776149, 1052386573,
                2824021630, 3684158041, 4010955233, 2478036554, 2187901343, 3473883669, 1023916572,
                2342296567, 3066200661, 3296348546, 1114875627, 2934381479, 965977792, 3325321732,
                1869113191, 1293287891, 234880387, 2363256950, 734980829, 3381052369, 3890916149,
                1507752332, 3706381054, 3000684807, 2692608749, 3079243818, 1150916836, 3597434333,
                2577669234, 1383975831, 3673206517, 1077349628, 1531911672, 2048337060, 2752975066,
                911330952, 2101916653, 2098438263, 692817608, 1963389070, 945853163, 4137185243,
                3365235006, 162365445, 3757197634, 4288009265, 3346989831, 2812645596, 2241243583,
                311409474, 309471809, 3734000471, 3279839897, 1784333811, 3742338102, 3090885922,
                3902729466, 1063897326, 3260202651, 1395583903, 2230814045, 3154157813, 681254595,
                2789364947, 1239697201, 1849094194, 3672550338, 2925244065, 2491726527, 3974757591,
                3637660426, 767266756, 342943790, 1514863857, 3696418128, 2289616199, 1080110765,
                2399874059, 1288187596, 3981167427, 2985020981, 1534252240, 834702605, 517058206,
                551155694, 3325477153, 529442223, 1235456447, 1673397767, 2570531045, 2008957863,
                3839734453, 217179525, 2289590545, 118556579, 2138198803, 3240930704, 423985756,
                919433365, 2413247431, 1326809927, 1050933124, 1171458752, 556638692, 1664760920,
                2066149017, 2734305302, 3547707974, 1146490588, 166261628, 2543286296, 2472240402,
                2899403086, 1236758247, 2763492890, 798872987, 4055743058, 1630048344, 1711683208,
                2284440083, 2687594846, 2123310497, 1766118060, 1863014906, 3090503150, 559682382,
                749002481, 93168939, 3845351806, 3980043053, 1082302073, 3319301996, 564557175,
                1134479415, 864519271, 15952534, 3870948540, 1476355737, 2906040107, 1475951003,
                4189242780, 1657835614, 875761744, 3303203991, 2055370463, 703818440, 3946618417,
                2362162988, 1145068984, 770075133, 2762848273, 2457395245, 3257099434, 1763674141,
                1048533761, 3324029711, 2215085101, 188721084, 1101206321, 1413552611, 3989124328,
                3245744575, 885799233, 157308456, 1009714551, 4171598186, 3712689058, 664264259,
                3136378549, 954651654, 3077652643, 2096370948, 3122137900, 846376481, 243460017,
                3279702973, 2498977610, 3450393668, 1342262115, 2153130849, 2548762656, 2045516031,
                3392083608, 437330999, 3208776510, 3255398260, 3039778968, 3834676913, 2341776769,
                3714246070, 1743879297, 2942875317, 1642861085, 3193299966, 3305922985, 1094448889,
                3660580610, 1403362070, 4087236678, 621757536, 4142175861, 3934265976, 3058211919,
                1933982930, 4098837027, 4262215692, 2543267144, 3599285623, 2690770583, 2560943533,
                3589362432, 1439594559, 1790843457, 2816863086, 2560203281, 4171268859, 4156495540,
                549481065, 588661706, 3734713219, 1718857187, 4077742963, 971147536, 304511891,
                1368071520, 1601135726, 1436491346, 4170216492, 24075886, 1827767778, 1475511461,
                3320082545, 3247035446, 860400612, 4101890332, 1144650504, 276381979, 2717227940,
                148915751, 3836567991, 894190981, 3372642972, 2347280146, 430786206, 3070947846,
                1015360917, 2876208241, 3729940888, 3312507046, 3964105260, 3302890651, 1551566982,
                2082707586, 1556752259, 712427501, 2787839272, 2532321455, 3821995818, 3759680619,
                2970609617, 1412878837, 4085093861, 1503114689, 1685033479, 1412547642, 2831775952,
                2252024073, 2397779547, 2785476981, 223469779, 3640682284, 2368770987, 3260202199,
                348005452, 284315017, 379596743, 2720275440, 4058254572, 3654872147, 862399395,
                884009544, 3294601468, 1502442710, 98535153, 2608517920, 2300062382, 595230163,
                156997626, 3453234161, 2112307240, 198621770, 813368639, 229919951, 2986892448,
                37462817, 38857061, 2092485960, 3933936383, 597198297, 3032161805, 3032057222,
                2851948600, 3756580086, 1415523836, 1561345455, 3382211445, 2231315801,
            ],
            &[
                1940168977, 3230556788, 502228327, 687551695, 1837528416, 249254226, 20556871,
                1097227383, 1638530275, 4238302571, 1363251303, 2884628582, 1148429609, 61756119,
                1339804173, 1701944412, 3899025312, 820356765, 4193218236, 1916851, 3850849488,
                2684839307, 2963197137, 4021704957, 3353103231, 3636867888, 1255779572, 179772025,
                1268126926, 3113942956, 1308847407, 1659345082, 2741511343, 4280255705, 3874307034,
                644996159, 4190266717, 4255232181, 4086073202, 1655671151, 3311062699, 2620080067,
                150957949, 777173218, 3837215271, 2254110731, 1823765742, 2094445810, 1586502495,
                2354640272, 3635181666, 2686911611, 2530269646, 260580809, 2279701129, 4212647912,
                92873470, 1932506312, 2396516716, 3591357295, 3104084946, 3666131683, 2150965270,
                1015611727, 3692113500, 3201683697, 4152861011, 2214725007, 50924182, 3487300677,
                4164147175, 3593899586, 1571047157, 4275272285, 2266962913, 804354334, 1453516832,
                1332289252, 1888746125, 238481662, 2083773928, 897004921, 84594192, 3388861096,
                1187590829, 4037296342, 2311181146, 1168097801, 1461061849, 3572733459, 2759766390,
                3438057323, 3942595917, 1938663436, 3809649742, 767622277, 4145960711, 3475107536,
                631263540, 3085991526, 1701735861, 1265437957, 4280125298, 3578736872, 4176326278,
            ],
            &[
                406867658, 3405381036, 808018256, 2223614431, 2145171509, 3518742808, 250514275,
                3753705906, 3013812157, 3829477829, 1935716824, 3301475982, 3661466979, 3499002209,
                3967281545, 3633902194, 171046725, 3240899935, 947932436, 2424617811, 2938983289,
                3075742045, 1532319545, 2814518237, 2004531065, 1442849553, 756868801, 2512647721,
                3087911835, 3536820547, 1254121250, 3430651256, 1462727031, 1620652198, 1782267394,
                1355400836, 1896196900, 2707292069, 237927955, 2059311737, 833978303, 3579333605,
                3406595195, 2943811271, 4155553905, 1125988217, 573477537, 1161469892, 2230750582,
                3136147356, 4193456800, 955009875, 483204329, 2979505953, 549147849, 4178779119,
                4129365930, 132806718, 3009551892, 3304131634, 327713775, 2203696611, 1213644639,
                2845904123, 1141657026, 2070910484, 164241079, 119040092, 1669073017, 1556830443,
                139047001, 3125245844, 94641812, 3419619495, 130528087, 448555838, 3094400611,
                3129300152, 58940216, 1834305685, 3756963570, 1106430083, 2525438147, 3349271607,
                4037149655, 4227379014, 3666952486, 1128402069, 752745132, 383044625, 3799831396,
                4212483272, 635376793, 2423257815, 1104432102, 576078145, 920054080, 1643179928,
                3042449076, 2003856809, 3454892373, 1759226539, 3304584552, 286216878, 4012534432,
                2710529232, 1141374999, 2700046055, 2902668677, 1400993854, 268299471, 1589090515,
                911988301, 2151160727, 1161140045, 2845388811, 2394066714, 461982038, 531607890,
                1617768892, 2229320447, 4009293808, 345437455, 2891080494, 589568254, 3444895727,
                1426691531, 3670662893, 2912725629, 4154201926, 1510269998, 2043871488, 2216683376,
                441581006, 1485888456, 760592633, 4138362099, 789863623, 2322873479, 546975672,
                3396104257, 369041505, 1834801989, 3723602184, 3889531017, 1472233087,
            ],
            0,
            &[
                17173825, 108042902, 3268218522, 2077287814, 2586341653, 4000033719, 728115586,
                4001266677, 2972089267, 4063721631, 2176226304, 3453763686, 3986789007, 661755479,
                906862843, 2753152000, 2417656423, 2974034126, 359365706, 510242545, 74006754,
                49102790, 3875409273, 618298780, 2397713953, 1154290753, 1091884725, 198746303,
                3589247215, 3658111370, 800898532, 814378888, 1928524512, 2353040310, 2080695898,
                2396321959, 792031536, 1027035676, 2965261468, 683665442, 319719623, 3469336861,
                368308673, 284540973, 3851033448, 796392523, 283241674, 3660958674, 3753830211,
                3775307142, 918902278, 2827679966, 3635219649, 4043872879, 3083059094, 2719285819,
                2206202145, 402788013, 300254578, 2235964887, 2300529629, 921152093, 3796445053,
                1626790462, 2917665209, 3576186670, 1029594824, 4198785964, 1550896469, 3235089997,
                585010100, 3016490054, 135547421, 2810520363, 164483360, 4079775000, 57269257,
                2220102573, 4282245180, 838819943, 4162726035, 2996481807, 1421083611, 881862265,
                4009915928, 230804290, 2656124443, 2341988975, 3845407707, 3526071560, 134345937,
                1962912136, 1506674643, 2726832740, 1153556711, 1011435279, 3828302594, 2736615491,
                3233850936, 2007915681, 2820599964, 1572989616, 451610424, 1609043148, 3145089560,
                797464662, 3063425238, 2155388055, 1481420947, 780106530, 579092029, 3836696522,
                79494402, 4058534010, 81681058, 808971893, 3033983673, 994913191, 1497913790,
                3318581487, 1234677646, 2348191231, 2297107745, 1756885812, 3967547420, 68938920,
                2792342109, 2564431912, 3710061649, 3066477507, 906692329, 971192593, 3433101239,
                3781329010, 1467921514, 1245491152, 3954261867, 236530141, 3914896416, 2096194762,
                299508578, 3493226751, 2414573261, 571354822, 1841867387, 970344149, 2085042560,
                1299362491, 1913753608, 738639249, 519874939, 3157732274, 1274874879, 3613110677,
                218812728, 4172579643, 3707816606, 528702087, 3551605386, 3555196151, 3539938289,
                1651879332, 3758444796, 1660600737, 3929222748, 2687928169, 1693437382, 3375533994,
                1598030053, 2835638091, 4271135853, 1004799928, 3706096603, 1223481056, 2614484262,
                2428782661, 122045041, 872251822, 2976520080, 320209896, 1430353573, 634796284,
                889713253, 2553345511, 3154718773, 1573587943, 3434149495, 1222439451, 3818391276,
                127882650, 3428266099, 839828009, 2917982642, 185416346, 670838205, 2637097959,
                2412931975, 1023425398, 980612561, 3107345275, 1299250195, 490635258, 3006121984,
                50586217, 2933423714, 1867098753, 251360814, 1816611565, 3503934781, 3855566329,
                1359056046, 1308856656, 3023221749, 227767551, 1032521295, 1735360000, 2365425843,
                1790921994, 4233038373, 1104084146, 728221746, 516926849, 2830235548, 2385455431,
                3560186517, 1456935907, 1474184516, 502223446, 691936748, 2027265070, 894241983,
                873923167, 3424411519, 233264854, 2467955093, 4234157407, 1508466304, 3286062356,
                2103147761, 3756678995, 825011197, 3128974643, 566824549, 3707345735, 131619312,
                2097353521, 3403879978, 2480175805, 1774923780, 393188903, 3222896292, 3562618019,
                234890772, 269316353, 1244143512, 267234244, 1311937427, 1362450988, 3975430908,
                1341444418, 3661958165, 3280060275, 3434130706, 1634318561, 4001988842, 2557536012,
                2146387651, 366290469, 1567001566, 1906564439,
            ],
            &[
                1442095867, 1425259645, 1884903791, 1777903625, 3175769087, 3807598758, 762514608,
                2628241683, 2084076649, 2060089344, 2624901677, 1621900217, 1707153566, 3577011923,
                1541004439, 1886484210, 3260086307, 2227090668, 3107722150, 477655641, 1202597635,
                953231660, 1681598198, 866048426, 3273941270, 1109725082, 521571384, 7742194,
                3862109316, 3658450737, 3037639171, 2012203251, 3171115038, 1831832931, 1807210774,
                1597488621, 3664077634, 3454103999, 3661201384, 874866833, 4223535116, 668055932,
                1005264184, 1838301981, 4277552452, 3554262023, 641553690, 954124858, 226894863,
                165265274, 3203114657, 135449553, 55362086, 1862739834, 433509723, 1759059070,
                3373456730, 3059791826, 1374478332, 2797147610, 1456358652, 1587227145, 3720068854,
                2046928661, 3363019938, 2244711194, 2118936570, 2822640163, 3101352371, 3218263532,
                2318402149, 2882896828, 622486543, 298561760, 3914883643, 526690601, 3361553597,
                3970670614, 3141459956, 3031460970, 4050183357, 4017772453, 2030298849, 3839055614,
                3042343018, 446833229, 3003902139, 1272068786, 173053130, 4090926829, 4052557131,
                1139284674, 1102707331, 3627992954, 3034622508, 3659010656, 3548662253, 2057502601,
                1881942227, 2627523832, 434242875, 1542454014, 3991883391, 2343729585, 1640968092,
                1530748226, 3026731173, 1023268612, 793845803, 2550982790, 2433297913, 3643977563,
                1249063196, 2790066999, 1506091162, 220612379, 4173355440, 1478340551, 307271052,
                2583703244, 193017786, 2482201803, 3279357412, 1535228581, 4222296231, 2861585095,
                175746686, 880512092, 2933569786, 3818211073, 1122405474, 2459990655, 1123199959,
                1153265312, 3988497069, 3624545847, 3030008208, 3571450059, 2687168177, 1857154957,
                76602940, 697930765, 3068498274, 1770346452, 2051970411, 3009167677, 4010609560,
                2388957577, 4092838901, 2792912169, 2288959372, 2958571738, 1858165290, 2191937932,
                1203999286, 3843879353, 2749570214, 532861077, 1846219350, 2430607946, 1997198152,
                3105192053, 2141396849, 3548006510, 1399065173, 3057434715, 3284854281, 3519461629,
                3850820305, 3284351296, 3311466997, 1845218280, 3199029323, 156014642, 295920886,
                3603164923, 1869049205, 4158087923, 1267663018, 2395412305, 412695731, 2854190757,
                2158776092, 3899086337, 1456459857, 3203161022, 1591182881, 3519585282, 1443466957,
                4220521144, 1325854930, 4058082820, 3220277229, 3900844075, 1978837052, 523987694,
                1847133024, 2641015611, 2575900656, 581020248, 2179157442, 2676548852, 920711706,
                7182797, 3902652740, 2542657919, 912170953, 3474703690, 3934265976, 3058211919,
                1933982930, 4098837027, 4262215692, 2543267144, 3599285623, 2690770583, 2560943533,
                3589362432, 1439594559, 1790843457, 2816863086, 2560203281, 4171268859, 4156495540,
                549481065, 588661706, 3734713219, 1718857187, 4077742963, 971147536, 304511891,
                1368071520, 1601135726, 1436491346, 4170216492, 24075886, 1827767778, 1475511461,
                3320082545, 3247035446, 860400612, 4101890332, 1144650504, 276381979, 2717227940,
                148915751, 3836567991, 894190981, 3372642972, 2347280146, 430786206, 3070947846,
                1015360917, 2876208241, 3729940888, 3312507046, 3964105260, 3302890651, 1551566982,
                2082707586, 1556752259, 712427501, 2787839272, 2532321455, 3821995818, 3759680619,
                2970609617, 1412878837, 4085093861, 1503114689, 1685033479, 1412547642, 2831775952,
                2252024073, 2397779547, 2785476981, 223469779, 3640682284, 2368770987, 3260202199,
                348005452, 284315017, 379596743, 2720275440, 4058254572, 3654872147, 862399395,
                884009544, 3294601468, 1502442710, 98535153, 2608517920, 2300062382, 595230163,
                156997626, 3453234161, 2112307240, 198621770, 813368639, 229919951, 2986892448,
                37462817, 38857061, 2092485960, 3933936383, 597198297, 3032161805, 3032057222,
                2851948600, 3756580086, 1415523836, 1561345455, 3382211445, 2231315801,
            ],
            &[
                2422260305, 2334121443, 1088625067, 429552258, 1851989910, 1447144686, 289871964,
                195779947, 1600081392, 1950865889, 4148102173, 566001125, 1766730103, 1741871945,
                801292127, 1179716451, 36262239, 3182752255, 4121626624, 488322150, 2122724097,
                915881531, 3906656989, 3663799256, 3384282975, 3920223042, 2859480984, 3883173955,
                1940610312, 47930316, 4258012932, 680405497, 4203096076, 3614051200, 1790223558,
                980180613, 2014865493, 219102517, 1711115540, 657044838, 2119769240, 2084919133,
                4201034064, 263614671, 2115853107, 1433522880, 1321835379, 4286695601, 3910290379,
                3199969732, 1254218084, 3621748080, 3844200506, 4164698311, 3502226552, 865341111,
                540925471, 757591793, 1430063306, 4129093409, 2383842279, 4278252470, 3063505514,
                429106204, 3522947207, 1678028967, 828832434, 170284812, 2462261564, 4056737020,
                1079922015, 1109994240, 239815824, 2610194785, 2061084469, 2620112404, 134907464,
                2686871017, 1270744298, 1309713827, 2212132498, 970028981, 916446327, 1259611281,
                999199468, 3274822347, 3775383526, 2218503902, 1592101059, 585488370, 2625072423,
                1503465265, 893164758, 4888580, 1852474847, 77875921, 2930969263, 1691577674,
                2627212818, 4267036794, 1006033654, 992470411, 3347926021, 1054690213, 1665855010,
                2710529232, 1141374999, 2700046055, 2902668677, 1400993854, 268299471, 1589090515,
                911988301, 2151160727, 1161140045, 2845388811, 2394066714, 461982038, 531607890,
                1617768892, 2229320447, 4009293808, 345437455, 2891080494, 589568254, 3444895727,
                1426691531, 3670662893, 2912725629, 4154201926, 1510269998, 2043871488, 2216683376,
                441581006, 1485888456, 760592633, 4138362099, 789863623, 2322873479, 546975672,
                3396104257, 369041505, 1834801989, 3723602184, 3889531017, 1472233087,
            ],
        );
    }
    #[cfg(not(feature = "32_bit_limbs"))]
    {
        test(
            &[
                17572162751360544244,
                8819660083286717264,
                69135776031233389,
                9998360095371859020,
                1528928997031509791,
                12805160204156629031,
                8189615704171780683,
                2467675461409164019,
                782953727844991423,
                6355321416294201810,
                3548418573913501932,
                1385195069445654350,
                13512602943141297700,
                3524217759662463436,
                15981277851376785202,
                12068598413178807016,
                18233498041601520144,
                2375502627693604799,
                16956133502968527252,
                11788850786377567039,
                11202538381248983997,
                17482018504857740095,
                9943113291088195605,
                5416385292050986207,
                8819536346488991181,
                1598965950294021235,
                7882433753150467476,
                11743953932529749849,
                10411233691475182105,
                17683252058144329516,
                2922512632182218442,
                2382866619354154085,
                9172180753684645874,
            ],
            &[
                10105659428154830950,
                16080122897863747159,
                6673547445599414511,
                11590428152693613362,
                15656796674143758153,
                13854182285237220276,
                17678343821108802601,
                4369330246412531640,
                9259631508948401460,
                12754317407998722916,
                14030093772258243923,
                12445528589737756681,
                12390141941180011208,
                17818097568992876719,
                12989074377855915831,
                15055008450343622597,
                11775717793939542741,
                9833777944799450829,
                1788609959115009762,
                10560041894305231808,
                9536970158738359525,
                1647965462344397494,
                4996752293272243711,
                13137844160192969508,
                2796962560281872214,
                643321940596004625,
                13724093349212267288,
                514656857224167647,
                17466700348969860335,
                1993575779441570801,
                8868832811893337322,
                15570108310943406655,
                4603018448416072746,
                7200423584330501685,
                16017076175667054324,
                5847681228393669991,
            ],
            &[
                2828382444363234501,
                14019650302598222399,
                7149153771500111721,
                5808789510078375243,
                11746020933581287784,
                13963712573526024090,
                7948303882471336756,
                1363675852130084180,
                6084755510768204882,
                1350344795057047203,
                9774965847686534495,
                3240922473188564283,
                15530555198365657320,
                10072507218045872484,
            ],
            &[
                3916176418979954809,
                13668445226587840112,
                4649545877528018706,
                4592844313008508560,
                1015698297474974096,
                4103788998158380965,
                3916718682939004578,
                15207100641670612500,
                17177134784967667913,
                11566641647595164661,
                9169819837968929550,
                3912314602443680574,
                4920758471477644048,
                1409530806025278074,
                5510606243797201171,
                12655419700909080809,
                17478621877874030166,
                15321181022827604413,
                13764600376461182213,
                13135951171767226708,
                11464308217997836339,
                3414688123447059622,
                3041528540948075342,
                10902064393009370906,
                2740240708380754029,
                16105489040588988796,
                232349632301822035,
                3740450900174558001,
                10226882414186792277,
                2705057468055419157,
                18212106751345336709,
                10131854424711804281,
                10927936284107448631,
                17500260223554361358,
                9690107344320395824,
                8855064790737373332,
                16595409933208348428,
                2736868038549555369,
                14216258614790256085,
                14646314481214938667,
                3856845432180453767,
                13546822972661162095,
                12602514397777370047,
                5549225470399653441,
                15257956181957241657,
                1262811690033316268,
                377255999899508731,
                8164999116021155449,
                6826996163805010560,
                14629381018204188454,
                16811818456558675342,
                4062419164792366769,
                18281154867218769619,
                13583126012283138362,
                4914318060782464332,
                8615549598564119112,
                640338775759859639,
                9509768036321096174,
                11037969681096120955,
                16326637696328881868,
                7831855429776928274,
                2076088851521012520,
                3886895293499168336,
                9280832655729778289,
                3296617758093253096,
                2171889737571423791,
                16237656590956752013,
                1726250002529405870,
                11764897685228775022,
                15958943103426875449,
                17812138286701900961,
                9450057600621232816,
                9049650057365475277,
                5301777602331001564,
                15381606785008766966,
                9846985188738170204,
                13702195215462452787,
                1958995251130615636,
                16946083440253521233,
            ],
            0,
            &[
                17268182715902625458,
                3814961318301672608,
                4833680902046068822,
                2553855042388431665,
                6335398859967270264,
                446578878991365047,
                5919639150554682533,
                10143632221624494847,
                14332968394883847715,
                8864237429404827524,
                13971809979410591917,
                16532475063079451499,
                10834877969562798827,
                942540236058102443,
                15981277851376785202,
                12068598413178807016,
                18233498041601520144,
                2375502627693604799,
                16956133502968527252,
                11788850786377567039,
                11202538381248983997,
                17482018504857740095,
                9943113291088195605,
                5416385292050986207,
                8819536346488991181,
                1598965950294021235,
                7882433753150467476,
                11743953932529749849,
                10411233691475182105,
                17683252058144329516,
                2922512632182218442,
                2382866619354154085,
                9172180753684645874,
            ],
            &[
                14289061310848733548,
                17326460337073238260,
                9482030193369049155,
                1477555057769672694,
                1804695980665651852,
                13858465374526238772,
                12818143718428350308,
                17383203216393145613,
                12431083803667516452,
                15204035285285328576,
                15162781106599025416,
                113739810898596116,
                14880106289005993152,
                2559762150634107201,
                3545649299581479587,
                57120415063081580,
                11158277808456361419,
                788522906312422007,
                17454553103090554802,
                16954386397459924245,
                3232310690381825941,
                14115784819037932758,
                12858150114133136365,
                17102774791488490622,
                5971027607386938639,
                9323860546443201055,
                13724093349212267288,
                514656857224167647,
                17466700348969860335,
                1993575779441570801,
                8868832811893337322,
                15570108310943406655,
                4603018448416072746,
                7200423584330501685,
                16017076175667054324,
                5847681228393669991,
            ],
            &[
                14263342191015649018,
                17200406634500060514,
                15638261325939916971,
                10112873094923940667,
                13852100693478106301,
                18442460984420533120,
                4860200102680452292,
                7401158214689776648,
                9458499398374568987,
                6308354756610538129,
                5084248657548615762,
                1957203375634754042,
                2040165737909650984,
                2550644745499597578,
                5510606243797201171,
                12655419700909080809,
                17478621877874030166,
                15321181022827604413,
                13764600376461182213,
                13135951171767226708,
                11464308217997836339,
                3414688123447059622,
                3041528540948075342,
                10902064393009370906,
                2740240708380754029,
                16105489040588988796,
                232349632301822035,
                3740450900174558001,
                10226882414186792277,
                2705057468055419157,
                18212106751345336709,
                10131854424711804281,
                10927936284107448631,
                17500260223554361358,
                9690107344320395824,
                8855064790737373332,
                16595409933208348428,
                2736868038549555369,
                14216258614790256085,
                14646314481214938667,
                3856845432180453767,
                13546822972661162095,
                12602514397777370047,
                5549225470399653441,
                15257956181957241657,
                1262811690033316268,
                377255999899508731,
                8164999116021155449,
                6826996163805010560,
                14629381018204188454,
                16811818456558675342,
                4062419164792366769,
                18281154867218769619,
                13583126012283138362,
                4914318060782464332,
                8615549598564119112,
                640338775759859639,
                9509768036321096174,
                11037969681096120955,
                16326637696328881868,
                7831855429776928274,
                2076088851521012520,
                3886895293499168336,
                9280832655729778289,
                3296617758093253096,
                2171889737571423791,
                16237656590956752013,
                1726250002529405870,
                11764897685228775022,
                15958943103426875449,
                17812138286701900961,
                9450057600621232816,
                9049650057365475277,
                5301777602331001564,
                15381606785008766966,
                9846985188738170204,
                13702195215462452787,
                1958995251130615636,
                16946083440253521233,
            ],
        )
    }
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_mpn_tdiv_qr() {
    let test = |quotient_limbs_in: &[Limb],
                remainder_limbs_in: &[Limb],
                numerator_limbs: &[Limb],
                denominator_limbs: &[Limb],
                quotient_limbs_out: &[Limb],
                remainder_limbs_out: &[Limb]| {
        let mut quotient_limbs = quotient_limbs_in.to_vec();
        let mut remainder_limbs = remainder_limbs_in.to_vec();
        mpn_tdiv_qr(
            &mut quotient_limbs,
            &mut remainder_limbs,
            numerator_limbs,
            denominator_limbs,
        );
        assert_eq!(quotient_limbs, quotient_limbs_out);
        assert_eq!(remainder_limbs, remainder_limbs_out);
    };
    test(
        &[
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        ],
        &[
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
        ],
        &[
            9995257893114397114,
            9401504468144459131,
            558615837638945228,
            10733662027974786928,
            18295107704289976677,
            1814706268673753787,
            12474943759854623335,
            8814778832826774208,
            9159057654048965906,
            4451260977376821357,
            18241701617364042056,
            6169989192350218482,
            15071965537117101028,
            13509168527678537782,
            12224278653171635329,
            16077066393714953826,
            1433938684868066489,
            13014970036232570373,
            899282336249563956,
            3089487642230339536,
            3787737519477527148,
            16667686214395942740,
            8787122953224574943,
            7841835218775877827,
            9693303502025838409,
            16122224776459879427,
            144327425397945219,
        ],
        &[
            2350654041004706911,
            7834348511584604247,
            12756796070221345724,
            3842923787777653903,
            12373799197090248752,
            9712029403347085570,
            1426676505264168302,
            10586232903332693517,
            8387833601131974459,
            6290888746273553243,
            9503969704425173615,
        ],
        &[
            89235393247566392,
            5198286616477507104,
            15671556528191444298,
            6642842185819876016,
            1703950202232719208,
            6620591674460885314,
            9897211438557358662,
            12382449603707212210,
            13586842887558233290,
            11884313943008627054,
            3205830138969300059,
            4257812936318957065,
            11084100237971796628,
            13937343901544333624,
            11743372027422931451,
            280132530083052382,
            0,
        ],
        &[
            12688955427180652274,
            7641660693922643933,
            8789985477567049482,
            5698832637416200787,
            14684840547760545685,
            2822100467869581421,
            3557573565928866957,
            4409631974409684922,
            16994214656621423610,
            4513108841166793667,
            9009005527785483287,
            10,
            10,
            10,
            10,
            10,
            10,
        ],
    );
    test(
        &[10, 10, 10],
        &[
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10,
        ],
        &[
            748159237152854524,
            14199895651244313572,
            9044210482484213648,
            3880401870711113518,
            1694971440240542063,
            13547801197479934494,
            5244069077418598572,
            17329479401291658084,
            12613311850003558282,
            5618071535926791206,
            16954511293879569524,
            8600749590433482901,
            11708546551548237376,
            10879843710159659952,
            9101678715417935644,
            12126242459863584426,
            17259866272884195621,
            4418382641453775715,
            542305129955142216,
            6563442437678466173,
            12794875758080454756,
            7461769876910639905,
            17925257245127463276,
            5137728719899113924,
            12905981752247605071,
        ],
        &[
            2654882163556630563,
            2047318842992691178,
            17944530594807555614,
            17278864523505748498,
            1160166728089482341,
            18368953657130322418,
            3937719995815345698,
            12007028340444721520,
            1496744539933999053,
            1476923054783110845,
            6551619938265612084,
            16801911333947266527,
            13986495313155597995,
            6571595571877061463,
            10140569634762389822,
            16210530410764331582,
            15172903143228403872,
            5831780706385794192,
            12288937301416472500,
            16224579586702000460,
            14545605105156691376,
            8614987803254853144,
            16629891239728134900,
        ],
        &[17831022488782895576, 14315989140983049585, 0],
        &[
            18140975738986113396,
            16765596268029991308,
            14497740378349400824,
            8834432760455669008,
            2081502095596466916,
            16785570606386467383,
            5299348241512211807,
            17503170383548190207,
            16775442261989831354,
            8131705923782084593,
            266320274487676679,
            6602256474512308593,
            2102043233085822823,
            11614561527212258722,
            17915538208051341722,
            5710195504177465517,
            2094480568485157388,
            14339014023087152780,
            6947889352398323832,
            10985139413433625547,
            12373170520775701923,
            9198039438688117621,
            15475638737141339650,
        ],
    );
    test(
        &[10; 60],
        &[10; 56],
        &[
            14660214196707223375,
            14265972253040120215,
            15506320303100465818,
            17085621003033826581,
            11203337550022453944,
            15493204961705835371,
            5803021083410871755,
            8112917457002746745,
            12663484193891261040,
            1721048899893287199,
            8062187621610464306,
            13431761655884620090,
            7331427712144411262,
            3626934647030185267,
            13231383914073320042,
            11637171044660683638,
            15189928975258171045,
            941827519265124224,
            2992792486091076914,
            2044203374633195985,
            8310380355675814732,
            1677894573715118386,
            1863631713396879617,
            13750903464355877990,
            13561054993991137710,
            6643134394212488277,
            9782189322903525535,
            7987880548748269544,
            17396502810230452231,
            9355336424066456608,
            6974435047841500624,
            4695995454788932008,
            9790410161672155866,
            7324176676989916049,
            14873447357313289350,
            17933513319573948354,
            16221633809094225356,
            1119296061370324791,
            13659405622992751643,
            10536448431317839371,
            15771892335411705715,
            6450515195565208913,
            12583173873673842188,
            8943105588740166659,
            16781237121411387206,
            7355272525679995848,
            8924936502454129260,
            9464007023044637842,
            2392086820925613645,
            6952992660961663836,
            15709161892606831425,
            15961199354349516091,
            8170938350051511007,
            10106337242460916657,
            4519632767875399815,
            13966478644099829332,
            18146666299243951179,
            18001892575388798951,
            17442461326088111501,
            12996149925790510613,
            15125238000270787220,
            13458137050174539117,
            7565676737178758148,
            7820895745333505106,
            18391820881894926862,
            17227107494212736312,
            16170524482788524562,
            18292226432698054709,
            16409124153431213414,
            2622798522164114141,
            2030148142272451724,
            12631034221630749586,
            12521714531249855181,
            4869764655816857917,
            18312880399388298885,
            1881841240505020002,
            16686085102712131293,
            1638984612454565124,
            5980766772519196081,
            14473546029553426533,
            2610255570241349719,
            4121823778233332328,
            15196027812344512481,
            17634932614139407184,
            14566629132274047837,
            6629067916649366603,
            39453246491293667,
            4118307938296638515,
            176389639877922730,
            2385844666265721927,
            14424300909552701177,
            2596064544694255252,
            9262830285738421829,
            8366979142044016136,
            12451088247268499723,
            16456341544263224076,
            405434591376297036,
            5989071471671786526,
            17922319711997177283,
            12402685985480014221,
            11440567647536028583,
            17109382986734751589,
            1165111999013207871,
            9042409351611763515,
            335396288523389342,
            6889397323074150916,
            13998858741906849976,
            15927944587197048898,
            10995067153735213576,
            13255077995174337515,
            11985913648073551062,
            16606199253171990948,
            16615211378568935152,
            13000672060735124358,
        ],
        &[
            6726150808576237754,
            9590776370558469124,
            4613857594775205869,
            5605914158178321857,
            12627075307783464761,
            456502911636413728,
            6201419543988208076,
            12457367465345491402,
            9194484469177303126,
            14469237774454463326,
            8872571916644400618,
            10371861714649740250,
            9551882050917532587,
            1418647961867356190,
            11742587182398063873,
            11015016132415914044,
            8777839015232205587,
            11080046461630228193,
            13740325869131645472,
            17716201322003396844,
            2184375889136968144,
            2744007897878529583,
            10107840174031679018,
            6807210551800087042,
            3927845063936277496,
            4657264236265855475,
            18202437017170404187,
            5332422779150911238,
            15515262280249200267,
            248667350560422394,
            3473467338029486524,
            5450666559053310869,
            9114347711968955703,
            1001965327187909086,
            9391480248060184246,
            9069754537718985217,
            6108113375902101471,
            615335597740998377,
            7341924484422171664,
            7557688311245960406,
            10629369615492290302,
            6551022068682485711,
            13009629572214277263,
            9801266711191462998,
            12475469715378400041,
            16817728089246511388,
            5318131496704799888,
            14034696640350324685,
            173195053797772988,
            9465580662794117123,
            9395502290798332505,
            172507413604644051,
            13462235362634225088,
            9267822876689174860,
            12978933587961252639,
        ],
        &[
            12372756710207599663,
            9737052986771636298,
            16735862446672978006,
            1139195382411501599,
            4025384807176208306,
            10128156782936698507,
            7100085357301525578,
            10639782880668134749,
            3972383448210895518,
            16316091826865092258,
            14638110565144662169,
            17027377005940147919,
            1984424298563015784,
            10943215534705396352,
            4761407742818533080,
            536799158643182373,
            3577912885973196462,
            8426618872156874849,
            13718975316423099691,
            9890119685862829437,
            1661366149680121631,
            18221664832966866708,
            1501909944594354041,
            15664453277583965124,
            3204453056814894230,
            11234664797845870989,
            865170089562739167,
            15036893469165510103,
            9555056751383235767,
            10793253279766963078,
            10975966662822330260,
            6344197561810800775,
            10052816891387114632,
            5489737378772055553,
            3577007843046523907,
            5025363426761413084,
            11669827237042875622,
            15298941946562692234,
            5287362685718508737,
            14167437013528222514,
            108442285706035530,
            12321077902001896155,
            4987860952577552150,
            4822344167562733502,
            5046873607058225743,
            15023457088946801127,
            10073890866526654379,
            9395914048369797781,
            12331509678230261831,
            4207910636930067124,
            13640015182632895728,
            16512336849198622133,
            750194286339711619,
            3343827571253159031,
            1179021970615059386,
            9309853498190567264,
            8323638524074867625,
            2319424490723820181,
            30896532530597901,
            1,
        ],
        &[
            16979197013852036393,
            4534519222829727882,
            5127955051936920534,
            5669732551578654322,
            13787946500638697314,
            2666880029397285003,
            18286001525339884787,
            3747928243980886079,
            5670276194023029484,
            15201258611907138387,
            6046915833599742673,
            13282924752646783062,
            18026143804639821221,
            10186643213552896189,
            17209309200088910354,
            13215180252119768256,
            1246399679408038126,
            4186715523775575401,
            16756959752065842207,
            6600048850655585015,
            4543693866439677976,
            15594233518271892275,
            15247811862837572166,
            6322126320582019533,
            649809830609098083,
            5229876751712742127,
            17719948521867410031,
            10737539927122287433,
            12476905306147178753,
            1539850235988803702,
            13572545877865905325,
            11163694899331373883,
            7882148214994127637,
            8164419266634080608,
            5782587821804107698,
            12155391719814216620,
            8020222143449740150,
            8489927257914490530,
            15688922762526028920,
            207673185831465902,
            13825819490340731785,
            14207999229863934400,
            10163751595898713958,
            17777080404153962435,
            17016927136773389232,
            3820023214020965653,
            1892439588667561762,
            16909683715900311832,
            11919385779232783009,
            11201007117990222527,
            8700983269916503928,
            5034192113764375450,
            12790439085134048151,
            17790018876931315900,
            5953092655978688336,
            10,
        ],
    );
}

#[test]
fn test_div_mod() {
    let test = |u, v, quotient, remainder| {
        let mut x = Natural::from_str(u).unwrap();
        let r = x.div_assign_mod(Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Natural::from_str(u).unwrap();
        let r = x.div_assign_mod(&Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .div_mod(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .div_mod(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Natural::from_str(u).unwrap()).div_mod(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Natural::from_str(u).unwrap()).div_mod(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let mut x = Natural::from_str(u).unwrap();
        let r = x.div_assign_rem(Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Natural::from_str(u).unwrap();
        let r = x.div_assign_rem(&Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .div_rem(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .div_rem(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Natural::from_str(u).unwrap()).div_rem(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = (&Natural::from_str(u).unwrap()).div_rem(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = BigUint::from_str(u)
            .unwrap()
            .div_mod_floor(&BigUint::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = BigUint::from_str(u)
            .unwrap()
            .div_rem(&BigUint::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug::Integer::from_str(u)
            .unwrap()
            .div_rem_floor(rug::Integer::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug::Integer::from_str(u)
            .unwrap()
            .div_rem(rug::Integer::from_str(v).unwrap());
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        //TODO
        /*
        let (q, r) = (
            Natural::from_str(u).unwrap() / v,
            Natural::from_str(u).unwrap() % v,
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r, remainder);
        */
    };
    test("0", "1", "0", "0");
    test("0", "123", "0", "0");
    test("1", "1", "1", "0");
    test("123", "1", "123", "0");
    test("123", "123", "1", "0");
    test("123", "456", "0", "123");
    test("456", "123", "3", "87");
    test("4294967295", "1", "4294967295", "0");
    test("4294967295", "4294967295", "1", "0");
    test("1000000000000", "1", "1000000000000", "0");
    test("1000000000000", "3", "333333333333", "1");
    test("1000000000000", "123", "8130081300", "100");
    test("1000000000000", "4294967295", "232", "3567587560");
    test(
        "1000000000000000000000000",
        "1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "3",
        "333333333333333333333333",
        "1",
    );
    test(
        "1000000000000000000000000",
        "123",
        "8130081300813008130081",
        "37",
    );
    test(
        "1000000000000000000000000",
        "4294967295",
        "232830643708079",
        "3167723695",
    );
    test(
        "1000000000000000000000000",
        "1234567890987",
        "810000006723",
        "530068894399",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018654",
        "779655053998040854338961591319296066",
    );
    test(
        "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
        0",
        "316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253979",
        "37816691783627670491375998320948925696",
    );
    test(
        "253640751230376270397812803167",
        "2669936877441",
        "94998781946290113",
        "1520301762334",
    );
    test(
        "3768477692975601",
        "11447376614057827956",
        "0",
        "3768477692975601",
    );
    test(
        "3356605361737854",
        "3081095617839357",
        "1",
        "275509743898497",
    );
    test(
        "1098730198198174614195",
        "953382298040157850476",
        "1",
        "145347900158016763719",
    );
    test(
        "69738658860594537152875081748",
        "69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test("123", "1000000000000000000000000", "0", "123");
}

#[test]
#[should_panic]
fn div_assign_mod_fail() {
    Natural::from(10u32).div_assign_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_assign_mod_ref_fail() {
    Natural::from(10u32).div_assign_mod(&Natural::ZERO);
}

#[test]
#[should_panic]
fn div_mod_fail() {
    Natural::from(10u32).div_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_mod_val_ref_fail() {
    Natural::from(10u32).div_mod(&Natural::ZERO);
}

#[test]
#[should_panic]
fn div_mod_ref_val_fail() {
    (&Natural::from(10u32)).div_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_mod_ref_ref_fail() {
    (&Natural::from(10u32)).div_mod(&Natural::ZERO);
}

#[test]
#[should_panic]
fn div_assign_rem_fail() {
    Natural::from(10u32).div_assign_rem(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_assign_rem_ref_fail() {
    Natural::from(10u32).div_assign_rem(&Natural::ZERO);
}

#[test]
#[should_panic]
fn div_rem_fail() {
    Natural::from(10u32).div_rem(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_rem_val_ref_fail() {
    Natural::from(10u32).div_rem(&Natural::ZERO);
}

#[test]
#[should_panic]
fn div_rem_ref_val_fail() {
    (&Natural::from(10u32)).div_rem(Natural::ZERO);
}

#[test]
#[should_panic]
fn div_rem_ref_ref_fail() {
    (&Natural::from(10u32)).div_rem(&Natural::ZERO);
}

#[test]
fn test_ceiling_div_neg_mod() {
    let test = |u, v, quotient, remainder| {
        let mut x = Natural::from_str(u).unwrap();
        let r = x.ceiling_div_assign_neg_mod(Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let mut x = Natural::from_str(u).unwrap();
        let r = x.ceiling_div_assign_neg_mod(&Natural::from_str(v).unwrap());
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);
        assert!(x.is_valid());
        assert_eq!(x.to_string(), quotient);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .ceiling_div_neg_mod(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = Natural::from_str(u)
            .unwrap()
            .ceiling_div_neg_mod(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) =
            (&Natural::from_str(u).unwrap()).ceiling_div_neg_mod(Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) =
            (&Natural::from_str(u).unwrap()).ceiling_div_neg_mod(&Natural::from_str(v).unwrap());
        assert!(q.is_valid());
        assert_eq!(q.to_string(), quotient);
        assert!(r.is_valid());
        assert_eq!(r.to_string(), remainder);

        let (q, r) = rug_ceiling_div_neg_mod(
            rug::Integer::from_str(u).unwrap(),
            rug::Integer::from_str(v).unwrap(),
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r.to_string(), remainder);

        //TODO
        /*
        let (q, r) = (
            Natural::from_str(u).unwrap().div_round(v, RoundingMode::Ceiling),
            Natural::from_str(u).unwrap().neg_mod(v),
        );
        assert_eq!(q.to_string(), quotient);
        assert_eq!(r, remainder);
        */
    };
    test("0", "1", "0", "0");
    test("0", "123", "0", "0");
    test("1", "1", "1", "0");
    test("123", "1", "123", "0");
    test("123", "123", "1", "0");
    test("123", "456", "1", "333");
    test("456", "123", "4", "36");
    test("4294967295", "1", "4294967295", "0");
    test("4294967295", "4294967295", "1", "0");
    test("1000000000000", "1", "1000000000000", "0");
    test("1000000000000", "3", "333333333334", "2");
    test("1000000000000", "123", "8130081301", "23");
    test("1000000000000", "4294967295", "233", "727379735");
    test(
        "1000000000000000000000000",
        "1",
        "1000000000000000000000000",
        "0",
    );
    test(
        "1000000000000000000000000",
        "3",
        "333333333333333333333334",
        "2",
    );
    test(
        "1000000000000000000000000",
        "123",
        "8130081300813008130082",
        "86",
    );
    test(
        "1000000000000000000000000",
        "4294967295",
        "232830643708080",
        "1127243600",
    );
    test(
        "1000000000000000000000000",
        "1234567890987",
        "810000006724",
        "704498996588",
    );
    test(
        "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "1234567890987654321234567890987654321",
        "810000006723000055638900467181273922269593923137018655",
        "454912836989613466895606299668358255",
    );
    test(
        "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\
         00",
        "316049380092839506236049380092839506176",
        "3164062526261718967339454949926851258865601262253980",
        "278232688309211835744673381771890580480",
    );
    test(
        "253640751230376270397812803167",
        "2669936877441",
        "94998781946290114",
        "1149635115107",
    );
    test(
        "3768477692975601",
        "11447376614057827956",
        "1",
        "11443608136364852355",
    );
    test(
        "3356605361737854",
        "3081095617839357",
        "2",
        "2805585873940860",
    );
    test(
        "1098730198198174614195",
        "953382298040157850476",
        "2",
        "808034397882141086757",
    );
    test(
        "69738658860594537152875081748",
        "69738658860594537152875081748",
        "1",
        "0",
    );
    test(
        "1000000000000000000000000",
        "1000000000000000000000000",
        "1",
        "0",
    );
    test("0", "1000000000000000000000000", "0", "0");
    test(
        "123",
        "1000000000000000000000000",
        "1",
        "999999999999999999999877",
    );
}

#[test]
#[should_panic]
fn ceiling_div_assign_neg_mod_fail() {
    Natural::from(10u32).ceiling_div_assign_neg_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_assign_neg_mod_ref_fail() {
    Natural::from(10u32).ceiling_div_assign_neg_mod(&Natural::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_neg_mod_fail() {
    Natural::from(10u32).ceiling_div_neg_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_neg_mod_val_ref_fail() {
    Natural::from(10u32).ceiling_div_neg_mod(&Natural::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_neg_mod_ref_val_fail() {
    (&Natural::from(10u32)).ceiling_div_neg_mod(Natural::ZERO);
}

#[test]
#[should_panic]
fn ceiling_div_neg_mod_ref_ref_fail() {
    (&Natural::from(10u32)).ceiling_div_neg_mod(&Natural::ZERO);
}

#[test]
fn limbs_two_limb_inverse_helper_properties() {
    test_properties(pairs_of_unsigneds_var_2, |&(hi, lo)| {
        let result = limbs_two_limb_inverse_helper(hi, lo);
        verify_limbs_two_limb_inverse_helper(hi, lo, result);
    });
}

#[test]
fn limbs_div_mod_three_limb_by_two_limb_properties() {
    test_properties(
        sextuples_of_limbs_var_1,
        |&(n_2, n_1, n_0, d_1, d_0, inverse)| {
            let (q, r) = limbs_div_mod_three_limb_by_two_limb(n_2, n_1, n_0, d_1, d_0, inverse);
            verify_limbs_div_mod_three_limb_by_two_limb(n_2, n_1, n_0, d_1, d_0, q, r);
        },
    );
}

#[test]
fn limbs_div_mod_by_two_limb_properties() {
    test_properties(
        triples_of_unsigned_vec_var_37,
        |(quotient_limbs_in, numerator_limbs_in, denominator_limbs)| {
            let mut quotient_limbs = quotient_limbs_in.clone();
            let mut numerator_limbs = numerator_limbs_in.clone();
            let quotient_hi = limbs_div_mod_by_two_limb(
                &mut quotient_limbs,
                &mut numerator_limbs,
                &denominator_limbs,
            );
            verify_limbs_div_mod_by_two_limb(
                &quotient_limbs_in,
                &numerator_limbs_in,
                &denominator_limbs,
                quotient_hi,
                &quotient_limbs,
                &numerator_limbs,
            );
        },
    );
}

#[test]
fn limbs_div_mod_schoolbook_properties() {
    test_properties(
        quadruples_of_three_unsigned_vecs_and_unsigned_var_1,
        |(ref quotient_limbs_in, ref numerator_limbs_in, ref denominator_limbs, inverse)| {
            let mut quotient_limbs = quotient_limbs_in.clone();
            let mut numerator_limbs = numerator_limbs_in.clone();
            let quotient_hi = _limbs_div_mod_schoolbook(
                &mut quotient_limbs,
                &mut numerator_limbs,
                denominator_limbs,
                *inverse,
            );
            verify_limbs_div_mod_schoolbook(
                quotient_limbs_in,
                numerator_limbs_in,
                denominator_limbs,
                quotient_hi,
                &quotient_limbs,
                &numerator_limbs,
            );
        },
    );
}

#[test]
fn limbs_div_mod_divide_and_conquer_helper_properties() {
    test_properties_custom_scale(
        128,
        quintuples_of_three_unsigned_vecs_unsigned_and_unsigned_vec_var_1,
        |(
            ref quotient_limbs_in,
            ref numerator_limbs_in,
            ref denominator_limbs,
            inverse,
            ref scratch_in,
        )| {
            let mut quotient_limbs = quotient_limbs_in.clone();
            let mut numerator_limbs = numerator_limbs_in.clone();
            let mut scratch = scratch_in.clone();
            _limbs_div_mod_divide_and_conquer_helper(
                &mut quotient_limbs,
                &mut numerator_limbs,
                denominator_limbs,
                *inverse,
                &mut scratch,
            );
        },
    );
}

fn div_mod_properties_helper(x: &Natural, y: &Natural) {
    let mut mut_x = x.clone();
    let remainder = mut_x.div_assign_mod(y);
    assert!(mut_x.is_valid());
    assert!(remainder.is_valid());
    let quotient = mut_x;

    let mut mut_x = x.clone();
    let remainder_alt = mut_x.div_assign_mod(y.clone());
    let quotient_alt = mut_x;
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.div_mod(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.div_mod(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().div_mod(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().div_mod(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let mut quotient_alt = x.clone();
    let remainder_alt = quotient_alt.div_assign_rem(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let mut quotient_alt = x.clone();
    let remainder_alt = quotient_alt.div_assign_rem(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.div_rem(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.div_rem(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().div_rem(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().div_rem(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    //TODO
    /*
    let (quotient_alt, remainder_alt) = (x / y, x % y);
    assert_eq!(quotient_alt, quotient);
    assert_eq!(remainder_alt, remainder);
    */

    let (num_quotient, num_remainder) = natural_to_biguint(x).div_mod_floor(&natural_to_biguint(y));
    assert_eq!(biguint_to_natural(&num_quotient), quotient);
    assert_eq!(biguint_to_natural(&num_remainder), remainder);

    let (num_quotient, num_remainder) = natural_to_biguint(x).div_rem(&natural_to_biguint(y));
    assert_eq!(biguint_to_natural(&num_quotient), quotient);
    assert_eq!(biguint_to_natural(&num_remainder), remainder);

    let (rug_quotient, rug_remainder) =
        natural_to_rug_integer(x).div_rem_floor(natural_to_rug_integer(y));
    assert_eq!(rug_integer_to_natural(&rug_quotient), quotient);
    assert_eq!(rug_integer_to_natural(&rug_remainder), remainder);

    let (rug_quotient, rug_remainder) =
        natural_to_rug_integer(x).div_rem(natural_to_rug_integer(y));
    assert_eq!(rug_integer_to_natural(&rug_quotient), quotient);
    assert_eq!(rug_integer_to_natural(&rug_remainder), remainder);

    assert!(remainder < *y);
    assert_eq!(quotient * y + remainder, *x);
}

#[test]
fn div_mod_properties() {
    test_properties_custom_scale(
        128,
        pairs_of_natural_and_positive_natural,
        |&(ref x, ref y)| {
            div_mod_properties_helper(x, y);
        },
    );

    test_properties_custom_scale(
        128,
        pairs_of_natural_and_positive_natural_var_1,
        |&(ref x, ref y)| {
            div_mod_properties_helper(x, y);
        },
    );

    test_properties(naturals, |n| {
        let (q, r) = n.div_mod(Natural::ONE);
        assert_eq!(q, *n);
        assert_eq!(r, 0 as Limb);
    });

    test_properties(positive_naturals, |n| {
        assert_eq!(n.div_mod(Natural::ONE), (n.clone(), Natural::ZERO));
        assert_eq!(n.div_mod(n), (Natural::ONE, Natural::ZERO));
        assert_eq!(Natural::ZERO.div_mod(n), (Natural::ZERO, Natural::ZERO));
        if *n > 1 as Limb {
            assert_eq!(Natural::ONE.div_mod(n), (Natural::ZERO, Natural::ONE));
        }
    });
}

fn ceiling_div_neg_mod_properties_helper(x: &Natural, y: &Natural) {
    let mut mut_x = x.clone();
    let remainder = mut_x.ceiling_div_assign_neg_mod(y);
    assert!(mut_x.is_valid());
    assert!(remainder.is_valid());
    let quotient = mut_x;

    let mut mut_x = x.clone();
    let remainder_alt = mut_x.ceiling_div_assign_neg_mod(y.clone());
    let quotient_alt = mut_x;
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.ceiling_div_neg_mod(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.ceiling_div_neg_mod(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().ceiling_div_neg_mod(y);
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    let (quotient_alt, remainder_alt) = x.clone().ceiling_div_neg_mod(y.clone());
    assert!(quotient_alt.is_valid());
    assert_eq!(quotient_alt, quotient);
    assert!(remainder_alt.is_valid());
    assert_eq!(remainder_alt, remainder);

    //TODO
    /*
    let (quotient_alt, remainder_alt) = (x.div_round(y, RoundingMode::Ceiling), x.neg_mod(y));
    assert_eq!(quotient_alt, quotient);
    assert_eq!(remainder_alt, remainder);
    */

    let (rug_quotient, rug_remainder) =
        rug_ceiling_div_neg_mod(natural_to_rug_integer(x), natural_to_rug_integer(y));
    assert_eq!(rug_integer_to_natural(&rug_quotient), quotient);
    assert_eq!(rug_integer_to_natural(&rug_remainder), remainder);

    assert!(remainder < *y);
    assert_eq!(quotient * y - remainder, *x);
}

#[test]
fn ceiling_div_neg_mod_limb_properties() {
    test_properties(pairs_of_natural_and_positive_natural, |&(ref x, ref y)| {
        ceiling_div_neg_mod_properties_helper(x, y);
    });

    test_properties(
        pairs_of_natural_and_positive_natural_var_1,
        |&(ref x, ref y)| {
            ceiling_div_neg_mod_properties_helper(x, y);
        },
    );

    test_properties(naturals, |n| {
        let (q, r) = n.ceiling_div_neg_mod(Natural::ONE);
        assert_eq!(q, *n);
        assert_eq!(r, 0 as Limb);
    });

    test_properties(positive_naturals, |n| {
        assert_eq!(
            n.ceiling_div_neg_mod(Natural::ONE),
            (n.clone(), Natural::ZERO)
        );
        assert_eq!(n.ceiling_div_neg_mod(n), (Natural::ONE, Natural::ZERO));
        assert_eq!(
            Natural::ZERO.ceiling_div_neg_mod(n),
            (Natural::ZERO, Natural::ZERO)
        );
        if *n > 1 as Limb {
            assert_eq!(
                Natural::ONE.ceiling_div_neg_mod(n),
                (Natural::ONE, n - 1 as Limb)
            );
        }
    });
}
