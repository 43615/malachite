use common::{test_properties, test_properties_custom_scale};
use malachite_base::comparison::Max;
use malachite_base::num::basic::traits::{One, Zero};
use malachite_nz::natural::arithmetic::mul::fft::_limbs_mul_greater_to_out_fft;
#[cfg(not(feature = "32_bit_limbs"))]
use malachite_nz::natural::arithmetic::mul::fft::{
    _limbs_mul_fft_fft, _limbs_mul_fft_internal, _limbs_mul_fft_inverse,
    _limbs_mul_fft_normalize_mod_f,
};
#[cfg(not(feature = "32_bit_limbs"))]
use malachite_nz::natural::arithmetic::mul::mul_mod::_limbs_mul_mod_limb_width_to_n_minus_1;
use malachite_nz::natural::arithmetic::mul::toom::{
    _limbs_mul_greater_to_out_toom_22, _limbs_mul_greater_to_out_toom_22_scratch_size,
    _limbs_mul_greater_to_out_toom_32, _limbs_mul_greater_to_out_toom_32_scratch_size,
    _limbs_mul_greater_to_out_toom_33, _limbs_mul_greater_to_out_toom_33_scratch_size,
    _limbs_mul_greater_to_out_toom_42, _limbs_mul_greater_to_out_toom_42_scratch_size,
    _limbs_mul_greater_to_out_toom_43, _limbs_mul_greater_to_out_toom_43_scratch_size,
    _limbs_mul_greater_to_out_toom_44, _limbs_mul_greater_to_out_toom_44_scratch_size,
    _limbs_mul_greater_to_out_toom_52, _limbs_mul_greater_to_out_toom_52_scratch_size,
    _limbs_mul_greater_to_out_toom_53, _limbs_mul_greater_to_out_toom_53_scratch_size,
    _limbs_mul_greater_to_out_toom_54, _limbs_mul_greater_to_out_toom_54_scratch_size,
    _limbs_mul_greater_to_out_toom_62, _limbs_mul_greater_to_out_toom_62_scratch_size,
    _limbs_mul_greater_to_out_toom_63, _limbs_mul_greater_to_out_toom_63_scratch_size,
    _limbs_mul_greater_to_out_toom_6h, _limbs_mul_greater_to_out_toom_6h_scratch_size,
    _limbs_mul_greater_to_out_toom_8h, _limbs_mul_greater_to_out_toom_8h_scratch_size,
};
use malachite_nz::natural::arithmetic::mul::{
    _limbs_mul_greater_to_out_basecase, _limbs_mul_greater_to_out_basecase_mem_opt, limbs_mul,
    limbs_mul_greater, limbs_mul_greater_to_out, limbs_mul_same_length_to_out, limbs_mul_to_out,
};
use malachite_nz::natural::Natural;
use malachite_nz::platform::{DoubleLimb, Limb};
use malachite_test::common::{
    biguint_to_natural, natural_to_biguint, natural_to_rug_integer, rug_integer_to_natural,
};
use malachite_test::inputs::base::{
    pairs_of_unsigned_vec_var_4, pairs_of_unsigned_vec_var_5, pairs_of_unsigneds,
    triples_of_unsigned_vec_var_10, triples_of_unsigned_vec_var_11, triples_of_unsigned_vec_var_12,
    triples_of_unsigned_vec_var_13, triples_of_unsigned_vec_var_14, triples_of_unsigned_vec_var_15,
    triples_of_unsigned_vec_var_16, triples_of_unsigned_vec_var_17, triples_of_unsigned_vec_var_18,
    triples_of_unsigned_vec_var_19, triples_of_unsigned_vec_var_20, triples_of_unsigned_vec_var_21,
    triples_of_unsigned_vec_var_22, triples_of_unsigned_vec_var_23, triples_of_unsigned_vec_var_24,
    triples_of_unsigned_vec_var_25, triples_of_unsigned_vec_var_26,
};
use malachite_test::inputs::natural::{
    naturals, pairs_of_natural_and_unsigned, pairs_of_naturals, triples_of_naturals,
};
use num::BigUint;
use rug;
use std::str::FromStr;

fn series(start: Limb, len: usize) -> Vec<Limb> {
    (start..start + len as Limb).collect()
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, result: Vec<Limb>| {
        assert_eq!(limbs_mul_greater(&xs, &ys), result);
    };
    test(vec![2], vec![3], vec![6, 0]);
    test(vec![1; 3], series(1, 3), vec![1, 3, 6, 5, 3, 0]);
    test(series(1, 3), vec![6, 7], vec![6, 19, 32, 21, 0]);
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0],
    );
    test(vec![0xffff_ffff], vec![1], vec![0xffff_ffff, 0]);
    test(vec![0xffff_ffff], vec![0xffff_ffff], vec![1, 0xffff_fffe]);
    test(
        vec![0xffff_ffff; 3],
        vec![0xffff_ffff; 3],
        vec![1, 0, 0, 0xffff_fffe, 0xffff_ffff, 0xffff_ffff],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn test_limbs_mul_greater_fail_1() {
    limbs_mul_greater(&[6, 7], &[1, 2, 3]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn test_limbs_mul_greater_fail_2() {
    limbs_mul_greater(&[6, 7], &[]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, result: Vec<Limb>| {
        assert_eq!(limbs_mul(&xs, &ys), result);
    };
    test(vec![2], vec![3], vec![6, 0]);
    test(vec![1; 3], series(1, 3), vec![1, 3, 6, 5, 3, 0]);
    test(series(1, 3), vec![6, 7], vec![6, 19, 32, 21, 0]);
    test(vec![6, 7], series(1, 3), vec![6, 19, 32, 21, 0]);
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0],
    );
    test(vec![0xffff_ffff], vec![1], vec![0xffff_ffff, 0]);
    test(vec![0xffff_ffff], vec![0xffff_ffff], vec![1, 0xffff_fffe]);
    test(
        vec![0xffff_ffff; 3],
        vec![0xffff_ffff; 3],
        vec![1, 0, 0, 0xffff_fffe, 0xffff_ffff, 0xffff_ffff],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn test_limbs_mul_fail() {
    limbs_mul(&[6, 7], &[]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_same_length_to_out() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.clone();
        limbs_mul_same_length_to_out(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
    };
    test(vec![2], vec![3], vec![10; 3], vec![6, 0, 10]);
    test(
        vec![1; 3],
        series(1, 3),
        vec![5; 8],
        vec![1, 3, 6, 5, 3, 0, 5, 5],
    );
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10; 7],
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![1],
        vec![10; 3],
        vec![0xffff_ffff, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![0xffff_ffff],
        vec![10; 4],
        vec![1, 0xffff_fffe, 10, 10],
    );
    test(
        vec![0xffff_ffff; 3],
        vec![0xffff_ffff; 3],
        vec![10; 6],
        vec![1, 0, 0, 0xffff_fffe, 0xffff_ffff, 0xffff_ffff],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_same_length_to_out_fail_1() {
    let mut out = vec![10, 10, 10, 10, 10];
    limbs_mul_same_length_to_out(&mut out, &[6, 7], &[1, 2, 3]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_same_length_to_out_fail_2() {
    let mut out = vec![10, 10, 10];
    limbs_mul_same_length_to_out(&mut out, &[6, 7], &[1, 2]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_same_length_to_out_fail_3() {
    let mut out = vec![10];
    limbs_mul_same_length_to_out(&mut out, &[], &[]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out() {
    let test =
        |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, highest_result_limb, out_after| {
            let mut out = out_before.clone();
            _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
            assert_eq!(out, out_after);
            let mut out = out_before.clone();
            assert_eq!(
                limbs_mul_greater_to_out(&mut out, &xs, &ys),
                highest_result_limb
            );
            assert_eq!(out, out_after);
        };
    test(vec![2], vec![3], vec![10; 3], 0, vec![6, 0, 10]);
    test(
        vec![1; 3],
        series(1, 3),
        vec![5; 8],
        0,
        vec![1, 3, 6, 5, 3, 0, 5, 5],
    );
    test(
        series(1, 3),
        vec![6, 7],
        vec![0; 5],
        0,
        vec![6, 19, 32, 21, 0],
    );
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10; 7],
        0,
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![1],
        vec![10; 3],
        0,
        vec![0xffff_ffff, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![0xffff_ffff],
        vec![10; 4],
        0xffff_fffe,
        vec![1, 0xffff_fffe, 10, 10],
    );
    test(
        vec![0xffff_ffff; 3],
        vec![0xffff_ffff; 3],
        vec![10; 6],
        0xffff_ffff,
        vec![1, 0, 0, 0xffff_fffe, 0xffff_ffff, 0xffff_ffff],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out() {
    let test = |xs: Vec<Limb>,
                ys: Vec<Limb>,
                out_before: Vec<Limb>,
                highest_result_limb,
                out_after: Vec<Limb>| {
        let mut out = out_before.clone();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.clone();
        assert_eq!(
            limbs_mul_greater_to_out(&mut out, &xs, &ys),
            highest_result_limb
        );
        assert_eq!(out, out_after);
    };
    test(
        vec![
            12709525342598979476,
            11509224300783138838,
            393964466388471327,
            14232928317295888119,
            13732076968605655238,
            15707747516397285107,
            8732499155930007762,
            9865419549041312495,
            1072105962419307309,
            17879862180104468293,
            17068561868445402638,
            1866096115219256579,
            6855809432664356654,
            1393588600207482081,
            3815615263372249309,
            4991042746319579278,
            15465001638246553057,
            16087255091514657862,
            5044736888141764583,
            2779747905405388451,
            583627419881315049,
            4335440233116895431,
            9498366494409866085,
            8645413868323766569,
            10728932435460960803,
            2150088858744686298,
            9562258835198494013,
            17827191588813955307,
            13784645620229731318,
            6296382068077415813,
            11689157886369173742,
            17754283123435968230,
            1461090916898201642,
            1288610558427232175,
            8104103888086828127,
            8032176301470720968,
            12200951204181999648,
            9485404571555436368,
            10222400990562648891,
            7599079551870785840,
            11203522977648266038,
            18338050175108207759,
            12077517359207243953,
            1611826255828631363,
            15837930674386751191,
            461582836356148934,
            16860704548252932358,
            6041830073720446893,
            16833467135075592988,
            17496069201595551026,
            10318992522772404757,
            13524041658187206186,
            4506190253313254923,
            17231310439197044711,
            13546843641632582646,
            7651927160556964586,
            9190936365032409113,
            9913829309881494193,
            12083378901909297431,
            287809474670991447,
            7728504523588277111,
            16741959317437359789,
            9529628049862654500,
            13419553383911388725,
            13376506161484177119,
            8176094358898406545,
            13190641351956097350,
            12568817836646213483,
            3486855157615498387,
            14702408831781542831,
            98979558380456360,
            13178740567667926424,
            17968226918253726036,
            9245411514261104062,
            2907160002341084957,
            1980943369383764848,
            6564658997896463013,
            13002525217264158147,
            444335199954317567,
            16863109666887451301,
            11108312108618761726,
            7630498129836691848,
            5435171385264263429,
            10900954800466810672,
            16615568172072435554,
            4587778094537619469,
            10961411668824294491,
            17076006711925106918,
            5351453460500307468,
            7629258051101663482,
            16987233075558685907,
            7043270533100406405,
            1951394976862135309,
            13689790855612457174,
            2278410054587042806,
            17001418508549255568,
            11660613606297735566,
            2855471124776808043,
            10065175989746288214,
            5055380914672426055,
            14126789454240780537,
            12269074817478677711,
            15318371572624008687,
            17454608042943339898,
            266175370449515926,
            10258065246409153340,
            7913204199005555677,
            2015162987422567864,
            947599677954716876,
            4742046749175767719,
            4638837750457895566,
            7651567606901939182,
            1517253577417508168,
            10046266355925262869,
            17517100300192594127,
            1840911236085514585,
            17925925769498956584,
            649534223875437606,
            4629497761671206138,
            6940070820665949971,
            11499097596331562367,
            6066662975772729994,
            14012285030054181,
            15069455665359536649,
            15693110947967738351,
            6137496527357766025,
            17475548660925055392,
            7927767715587303464,
            8531250928287116369,
            11631019584025111086,
            14052618820385867457,
            3118784937861555333,
            183376537996253187,
            5402208906954882112,
            4415682544496910978,
            4679985880085587510,
            8446593383458511654,
            15604884470214334395,
            1138627504082666786,
            10518517338133402469,
            4864527599992532396,
            13936709675277621349,
            564858321719103528,
            17954444276502582707,
            7973580172007214272,
            5448002835725952206,
            17643582902922581336,
            6555152033284063414,
            10046934352485272915,
            13709275446788968044,
            3781650587286942277,
            856963687705102140,
            14231130335064067998,
            12012182879109532509,
            14408852620208381144,
            18399276894609882283,
            8786560043544514971,
            9040897797784271497,
            3289492106827693022,
            2537349882995177,
            9547621122715901978,
            18031028021813298205,
            13759002194232082515,
            8230796682226694274,
            16497307259652601605,
            4532459299949788115,
            9096244343722808065,
            15835940740299471650,
            16962714874349511272,
            12751247365216834654,
            5665483802634541323,
            5932524403187765899,
            9724384992325030819,
            4567260165559481416,
            12988617208150638305,
            3810267272444218110,
            12215376695703433417,
            15917770368925117452,
            10076439022504697381,
            15419145301042845244,
            12520526582226591499,
            10731090420480517823,
            7095369748974936538,
            7265727720840614264,
            14328612713128953576,
            9796482770007505116,
            12823579117053411854,
            5055821064893108365,
            12630218511428402185,
            5189066330700437332,
            5109762584664698804,
            10723647767885063411,
            15665488082047274789,
            4569259999401990745,
            3735809282876517401,
            7285645596632892122,
            10962161595160119179,
            4816357354602339409,
            10873333778222769846,
            8013894684430460951,
            1877066355845544058,
            9184544411342906577,
            1919785302854216344,
            11743122258369849152,
            3429022440866576828,
            7006536176872515230,
            12354403703503061654,
            16589390678996741825,
            8567087982659180500,
            8236943971468579104,
            14606686909208062275,
            4461894282559697271,
            2623848805529273446,
            6820927267034378486,
            14393599619569715182,
            5199894747923716756,
            206321364421131251,
            4071363758717862161,
            11965914866997389305,
            8109905844769656284,
            3492539957359367736,
            16856371139562646083,
            4333218987558602531,
            16089995180748288161,
            11191427142864224026,
            2622884336931596940,
            16105201810330583174,
            11381683384063743452,
            7873797126730706201,
            11178731223505120377,
            16800978016652635785,
            13461685021093913844,
            3055116765865974959,
            3602813646007838280,
            829147354810404950,
            4780507430409308744,
            18314860632940156926,
            6995096023652594133,
            5759566466885931830,
            4840076000542784388,
        ],
        vec![
            15245088662193948010,
            854969528224537163,
            192457876290468361,
            3156774054099849881,
            10102117358735393641,
            13923135497401538045,
            15603007686998930972,
            3707765480829539463,
            1075990372015045994,
            4440028045035707188,
            779932550205535682,
            13284596850012603887,
            13447370325749987403,
            10657005451799608034,
            17344058779081327933,
            1801131630646010099,
            17879455113972297046,
            1049662270419803525,
            17887003202529550415,
            13730724178286439296,
            3086493866184691051,
            7455503161286080904,
            14945249663072669446,
            7413071270018261565,
            8165098975144402988,
            15667870805615006559,
            4534237642686726425,
            5675059133984408369,
            13542693529471369730,
            4650690134857994243,
            10593876026982724440,
            8719234160809710444,
            7340192483727047710,
            2225660849988538666,
            3260628781823840386,
            14784063213821786553,
            13478324037708856111,
            6239844587086244103,
            14508626048519473050,
            11443816492520902359,
            7084448144752764341,
            11673478635762496725,
            13444020463604694513,
            1798574113181758005,
            15195278749704748030,
            3490272214933312037,
            15632500462832370824,
            9808665338648603851,
            6377980234800091876,
            11306384233660763805,
            6392788317448223882,
            8005181869701567455,
            4601526777105113530,
            9348184476999479133,
            16105441815997897842,
            15373735633778437011,
            11733794529384137433,
            769246272107807645,
            2922899274256775805,
            16218486247871807873,
            10650657974127272786,
            579665301817927565,
            6403006378940431337,
            10150254532952843560,
            3736822004545760197,
            10244207440138560761,
            16631379436671010056,
            17418302422321190629,
            4844439457855539440,
            9662799133272397874,
            11622100630061039998,
            11017257064923257696,
            14025546287952884200,
            1170766120552674008,
            4852413824670160293,
            18019298735978800767,
            14042374992041286164,
            6103187929964524269,
            5988592592688695870,
            5579172720281387479,
            10738878044274955012,
            8401646271610146442,
            12016061916593958227,
            14752402557741497038,
            5053283107906893264,
            12910662726197463795,
            787526459034857809,
            10304827788120361107,
            8387521101013404665,
            6030209567663971422,
            7511028869236306454,
            11105170944119024313,
            2911699195421772292,
            11710398806568443147,
            7599646386487625804,
            2146501359265516686,
            1193294087739295886,
            16419769173966961854,
            14779980297792837632,
            6286361066120350249,
            8246126699673376536,
            2339493649448723726,
            12383521129608538925,
            17459816050942292574,
            7213741082075285427,
            14702683527305456088,
            17849030573001874153,
            3273901152373442943,
            10086273715179643444,
            14351251935054659627,
            3067622597087477151,
            4241957707372911307,
            16686513037697490920,
            1503886102490162470,
            4222986769290077389,
            17209928444872897872,
            10064374817012298812,
            1391022681726221923,
            3482099619102309134,
            151151415131464647,
            5477310851692317777,
            8185741896741403527,
            12297179519749775078,
            6980896315258250234,
            5491311995173541969,
            10908311176531272611,
            15140263006374103771,
            16292302828281485620,
            13488663273854028028,
            17078235461511918753,
            523009743565281503,
            11105648925812514991,
            13827146014280242829,
        ],
        vec![10; 373],
        3627981030815073084,
        vec![
            10242139703917377352,
            6869501223013262871,
            3374240433299030218,
            2448664517749959925,
            12614665088252879609,
            15275142410865499832,
            7415514779145416012,
            4634939093621563784,
            14236482271744498259,
            16987935748141823121,
            9662195261206294164,
            8327530275898959224,
            17948858401312480900,
            16590992031072707948,
            8981557837131782478,
            17292811815398261598,
            10343772151713015660,
            16403800522193054061,
            11001578312297934300,
            9055563331722809276,
            6861684031441187837,
            6179379396114830115,
            15119399843907730738,
            2747263417069121706,
            12218921993633141137,
            15314449116975726182,
            2870623933631129133,
            8433855307245599470,
            9663369547205952712,
            16656478013118492468,
            5014296474163082063,
            15045852603430413673,
            9039056709562337243,
            1775730247666171519,
            10284009922885822735,
            17264560580274867574,
            8659184543116501827,
            9757501208876960807,
            8107556209186377816,
            13981920571894003246,
            8697727621393221097,
            10111281749746035823,
            11547580803378751509,
            9866091897888262831,
            6932444770006022090,
            12886358055723945255,
            5304800874292271788,
            11523612872653318479,
            3158091624397075356,
            17376725070179056084,
            11353224313201827872,
            17568378701446022201,
            7083677611886335059,
            16630882804589833859,
            17071293908015663903,
            3335332823966517520,
            4551571010812166323,
            13956655949392024934,
            11137278406051829526,
            4896962372622758702,
            11813643533502615793,
            4581901117239147425,
            14593775693535083700,
            1510447605784811068,
            5229627540215802358,
            627282762635294446,
            4791499629805752429,
            10361188936025453248,
            4774699819640096953,
            13333081235316911046,
            10942108924892665866,
            16109048665458409419,
            15314689190690266823,
            7310144211471143550,
            16609282512397289062,
            4726986969285156208,
            8190850143304789515,
            1542721709305293842,
            12747051062417360628,
            10431119479932549840,
            5201202511017795553,
            7741819653940246707,
            2687570019862487900,
            6488374897263692453,
            13582359095544274953,
            14484022084752061384,
            5515018660843652873,
            8092760845580227599,
            2766454334996797883,
            18180569531864904251,
            3565091373050863067,
            12322298177624181037,
            11958316134617603606,
            9878952926876342598,
            5302556749713428981,
            8825508234500799831,
            11910303768250068310,
            326451074713852933,
            396115137030276241,
            12871099826433440706,
            4304686608856751519,
            13291683117058685204,
            9284558513918029302,
            3718112862893900571,
            9149607979222078382,
            16527849990011073270,
            7727656976171348203,
            6573616922619656711,
            16034045732340296623,
            5589930567903701070,
            10683802387965352692,
            2587318764516570107,
            10209376077208389402,
            17079775160514374021,
            6530000943687323192,
            3718180221149684880,
            18189517521112254114,
            5384059937475335410,
            609609335008271023,
            3896142000481106293,
            16658219747219000806,
            13778288993082074923,
            5582595801212065024,
            14131451705219445462,
            359265879248692883,
            16936956071544174710,
            15873091614777053247,
            2434660658463974075,
            2592075329848798604,
            14194422636533088807,
            7167203043317150959,
            11315395284250045497,
            2099964792961604585,
            1566230315841355073,
            16092624371341405050,
            11961408413498591004,
            16535764519833385727,
            16358286323170046012,
            460344037919559599,
            14169011134767857411,
            14106023301858944314,
            9862229088119368783,
            3357504073133417614,
            1102923706048286862,
            13563108311952119833,
            2143046275198271992,
            3979966820061122245,
            9996599392497104038,
            18113381312649782606,
            2789577810558634539,
            2505893204182156006,
            5459782976231228406,
            14606983256382437526,
            17289593816561860577,
            18339393907946617355,
            2258995667690444422,
            8894197183418385086,
            18341894792090069275,
            11391274557331577482,
            1810514891585419128,
            7148289154353071487,
            2119113819713138874,
            10271861970912805029,
            7676899172550981679,
            8624446484952065684,
            5656835932522160843,
            16121420157925734770,
            14082469678115799904,
            10255722969024722343,
            1662291548355896945,
            6389399781869176377,
            12541949260215847692,
            7144384677827477175,
            7282727395448468407,
            12150328138548453752,
            3472826938551266818,
            3748717285404782518,
            4780951876470252398,
            16824789631565337027,
            15839657600800222362,
            10490421032004326835,
            13577644447718918237,
            6631866657761640573,
            981988710472148081,
            2178386723930299579,
            4509700998976576445,
            7085230111532242363,
            15742412314382227975,
            1728841640197493179,
            9413625884895979097,
            17011657766150783108,
            7453240289129863943,
            14356227040755802558,
            8727877790598607374,
            6442754498625288772,
            7392839418676330133,
            14897473376443001590,
            6366239299333724836,
            9325048183999746407,
            3440007856498006275,
            15045549040986890155,
            14490217742673747202,
            15278519326741232153,
            6554990600736077400,
            14130125167723787542,
            13808426692316226071,
            5353065033486249758,
            1150929840748552011,
            12174365818942611676,
            8325746398590604908,
            1113711086245528668,
            10314080011282631969,
            8859099728742225981,
            17921003815641223868,
            3105591894080053316,
            15297241643811159913,
            17457505649562044023,
            2057745826478669102,
            4884750341838598362,
            16356083315993976675,
            9101726946186468401,
            14354106624548323412,
            9370983965070459320,
            7738440263290367492,
            8917029115165607445,
            2195272365194297011,
            9558528105439905340,
            8030625988101552152,
            3397298078799745318,
            9736711397155048940,
            2460615496131263256,
            15140262761582421804,
            6475970420636983572,
            15248938774827950731,
            3601954052709238929,
            3331181884995306372,
            5102925218725345470,
            3667800919502192980,
            3004240798812901640,
            5533280375618915829,
            5107586811468410440,
            10224278806003351694,
            6476631719990351159,
            2003572440276248817,
            12145591924789065893,
            12519472837420433198,
            17782311381537397376,
            5661681639850380779,
            10364042884708771431,
            1695509166589750758,
            14618040013233272293,
            13897753646384009557,
            3750141258844328560,
            2521464661853413252,
            6278261092787958914,
            10406656955141036872,
            3275028812461691395,
            12925016960899871398,
            9841323801652199824,
            6731798363764447936,
            16237427233498849184,
            18347750732935739357,
            13607917507344538804,
            7384152260726915035,
            5463321849210106032,
            16371815515677214027,
            8832632406517327899,
            8268519393788774229,
            3669915584804849690,
            1269556794163966064,
            17809810670965530193,
            15840056410475484689,
            4076484974516366053,
            9606036112446697020,
            4868364087195523723,
            2058736710151928793,
            10897356652781847288,
            465078533977740804,
            16624721881706870960,
            11964802914009109220,
            16816447700891974174,
            3690088264896558634,
            7147174284749790878,
            9145833698882950169,
            8784425020769374260,
            1861407397398056953,
            12834090279159906525,
            7662444631348458158,
            14132542110004422269,
            9328868421834468934,
            16741858393921937122,
            15694875428320019398,
            14994603044491181705,
            9746169230120941506,
            7938113624909327958,
            13340368850853929072,
            7651461065837541114,
            4476063835934825867,
            8693815106327834329,
            4988903731011095573,
            4462304735549234904,
            8428813472483033040,
            4788353502021621362,
            12565779699104064716,
            3068625859269266553,
            2676497072041684077,
            6224517250248606913,
            10155182336700912649,
            4789285195609433162,
            16223567669480014548,
            7428311545244653529,
            16614898660347133660,
            18158662267123053326,
            3623664384860961629,
            7652479537264294496,
            8606705184150939035,
            8275137754514789786,
            1964775551555279291,
            1438900651657172959,
            17673106577623030111,
            6973507447558830112,
            15423010115647882749,
            3472057791767023426,
            5848284772473138216,
            2890665771216618892,
            9314934874321984084,
            8734072522843080836,
            14327114341827253389,
            4434569283869444664,
            12983438456823218137,
            10233784466676928341,
            16291964559077701283,
            9678367439362828938,
            7822571001351685129,
            15858728294074423230,
            10852593355325202465,
            12352889154252904310,
            12472638922147628465,
            858263613939813395,
            12316650043304516782,
            15905737765854758582,
            5901848627660760442,
            8757164316447879955,
            1327307879496998670,
            16419197412056777506,
            11241454192064071141,
            5669708276938693043,
            3575232442870910395,
            17428985550073658716,
            15774059386607531181,
            16583828728361725400,
            2690073375909258220,
            3913838352065921651,
            11930346452395449553,
            7508883471181453189,
            1979183109855731075,
            17205167019849574415,
            6202127415457809639,
            15616037631795263171,
            13758692529633453573,
            4703023550466089121,
            6440538290327762255,
            4617056828336967974,
            1016260815990065725,
            10542530738319933236,
            13839074645977905740,
            6298401080101494064,
            18179185785092266771,
            808757022663954675,
            655320984483308172,
            6492165610369841580,
            10622849106810507658,
            3627981030815073084,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_fail_1() {
    let mut out = vec![10; 4];
    let xs = series(6, 3);
    _limbs_mul_greater_to_out_basecase(&mut out, &xs, &[1, 2]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_fail_2() {
    let mut out = vec![10; 5];
    let ys = series(1, 3);
    _limbs_mul_greater_to_out_basecase(&mut out, &[6, 7], &ys);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_fail_3() {
    let mut out = vec![10; 3];
    _limbs_mul_greater_to_out_basecase(&mut out, &[6, 7], &[]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_to_out() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.clone();
        limbs_mul_to_out(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
    };
    test(vec![2], vec![3], vec![10; 3], vec![6, 0, 10]);
    test(
        vec![1; 3],
        series(1, 3),
        vec![5; 8],
        vec![1, 3, 6, 5, 3, 0, 5, 5],
    );
    test(series(1, 3), vec![6, 7], vec![0; 5], vec![6, 19, 32, 21, 0]);
    test(vec![6, 7], series(1, 3), vec![0; 5], vec![6, 19, 32, 21, 0]);
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10; 7],
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![1],
        vec![10; 3],
        vec![0xffff_ffff, 0, 10],
    );
    test(
        vec![0xffff_ffff],
        vec![0xffff_ffff],
        vec![10; 4],
        vec![1, 0xffff_fffe, 10, 10],
    );
    test(
        vec![0xffff_ffff; 3],
        vec![0xffff_ffff; 3],
        vec![10; 6],
        vec![1, 0, 0, 0xffff_fffe, 0xffff_ffff, 0xffff_ffff],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_to_out_fail_1() {
    let mut out = vec![10, 10, 10];
    limbs_mul_to_out(&mut out, &[6, 7], &[1, 2]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_to_out_fail_2() {
    let mut out = vec![10, 10, 10, 10];
    limbs_mul_to_out(&mut out, &[], &[1, 2, 3]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_to_out_fail_3() {
    let mut out = vec![10, 10, 10, 10];
    limbs_mul_to_out(&mut out, &[1, 2, 3], &[]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_22() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_22_scratch_size(xs.len())];
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // s != n
    // !(xs0[s] == 0 && limbs_cmp_same_length(&xs0[..s], xs1) == Ordering::Less)
    // t != n
    // limbs_test_zero(&ys0[t..]) && limbs_cmp_same_length(&ys0[..t], ys1) != Ordering::Less
    // s <= t
    // !v_neg_1_neg
    // carry <= 2
    test(
        series(2, 3),
        series(3, 3),
        vec![10; 6],
        vec![6, 17, 34, 31, 20, 0],
    );
    // xs0[s] == 0 && limbs_cmp_same_length(&xs0[..s], xs1) == Ordering::Less
    // v_neg_1_neg
    //test(&[2, 0, 4], &[3, 4, 5], &[10, 10, 10, 10, 10, 10], vec![6, 8, 22, 16, 20, 0]);
    test(
        vec![1; 3],
        series(1, 3),
        vec![5; 8],
        vec![1, 3, 6, 5, 3, 0, 5, 5],
    );
    // s == n
    // limbs_cmp_same_length(ys0, ys1) != Ordering::Less
    // t == n
    // limbs_cmp_same_length(ys0, ys1) == Ordering::Less
    test(
        vec![1; 4],
        series(1, 4),
        vec![5; 8],
        vec![1, 3, 6, 10, 9, 7, 4, 0],
    );
    // limbs_cmp_same_length(&a0[..n], &a1[..n]) == Ordering::Less
    // limbs_cmp_same_length(&b0[..n], &b1[..n]) != Ordering::Less
    test(
        series(1, 4),
        vec![1; 4],
        vec![5; 8],
        vec![1, 3, 6, 10, 9, 7, 4, 0],
    );
    // limbs_test_zero(&ys0[t..]) && limbs_cmp_same_length(&ys0[..t], ys1) == Ordering::Less
    test(
        series(1, 5),
        vec![1, 0, 0, 4],
        vec![5; 9],
        vec![1, 2, 3, 8, 13, 12, 16, 20, 0],
    );
    // s > t
    test(
        vec![1; 4],
        series(1, 3),
        vec![5; 8],
        vec![1, 3, 6, 6, 5, 3, 0, 5],
    );
    test(
        vec![100, 101, 102],
        vec![102, 101, 100],
        vec![10; 7],
        vec![10_200, 20_402, 30_605, 20_402, 10_200, 0, 10],
    );
    let xs = vec![
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        4294950911,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        536870911,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let ys = vec![
        Limb::MAX,
        Limb::MAX,
        4294963199,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        268435455,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ];
    let out_len = xs.len() + ys.len();
    // carry > 2
    test(
        xs,
        ys,
        vec![10; out_len],
        vec![
            1,
            0,
            4096,
            0,
            0,
            0,
            0,
            0,
            16384,
            0,
            67108864,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4026531840,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            3758095359,
            Limb::MAX,
            Limb::MAX,
            4294966783,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            33554431,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_1() {
    let mut scratch = vec![];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_22(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_2() {
    let mut scratch = vec![];
    let mut out = vec![10; 7];
    let xs = series(6, 3);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_3() {
    let mut scratch = vec![];
    let mut out = vec![10; 7];
    let xs = series(6, 4);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &[1, 2], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_4() {
    let mut scratch = vec![];
    let mut out = vec![10; 7];
    let xs = series(6, 3);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &[1, 2], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_5() {
    let mut scratch = vec![];
    let mut out = vec![10; 4];
    let xs = series(6, 3);
    let ys = series(1, 3);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_6() {
    let mut scratch = vec![];
    let mut out = vec![10; 4];
    let xs = series(6, 3);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_22_fail_7() {
    let mut scratch = vec![];
    let mut out = vec![10; 4];
    let xs = series(6, 3);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_22(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_32() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // !(ap1_hi == 0 && limbs_cmp_same_length(ap1, xs1) == Ordering::Less)
    // t == n
    // limbs_cmp_same_length(ys0, ys1) == Ordering::Less
    // ap1_hi != 1 and ap1_hi != 2
    // !bp1_hi
    // hi == 0 first time
    // v_neg_1_neg
    // s <= t
    // s + t > n
    // hi >= 0 second time
    test(
        series(2, 6),
        series(3, 4),
        vec![10; 10],
        vec![6, 17, 34, 58, 76, 94, 88, 71, 42, 0],
    );
    // limbs_cmp_same_length(ys0, ys1) != Ordering::Less
    // ap1_hi == 2
    // bp1_hi
    // !v_neg_1_neg
    test(
        vec![0xffff_ffff; 6],
        vec![0xffff_ffff; 4],
        vec![10; 10],
        vec![
            1,
            0,
            0,
            0,
            Limb::MAX,
            Limb::MAX,
            4294967294,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
    );
    // ap1_hi == 0 && limbs_cmp_same_length(ap1, xs1) == Ordering::Less
    test(
        vec![0, 0, 1, 1, 0, 1],
        vec![0, 0, 0, 1],
        vec![10; 10],
        vec![0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
    );
    // t != n
    // limbs_test_zero(&ys0[t..]) && limbs_cmp_same_length(&ys0[..t], ys1) == Ordering::Less
    // s + t <= n
    test(
        vec![0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 1],
        vec![10; 12],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    );
    // !(limbs_test_zero(&ys0[t..]) && limbs_cmp_same_length(&ys0[..t], ys1) == Ordering::Less)
    test(
        vec![0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 1, 0, 1],
        vec![10; 12],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
    );
    // s > t
    test(
        series(1, 9),
        vec![9, 8, 7, 6, 5],
        vec![10; 14],
        vec![9, 26, 50, 80, 115, 150, 185, 220, 255, 200, 146, 94, 45, 0],
    );
    // ap1_hi == 1
    test(
        vec![
            2543705880, 1859419010, 3343322808, 1165039137, 1872701663, 1957510151, 1589243046,
        ],
        vec![1919189400, 1295801997, 354566481, 1212146910, 1886225431],
        vec![10; 14],
        vec![
            1753714240, 1114397484, 4100081063, 2352383720, 667557204, 920036609, 2291920497,
            3338154324, 3806846000, 1880963052, 291601955, 697949587, 10, 10,
        ],
    );
    // hi != 0 first time
    test(
        vec![
            706760835, 4153647095, 3843998199, 2077172825, 1158686949, 3157624247,
        ],
        vec![2847735618, 2779635711, 2471732382, 2655639495],
        vec![10; 10],
        vec![
            2814066374, 2022835469, 2101335047, 312674723, 2952296274, 1055977952, 590716674,
            290888444, 3944399226, 1952404077,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_32(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(3, 4)];
    let mut out = vec![10; 7];
    let xs = series(6, 3);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(5, 4)];
    let mut out = vec![10; 9];
    let xs = series(6, 5);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(6, 3)];
    let mut out = vec![10; 9];
    let xs = series(6, 6);
    let ys = series(1, 3);
    _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(3, 0)];
    let mut out = vec![10; 4];
    let xs = series(6, 3);
    _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_32_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(6, 4)];
    let mut out = vec![10; 9];
    let xs = series(6, 6);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_32(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_33() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(xs.len())];
        _limbs_mul_greater_to_out_toom_33(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // carry == 0 && limbs_cmp_same_length(&gp[..n], xs_1) == Ordering::Less
    // s != n
    // carry == 0 && limbs_cmp_same_length(&gp[..n], ys_1) == Ordering::Less
    // t != n
    // s <= t
    // !v_neg_1
    // two_r <= k + 1
    test(
        series(2, 5),
        series(3, 5),
        vec![10; 10],
        vec![6, 17, 34, 58, 90, 94, 88, 71, 42, 0],
    );
    // s > t
    test(
        series(2, 6),
        series(3, 5),
        vec![10; 11],
        vec![6, 17, 34, 58, 90, 115, 116, 106, 84, 49, 0],
    );
    // v_neg_1
    // two_r > k + 1
    test(
        series(2, 9),
        series(3, 8),
        vec![10; 17],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 296, 315, 320, 310, 284, 241, 180, 100, 0,
        ],
    );
    test(
        series(3, 5),
        series(2, 5),
        vec![10; 10],
        vec![6, 17, 34, 58, 90, 94, 88, 71, 42, 0],
    );
    // !(carry == 0 && limbs_cmp_same_length(&gp[..n], xs_1) == Ordering::Less)
    // !(carry == 0 && limbs_cmp_same_length(&gp[..n], ys_1) == Ordering::Less)
    test(
        vec![0xffff_ffff; 5],
        vec![0xffff_ffff; 5],
        vec![10; 10],
        vec![
            1,
            0,
            0,
            0,
            0,
            4294967294,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_33_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_33(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_33_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(5)];
    let mut out = vec![10; 11];
    let xs = series(6, 5);
    let ys = series(1, 6);
    _limbs_mul_greater_to_out_toom_33(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_33_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(5)];
    let mut out = vec![10; 9];
    let xs = series(6, 5);
    let ys = series(1, 4);
    _limbs_mul_greater_to_out_toom_33(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_33_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(5)];
    let mut out = vec![10; 5];
    let xs = series(6, 5);
    _limbs_mul_greater_to_out_toom_33(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_33_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(6)];
    let mut out = vec![10; 9];
    let xs = series(6, 6);
    let ys = series(1, 5);
    _limbs_mul_greater_to_out_toom_33(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_42() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_42(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // v_neg_1_neg
    // t == n
    // limbs_cmp_same_length(ys_0, ys_1) == Ordering::Less
    // s <= t
    // as1[n] not 1, 2, or 3
    test(
        series(2, 4),
        vec![3, 4],
        vec![10; 7],
        vec![6, 17, 24, 31, 20, 0, 10],
    );
    // !v_neg_1_neg
    // s != n
    // t != n
    // !(limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less)
    test(
        series(2, 7),
        series(3, 3),
        vec![10; 10],
        vec![6, 17, 34, 46, 58, 70, 82, 67, 40, 0],
    );
    // s > t
    test(
        series(2, 8),
        series(3, 3),
        vec![10; 11],
        vec![6, 17, 34, 46, 58, 70, 82, 94, 76, 45, 0],
    );
    // limbs_cmp_same_length(ys_0, ys_1) != Ordering::Less
    test(
        vec![0, 0, 0, 1],
        vec![1, 1],
        vec![10; 6],
        vec![0, 0, 0, 1, 1, 0],
    );
    // as1[n] == 1
    test(
        vec![
            2363703565, 2011430902, 405935879, 3293866119, 79230945, 4067912411, 54522599,
            3863530924, 2648195217, 3696638907, 2693775185, 2466180916, 2288038816, 3085875921,
            2622914893, 3412444602, 1714899352, 1458044565, 4160795266,
        ],
        vec![
            2010684769, 395852000, 1475286147, 263729287, 1827966398, 926833006, 3647866695,
            2299638628,
        ],
        vec![10; 27],
        vec![
            2935529197, 2628679470, 2989406385, 4135607148, 3098618197, 1986483787, 2969118597,
            4064944337, 1353361316, 3300804798, 3539475248, 1813351909, 4189109323, 1508204245,
            3032195050, 2111172804, 2647234523, 763063403, 499753337, 484003129, 951290762,
            31889895, 4291170933, 743974460, 931456782, 3403938046, 2227799389,
        ],
    );
    // bs1[n] != 0
    test(
        vec![
            1023706198, 1055957821, 62637438, 3129002448, 1343635842, 1979891039, 2332614953,
            820715064, 126240740, 3763174513, 874511155, 1433571832, 1799667271, 828081508,
            1790140791, 3456862168, 182082249,
        ],
        vec![
            272565221, 2271318511, 3915555663, 752672586, 2086228575, 93709012, 4089106295,
            1296382745, 4014782836, 4084383484,
        ],
        vec![10; 27],
        vec![
            2478924526, 600853546, 3764116188, 869876026, 49911338, 2430145334, 1531060628,
            4131353567, 2147110402, 1698823317, 3610138028, 2221603642, 2262453949, 2700908655,
            2085097953, 1179421079, 2314185794, 3274969801, 956808943, 183640877, 769743340,
            2499732116, 168215214, 1611459466, 1659741921, 3303732250, 173154690,
        ],
    );
    // as1[n] == 2
    test(
        vec![
            1048575,
            0,
            0,
            4294965248,
            33554431,
            0,
            0,
            0,
            4294966784,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            0,
            2147483648,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            2047,
            0,
            0,
            4294705152,
            Limb::MAX,
        ],
        vec![10; 27],
        vec![
            4293918721,
            Limb::MAX,
            Limb::MAX,
            2147483647,
            4261412864,
            Limb::MAX,
            4291035135,
            4294967231,
            1049102,
            536870912,
            0,
            4293914624,
            33554430,
            2147483648,
            134217728,
            2048,
            4294966784,
            4294966271,
            4294705151,
            4294967294,
            131072,
            2147483648,
            2047,
            0,
            0,
            4294705152,
            Limb::MAX,
        ],
    );
    // asm1[n] != 0
    test(
        vec![3338024033, 1570788701, 4067509056, 680440343],
        vec![599772085, 925834366],
        vec![10; 6],
        vec![
            1056633749, 686831275, 2758938475, 3727232403, 1859912609, 146677497,
        ],
    );
    // as1[n] == 3
    test(
        vec![4030415682, 3643742328, 2586387240, 3719633661],
        vec![708497006, 797041707],
        vec![10; 6],
        vec![
            4203348572, 3202027474, 4170951291, 2012723103, 3609216593, 690273745,
        ],
    );
    // limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less
    test(
        vec![
            0,
            Limb::MAX,
            Limb::MAX,
            1048575,
            4294967280,
            Limb::MAX,
            63,
            0,
            2147483648,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![65535, 0, 0, 4294967264],
        vec![10; 15],
        vec![
            0,
            4294901761,
            Limb::MAX,
            4293918719,
            4293918783,
            4294967294,
            4265607103,
            1049087,
            2147483632,
            4294932480,
            63,
            65535,
            2147483664,
            Limb::MAX,
            4294967263,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_42_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_42(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_42_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(5, 6)];
    let mut out = vec![10; 11];
    let xs = series(6, 5);
    let ys = series(1, 6);
    _limbs_mul_greater_to_out_toom_42(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_42_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(3, 2)];
    let mut out = vec![10; 9];
    let xs = series(6, 3);
    _limbs_mul_greater_to_out_toom_42(&mut out, &xs, &[1, 2], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_42_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(5, 0)];
    let mut out = vec![10; 5];
    let xs = series(6, 5);
    _limbs_mul_greater_to_out_toom_42(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_42_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(4, 2)];
    let mut out = vec![10; 4];
    let xs = series(6, 4);
    _limbs_mul_greater_to_out_toom_42(&mut out, &xs, &[1, 2], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_43() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // n_high < n in _limbs_mul_toom_evaluate_deg_3_poly_in_2_and_neg_2
    // !v_neg_2_neg in _limbs_mul_toom_evaluate_deg_3_poly_in_2_and_neg_2
    // limbs_cmp_same_length(small_scratch, bsm1) != Ordering::Less
    // s <= t
    // !v_neg_2_neg in _limbs_mul_toom_interpolate_6_points
    // !v_neg_1_neg in _limbs_mul_toom_interpolate_6_points
    // n_high > n in _limbs_mul_toom_interpolate_6_points
    // special_carry_1 <= special_carry_2
    test(
        series(2, 11),
        series(3, 9),
        vec![10; 20],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 318, 381, 444, 468, 476, 467, 440, 394, 328, 241,
            132, 0,
        ],
    );
    // n_high >= n in _limbs_mul_toom_evaluate_deg_3_poly_in_2_and_neg_2
    // v_neg_2_neg in _limbs_mul_toom_evaluate_deg_3_poly_in_2_and_neg_2
    // t != n
    // limbs_cmp_same_length(small_scratch, bsm1) == Ordering::Less
    // *bsm1_last == 0 && limbs_cmp_same_length(bsm1_init, ys_1) == Ordering::Less
    // s > t
    test(
        series(2, 12),
        series(3, 8),
        vec![10; 20],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 296, 348, 400, 452, 462, 455, 430, 386, 322, 237,
            130, 0,
        ],
    );
    // v_neg_2_neg in _limbs_mul_toom_interpolate_6_points
    // v_neg_1_neg in _limbs_mul_toom_interpolate_6_points
    // n_high <= n in _limbs_mul_toom_interpolate_6_points
    test(
        series(2, 19),
        series(3, 11),
        vec![10; 30],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 318, 405, 506, 594, 682, 770, 858, 946, 1034, 1122,
            1210, 1235, 1236, 1212, 1162, 1085, 980, 846, 682, 487, 260, 0,
        ],
    );
    // special_carry_1 > special_carry_2
    test(
        vec![
            3785023459, 4249117725, 1551102690, 4239134101, 2264608302, 1455009194, 3261002629,
            2233313730, 3807192178, 2550029068, 1259253479, 2657422450,
        ],
        vec![
            2921127090, 3493254221, 1579329255, 2624469567, 1678656523, 1653055771, 493445097,
            1702866165, 1046762910,
        ],
        vec![10; 21],
        vec![
            3169501142, 3910307595, 310092603, 1408815552, 1786334527, 2452212521, 670758829,
            4142968613, 1110881016, 3529286248, 2119180760, 3066268191, 1902231557, 1262478906,
            4083142666, 784312035, 3990199726, 3180402195, 1845375516, 421486236, 647662966,
        ],
    );
    test(
        vec![
            0,
            0,
            0,
            4286578688,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            7,
            0,
            0,
            0,
            0,
            4294967280,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            2147483647,
            4294963200,
            2097151,
            0,
            0,
            0,
            2147483520,
            0,
            4294967280,
            Limb::MAX,
            Limb::MAX,
            4290789375,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![10; 35],
        vec![
            0,
            0,
            0,
            8388608,
            4290772992,
            7,
            4294963200,
            Limb::MAX,
            Limb::MAX,
            1073741823,
            4290772984,
            134184963,
            16777216,
            0,
            0,
            8176,
            64504,
            4261412868,
            4294967167,
            2139095038,
            4294963200,
            4263643135,
            4294967287,
            255,
            0,
            2147483520,
            66846728,
            4294967280,
            Limb::MAX,
            Limb::MAX,
            4290789375,
            4294967279,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_43() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(
        vec![
            18446744073701163071,
            Limb::MAX,
            Limb::MAX,
            68719476735,
            0,
            0,
            0,
            0,
            18446743936270598144,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            262143,
            0,
            0,
            0,
            18446462598732840960,
            32767,
            0,
            0,
            18446744073709518848,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            18437736874454810624,
            1048575,
            0,
            18446744039349813248,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            140737488355327,
            0,
            18446744073709551600,
            Limb::MAX,
            Limb::MAX,
            134217727,
            18446744056529682432,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![10; 41],
        vec![
            17879290520660869120,
            18446735277682593791,
            Limb::MAX,
            288228211488194559,
            72057594004373504,
            0,
            0,
            8866461766385536,
            18446744073709551552,
            18302628885835021327,
            Limb::MAX,
            524287,
            18445617082746798336,
            144114380622004095,
            0,
            9214364837600034816,
            18446744073700114495,
            2336462208959,
            34359738336,
            68719476736,
            18445618173803233282,
            18446744039345618958,
            127,
            1125899906842624,
            4611721063213039616,
            18437736874454810624,
            524287,
            13835058055282163712,
            18446744039350075391,
            4398047033343,
            18446181123756392448,
            Limb::MAX,
            18446598938174685183,
            562949953454079,
            18446744073709551600,
            Limb::MAX,
            18446744073709518847,
            134217727,
            18446744056529682432,
            Limb::MAX,
            Limb::MAX,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_43_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_43(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_43_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(11, 12)];
    let mut out = vec![10; 23];
    let xs = series(3, 11);
    let ys = series(2, 12);
    _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_43_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(11, 8)];
    let mut out = vec![10; 19];
    let xs = series(3, 11);
    let ys = series(2, 8);
    _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_43_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(12, 0)];
    let mut out = vec![10; 12];
    let xs = series(3, 11);
    _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_43_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(4, 2)];
    let mut out = vec![10; 5];
    let xs = series(3, 10);
    let ys = series(2, 10);
    _limbs_mul_greater_to_out_toom_43(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_44() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(xs.len())];
        _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // _limbs_mul_toom_evaluate_deg_3_poly_in_2_and_neg_2(bpx, bmx, ys, n, t, &mut tp[..n + 1])
    // _limbs_mul_toom_evaluate_deg_3_poly_in_1_and_neg_1(bpx, bmx, ys, n, t, &mut tp[..n + 1])
    // s <= t
    // !w1_neg
    // !w3_neg
    // w6n <= n + 1
    // _limbs_mul_greater_to_out_basecase in _limbs_mul_same_length_to_out_toom_44_recursive
    test(
        series(2, 4),
        series(3, 4),
        vec![10; 8],
        vec![6, 17, 34, 58, 58, 49, 30, 0],
    );
    // w3_neg
    test(
        vec![0, 0, 0, 1],
        vec![0, 0, 1, 1],
        vec![10; 8],
        vec![0, 0, 0, 0, 0, 1, 1, 0],
    );
    // w6n > n + 1
    test(
        vec![
            1528859315, 4288784328, 3677151116, 445199233, 3304488688, 3566979465, 3541025426,
            2491779846, 3112990742, 2583249486, 3403111749, 1930721237,
        ],
        vec![
            2700212626, 3890522506, 1407330442, 2072012244, 292784856, 2848511017, 2011019434,
            3729188240, 1314875514, 1752114201, 3480385261, 1532349465,
        ],
        vec![10; 24],
        vec![
            301610262, 3665600695, 2790869988, 562719619, 254881625, 3646308155, 2857045174,
            4219173388, 3417896791, 458617279, 3882403287, 617740409, 3296542840, 435168928,
            3570119313, 863483077, 2646855475, 2878510649, 4228994627, 2357119023, 2589237669,
            2274199643, 3000367783, 688838692,
        ],
    );
    // s > t
    test(
        vec![
            1588217107, 79108222, 2883552792, 2390312777, 1587172303, 2070384343, 2265280181,
            4013380367,
        ],
        vec![
            3177381025, 2776698917, 954518943, 3785176644, 3521195169, 550485155, 1499535299,
        ],
        vec![10; 15],
        vec![
            2639930611, 1074195093, 3974952249, 2825437951, 3084912647, 2589723741, 1008656003,
            3022162475, 2305314017, 1619919364, 894905935, 3957960884, 814161571, 756465381,
            1401222667,
        ],
    );
    // w1_neg
    test(
        vec![
            1047248630, 339306853, 1100911694, 3907715577, 4281628442, 1447091409, 3425204321,
            3871347591, 339462242, 1765234031, 3774533011, 980706746,
        ],
        vec![
            1454868694, 1975460471, 2212752551, 1982786615, 983847073, 3073742136, 438698610,
            1215648998, 2824467771, 3299124311, 2818671068,
        ],
        vec![10; 23],
        vec![
            2438877604, 4249888081, 2301349363, 1817920534, 2538709343, 1739256708, 179543633,
            2275519806, 1688820820, 759475921, 3927834077, 2138533648, 958932069, 2429920287,
            3858014276, 2853106604, 1837491388, 1616377262, 231659922, 680814190, 417532392,
            428918230, 643611358,
        ],
    );
    test(
        vec![
            986333060, 254638637, 1577120658, 1458096412, 474582958, 4115735719, 4031007047,
        ],
        vec![
            2096725444, 3871299248, 1414038108, 2617834141, 1553210626, 2669030715, 3093885541,
        ],
        vec![10; 14],
        vec![
            2067797264, 3922708625, 2600678884, 825822853, 2499590824, 1035492325, 1957325707,
            1890833276, 3433274404, 1510974136, 2269171082, 854613327, 1796482159, 2903741417,
        ],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_44() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(xs.len())];
        _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(
        series(2, 4),
        series(3, 4),
        vec![10; 8],
        vec![6, 17, 34, 58, 58, 49, 30, 0],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_44_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(1)];
    let mut out = vec![10; 10];
    _limbs_mul_greater_to_out_toom_44(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_44_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(4)];
    let mut out = vec![10; 9];
    let xs = series(3, 4);
    let ys = series(2, 5);
    _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_44_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(3)];
    let mut out = vec![10; 6];
    let xs = series(3, 3);
    let ys = series(2, 3);
    _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_44_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(11)];
    let mut out = vec![10; 11];
    let xs = series(3, 11);
    _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_44_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(4)];
    let mut out = vec![10; 7];
    let xs = series(3, 4);
    let ys = series(2, 4);
    _limbs_mul_greater_to_out_toom_44(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_52() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // degree.even() in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // !v_neg_2_neg in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // t != n
    // !(limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less)
    // !v_neg_1_neg
    // !(limbs_test_zero(&bsm1[t..]) && limbs_cmp_same_length(&bsm1[..t], ys_1) == Ordering::Less)
    // degree.even() in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    // !v_neg_1_neg in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    test(
        series(2, 15),
        series(3, 5),
        vec![10; 20],
        vec![
            6, 17, 34, 58, 90, 115, 140, 165, 190, 215, 240, 265, 290, 315, 340, 314, 268, 201,
            112, 0,
        ],
    );
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 1, 0],
        vec![10; 20],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    );
    // n_high != n in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // t == n
    // limbs_cmp_same_length(ys_0, ys_1) == Ordering::Less
    // v_neg_1_neg
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 0, 1],
        vec![10; 20],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    );
    // limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 1],
        vec![10; 20],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    );
    // limbs_cmp_same_length(ys_0, ys_1) != Ordering::Less
    // limbs_cmp_same_length(bsm1, ys_1) == Ordering::Less
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 1, 0, 0, 1],
        vec![10; 20],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
    );
    // v_neg_2_neg in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // v_neg_1_neg in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    // _limbs_mul_toom_evaluate_poly_in_1_and_neg_1(as1, asm1, 4, xs, n, s, &mut v_neg_1[..m])
    test(
        vec![
            281500646, 1572406350, 108746052, 4056047843, 89307364, 1006007374, 2902260577,
            1250995384, 1556873818, 3846421711, 280743259, 1728158805, 467926284, 2330565417,
        ],
        vec![
            2509320863, 2201587434, 926371577, 1243694325, 1112023631, 2791032478,
        ],
        vec![10; 20],
        vec![
            1191903194, 1277561191, 2672986331, 45667421, 2742410814, 2602170945, 2815699572,
            2317624023, 952805243, 577394769, 1002744907, 4175910221, 2433548489, 2550394831,
            3650814344, 1121996596, 3441179979, 3561879910, 1574546788, 1514489709,
        ],
    );
    // limbs_cmp_same_length(bsm1, ys_1) != Ordering::Less
    test(
        vec![
            2331447040, 1003213663, 1873981685, 3371337621, 3796896013, 4144448610, 2569252563,
            2859304641, 1027973602, 3158196152, 4058699545, 2002924383, 3295505824, 695758308,
        ],
        vec![
            725028139, 2984864771, 2939417227, 3047223286, 3526157986, 1078000342,
        ],
        vec![10; 20],
        vec![
            474121472, 1561322164, 715684992, 3182777436, 384530074, 3827205870, 2267366778,
            1586160630, 3779201468, 900553139, 2867049131, 2027414411, 2054056558, 2671776484,
            3374007062, 3091178442, 1888125000, 2974781424, 307612679, 174629431,
        ],
    );
    // limbs_test_zero(&bsm1[t..]) && limbs_cmp_same_length(&bsm1[..t], ys_1) == Ordering::Less
    test(
        vec![
            32767,
            0,
            0,
            0,
            0,
            0,
            4294836224,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            4278206463,
            Limb::MAX,
            Limb::MAX,
            31,
            0,
            0,
            4294443008,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            0,
            0,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            0,
            0,
            4294967232,
            Limb::MAX,
            4227858559,
            Limb::MAX,
        ],
        vec![10; 37],
        vec![
            0,
            0,
            4294934529,
            Limb::MAX,
            Limb::MAX,
            32766,
            0,
            4292870208,
            131071,
            71303040,
            4294966784,
            4294868990,
            Limb::MAX,
            8388607,
            16760832,
            4278190080,
            2047,
            4278075360,
            Limb::MAX,
            1072693247,
            524320,
            2149580800,
            259839,
            4277682176,
            2147487743,
            33554431,
            32,
            4227858432,
            8190,
            4294443008,
            Limb::MAX,
            0,
            0,
            4294967232,
            Limb::MAX,
            4227858559,
            Limb::MAX,
        ],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_52() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 1, 0],
        vec![10; 20],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_52_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_52(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_52_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(15, 16)];
    let mut out = vec![10; 9];
    let xs = series(3, 15);
    let ys = series(3, 16);
    _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_52_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(14, 5)];
    let mut out = vec![10; 6];
    let xs = series(3, 14);
    let ys = series(3, 5);
    _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_52_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(15, 4)];
    let mut out = vec![10; 7];
    let xs = series(3, 15);
    let ys = series(3, 4);
    _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_52_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(11, 0)];
    let mut out = vec![10; 12];
    let xs = series(3, 11);
    _limbs_mul_greater_to_out_toom_52(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_53() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // !(*bs1_last == 0 && limbs_cmp_same_length(bs1_init, ys_1) == Ordering::Less)
    // limbs_cmp_same_length(bs2, &out[..n + 1]) != Ordering::Less
    // *asm1_last != 1 && *asm1_last != 2
    // *as1_last == 0
    test(
        series(2, 5),
        series(3, 3),
        vec![10; 8],
        vec![6, 17, 34, 46, 58, 49, 30, 0],
    );
    // *bs1_last == 0 && limbs_cmp_same_length(bs1_init, ys_1) == Ordering::Less
    // *as1_last == 2
    // *bs1_last == 1
    test(
        vec![611094747, 2426195984, 3948451542, 3575143460, 2163084716],
        vec![1043494367, 2432724646, 1148376235],
        vec![10; 8],
        vec![
            2911651269, 2135822080, 566305911, 1285474929, 3971527858, 1120629777, 2330897846,
            578359487,
        ],
    );
    // *as1_last == 1
    test(
        vec![83336617, 52963853, 1461131367, 615175494, 2376138249],
        vec![1085015601, 823246134, 3222784883],
        vec![10; 8],
        vec![
            4003668825, 3129188105, 1975732797, 2019047981, 943873016, 1483316813, 305883771,
            1782966412,
        ],
    );
    // limbs_cmp_same_length(bs2, &out[..n + 1]) == Ordering::Less
    // *as1_last > 2
    test(
        vec![
            3853679659, 4236745288, 2469732913, 4265854402, 4207372271, 1754370134, 137881047,
            1325109821, 2212043812, 3074170203,
        ],
        vec![
            1666773246, 4177391250, 4175984066, 2859904653, 3320165100, 314964734,
        ],
        vec![10; 16],
        vec![
            2336719530, 919351696, 4142757378, 49781824, 1315087108, 2534950116, 2674417418,
            1178559126, 171926136, 3132896187, 2074730624, 3561766617, 1155879861, 3985534229,
            380101898, 225439482,
        ],
    );
    // *asm1_last == 1
    test(
        vec![4171807709, 1363035595, 2692148345, 3728232161, 2672522097],
        vec![178202067, 736149219, 623937260],
        vec![10; 8],
        vec![
            2793195559, 2168235304, 1582195836, 18437203, 671570200, 635034059, 2378259056,
            388241865,
        ],
    );
    // *bs1_last == 2
    test(
        vec![361692441, 3665267779, 1770324312, 1221560416, 2810295690],
        vec![1887715703, 4035171395, 2815003797],
        vec![10; 8],
        vec![
            3298754463, 2516900264, 30373680, 909364693, 729609199, 3973437903, 3392713387,
            1841921601,
        ],
    );
    // *bsm1_last != 0
    test(
        vec![1542637461, 595638956, 1883922642, 2681579369, 2641006916],
        vec![3723002977, 116606811, 2193352864],
        vec![10; 8],
        vec![
            2246996853, 3232877055, 2347711939, 2476049074, 4132376421, 3855440382, 4040315714,
            1348708775,
        ],
    );
    // *asm1_last == 2
    test(
        vec![4043423637, 312331403, 3088235367, 41162462, 2934893364],
        vec![2702987034, 4184574368, 2455116868],
        vec![10; 8],
        vec![
            2912448546, 2297161059, 137328692, 115875329, 1975003140, 2441893159, 4034859213,
            1677662647,
        ],
    );
    test(
        vec![4194296, 3221225472, Limb::MAX, 1, 4294934528],
        vec![0, 4294959104, Limb::MAX],
        vec![10; 8],
        vec![
            0, 65536, 4294967288, 4196343, 3221209088, 268435455, 4294959106, 4294934527,
        ],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_53() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(
        vec![Limb::MAX, Limb::MAX, 3, 18446744073709551614, Limb::MAX],
        vec![Limb::MAX, Limb::MAX, Limb::MAX],
        vec![10; 8],
        vec![
            1,
            0,
            18446744073709551612,
            0,
            0,
            3,
            18446744073709551614,
            Limb::MAX,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_53(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(5, 6)];
    let mut out = vec![10; 11];
    let xs = series(3, 5);
    let ys = series(3, 6);
    _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(5, 4)];
    let mut out = vec![10; 9];
    let xs = series(3, 5);
    let ys = series(3, 4);
    _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(4, 3)];
    let mut out = vec![10; 6];
    let xs = series(3, 4);
    let ys = series(3, 3);
    _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(5, 2)];
    let mut out = vec![10; 7];
    let xs = series(3, 5);
    _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &[3, 4], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_53_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(5, 0)];
    let mut out = vec![10; 12];
    let xs = series(3, 5);
    _limbs_mul_greater_to_out_toom_53(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_54() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // degree.even() in _limbs_mul_toom_evaluate_poly_in_2_pow_and_neg_2_pow
    // !v_neg_2_pow_neg in _limbs_mul_toom_evaluate_poly_in_2_pow_and_neg_2_pow
    // degree.odd() in _limbs_mul_toom_evaluate_poly_in_2_pow_and_neg_2_pow
    // !y_sign in _limbs_toom_couple_handling
    // y_shift != 0 in _limbs_toom_couple_handling
    // x_shift != 0 in _limbs_toom_couple_handling
    // s > t
    // carry_1 && !carry_2, first time, in _limbs_mul_toom_interpolate_8_points
    // carry_1 && !carry_2, second time, in _limbs_mul_toom_interpolate_8_points
    // s_plus_t != n in _limbs_mul_toom_interpolate_8_points
    test(
        series(2, 15),
        series(3, 11),
        vec![10; 26],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 318, 405, 506, 594, 682, 770, 858, 895, 912, 908,
            882, 833, 760, 662, 538, 387, 208, 0,
        ],
    );
    // v_neg_2_pow_neg in _limbs_mul_toom_evaluate_poly_in_2_pow_and_neg_2_pow
    // y_sign in _limbs_toom_couple_handling
    // s <= t
    test(
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        vec![10; 26],
        vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        ],
    );
    // !carry_1 && carry_2, first time, in _limbs_mul_toom_interpolate_8_points
    test(
        vec![
            281500646, 1572406350, 108746052, 4056047843, 89307364, 1006007374, 2902260577,
            1250995384, 1556873818, 3846421711, 280743259, 1728158805, 467926284, 2330565417,
        ],
        vec![
            1365578038, 3224231142, 4103857906, 475734936, 3828952167, 3071966456, 1450111251,
            1166414077, 2218130537, 3324650407, 1559641024, 2423373264,
        ],
        vec![10; 26],
        vec![
            3471157380, 2179990259, 735116018, 3928626279, 2606792426, 4065628313, 3326106964,
            1358767242, 58836620, 2388814047, 1881937395, 448453590, 699295041, 2539838591,
            1014080982, 2627397171, 1231543630, 2956184941, 1108982880, 2083442227, 1445361702,
            3773463966, 3902311612, 4169089467, 614631841, 1314987876,
        ],
    );
    // s_plus_t == n in _limbs_mul_toom_interpolate_8_points
    test(
        vec![
            1372428912, 2999825770, 3824933735, 1252466299, 1644332514, 577056155, 267504800,
            2188417248, 1146838357, 1601878440, 2555350187, 2326995902, 341200833, 3311243465,
            3983323172, 1591023018, 498264278, 879686658, 2445286712, 3168806215, 3363960673,
            1002293448,
        ],
        vec![
            4155394173, 3251572031, 3012777338, 1405107169, 4263655764, 202386116, 2762119705,
            1046271690, 3730474184, 1761497041, 3530189728, 452831577, 2351117985, 3074633806,
            2337874996, 2372535352, 1907593160, 2034262144,
        ],
        vec![10; 40],
        vec![
            3438536880, 4020840252, 3753658662, 2750457729, 3984463794, 1677702279, 3627178035,
            1938289829, 2347934241, 1059164524, 3077109858, 1455283397, 4245424824, 2265496611,
            2507273589, 4106853892, 187386657, 3541881161, 3520589236, 977961476, 205850208,
            3040196950, 1303835716, 3039701923, 525989195, 1042461957, 4189151284, 3358396344,
            275215531, 2907721257, 3086020483, 2914223316, 652103889, 2430562590, 4256409533,
            774831877, 3808631269, 3720895601, 1034939105, 474724830,
        ],
    );
    // !carry_1 && carry_2, second time, in _limbs_mul_toom_interpolate_8_points
    test(
        vec![
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4294967280,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            2047,
            0,
            0,
            4294966784,
            Limb::MAX,
            127,
            0,
            4286578688,
            Limb::MAX,
            262143,
            4227858432,
            Limb::MAX,
        ],
        vec![10; 26],
        vec![
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4294934544,
            Limb::MAX,
            Limb::MAX,
            8191,
            2047,
            4294965248,
            Limb::MAX,
            134217215,
            0,
            4290773120,
            1073741823,
            4286578688,
            4294967279,
            262143,
            4227858432,
            Limb::MAX,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_54(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(15, 16)];
    let mut out = vec![10; 31];
    let xs = series(3, 14);
    let ys = series(3, 17);
    _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(15, 10)];
    let mut out = vec![10; 25];
    let xs = series(3, 14);
    let ys = series(3, 10);
    _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(14, 11)];
    let mut out = vec![10; 25];
    let xs = series(3, 14);
    let ys = series(3, 11);
    _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(15, 11)];
    let mut out = vec![10; 25];
    let xs = series(3, 15);
    let ys = series(3, 11);
    _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_54_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(15, 0)];
    let mut out = vec![10; 15];
    let xs = series(3, 15);
    _limbs_mul_greater_to_out_toom_54(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_62() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // degree.odd() in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    // degree > 4 in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    // degree_u >= 5 in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // degree.odd() in _limbs_mul_toom_evaluate_poly_in_2_and_neg_2
    // t == n
    // limbs_cmp_same_length(ys_0, ys_1) == Ordering::Less
    // v_neg_1_neg_b
    // *as1_last == 0
    test(
        series(2, 6),
        vec![3, 4],
        vec![10; 8],
        vec![6, 17, 24, 31, 38, 45, 28, 0],
    );
    // limbs_cmp_same_length(ys_0, ys_1) != Ordering::Less
    // !v_neg_1_neg_b
    // t >= n
    // limbs_cmp_same_length(&bsm1, ys_1) == Ordering::Less
    test(
        vec![0, 0, 0, 0, 0, 1],
        vec![1, 1],
        vec![10; 8],
        vec![0, 0, 0, 0, 0, 1, 1, 0],
    );
    // limbs_cmp_same_length(&bsm1, ys_1) != Ordering::Less
    test(
        vec![0, 0, 0, 0, 0, 1],
        vec![2, 1],
        vec![10; 8],
        vec![0, 0, 0, 0, 0, 2, 1, 0],
    );
    // t != n
    // !(limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less)
    // t < n
    // !(limbs_test_zero(&bsm1[t..]) && limbs_cmp_same_length(&bsm1[..t], ys_1) == Ordering::Less)
    // *as1_last == 2
    test(
        vec![
            2291585918, 1380546066, 1861205162, 1395600128, 1509813785, 1715266614, 3251195596,
            3140058077, 1998653517, 3140019184, 2534426976,
        ],
        vec![2477133296, 625749873, 3687467688],
        vec![10; 14],
        vec![
            869772320, 253774892, 3270059412, 1629301906, 333315526, 1485838973, 1182872659,
            3973435471, 3570040059, 138616924, 3845622124, 4243476600, 2488800838, 2175946157,
        ],
    );
    // *as1_last > 2
    test(
        vec![
            706760835, 4153647095, 3843998199, 2077172825, 1158686949, 3157624247,
        ],
        vec![708497006, 797041707],
        vec![10; 8],
        vec![
            3596223050, 1899342498, 3768933007, 59388593, 2997914214, 150267535, 1848145862,
            585978436,
        ],
    );
    // *as1_last == 1
    test(
        vec![
            1817453168, 96871997, 3927306877, 3090061646, 3474317652, 437148773, 439538568,
            324686794, 772632617, 1424328970, 580538580,
        ],
        vec![4158498322, 3126677346, 655989538],
        vec![10; 14],
        vec![
            4142861280, 2093741387, 1223409636, 3430701278, 154561385, 1065478559, 1434432315,
            1709306376, 2647162930, 2288715437, 510829208, 3519993529, 1581992297, 88668250,
        ],
    );
    // *bs1_last != 0
    test(
        vec![
            478149678, 4026802122, 1384639138, 368837837, 183900171, 785221208,
        ],
        vec![1458158767, 4167624669],
        vec![10; 8],
        vec![
            1921854322, 141249793, 673006993, 2183916852, 295623924, 3471440317, 3387755993,
            761939975,
        ],
    );
    // *asm1_last == 1
    test(
        vec![
            760464004, 3698115579, 1282981837, 2124133062, 1943175022, 3815903204,
        ],
        vec![2302225798, 423133196],
        vec![10; 8],
        vec![
            1718420760, 4288660832, 1043184986, 2518603664, 1668853787, 1047988481, 4101944437,
            375936580,
        ],
    );
    // *asm1_last == 2
    test(
        vec![
            486320673, 3488920730, 3556919186, 380261964, 1609664786, 3382076763, 3478178414,
            1464325754, 2543330707, 3900552438, 1432199477,
        ],
        vec![1190326122, 1081384689, 2610845505, 3919894794],
        vec![10; 15],
        vec![
            3164946602, 4284198222, 380177155, 837655879, 3034889727, 3503063664, 3315274214,
            3998279880, 2501466635, 3524441, 312561544, 2480833439, 3092764257, 1045878247,
            1307127829,
        ],
    );
    // limbs_test_zero(&ys_0[t..]) && limbs_cmp_same_length(&ys_0[..t], ys_1) == Ordering::Less
    test(
        vec![
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            31,
            0,
            0,
            0,
            0,
            0,
            4294967232,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![
            Limb::MAX,
            63,
            0,
            0,
            0,
            0,
            4227858432,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![10; 47],
        vec![
            1,
            4294967232,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            67108863,
            0,
            0,
            0,
            0,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            4294967263,
            2047,
            0,
            0,
            0,
            0,
            2147483712,
            4294963199,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            31,
            0,
            1,
            0,
            0,
            0,
            4294967232,
            Limb::MAX,
            4294967294,
            63,
            0,
            0,
            0,
            0,
            4227858432,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
    );
    // limbs_test_zero(&bsm1[t..]) && limbs_cmp_same_length(&bsm1[..t], ys_1) == Ordering::Less
    test(
        vec![
            1073741823,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            4290772992,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
        ],
        vec![4293918720, Limb::MAX, 0, 268435448, 4294443008],
        vec![10; 22],
        vec![
            1048576,
            4294705152,
            1073741822,
            4026531848,
            67633149,
            1073610751,
            0,
            0,
            0,
            1024,
            4290772992,
            33554431,
            4294705152,
            4290773503,
            Limb::MAX,
            Limb::MAX,
            Limb::MAX,
            4293918719,
            Limb::MAX,
            0,
            268435448,
            4294443008,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_62(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(6, 7)];
    let mut out = vec![10; 13];
    let xs = series(3, 6);
    let ys = series(3, 7);
    _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(6, 1)];
    let mut out = vec![10; 7];
    let xs = series(3, 6);
    _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &[3], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(5, 2)];
    let mut out = vec![10; 7];
    let xs = series(3, 5);
    _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &[3, 4], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(6, 2)];
    let mut out = vec![10; 7];
    let xs = series(3, 6);
    _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &[3, 4], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_62_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(6, 0)];
    let mut out = vec![10; 6];
    let xs = series(3, 6);
    _limbs_mul_greater_to_out_toom_62(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_63() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // n == t
    // !(!carry && limbs_cmp_same_length(scratch2_lo, ys_1) == Ordering::Less)
    // s <= t
    test(
        series(2, 17),
        series(3, 9),
        vec![10; 26],
        vec![
            6, 17, 34, 58, 90, 131, 182, 244, 318, 381, 444, 507, 570, 633, 696, 759, 822, 828,
            812, 773, 710, 622, 508, 367, 198, 0,
        ],
    );
    // n != t
    test(
        vec![
            3047748962, 2284186344, 3132866461, 2331447040, 1003213663, 1873981685, 3371337621,
            3796896013, 4144448610, 2569252563, 2859304641, 1027973602, 3158196152, 4058699545,
            2002924383, 3295505824, 695758308, 544681384, 3452307839, 1190734708, 4232023153,
            451772934, 673919865, 2022672425, 3493426012, 1142609332, 477542383, 1304798841,
            461115870, 3268103575, 2243523508,
        ],
        vec![
            3987208830, 1336657961, 2605546090, 1112778759, 2243645577, 3695113963, 637209276,
            527642657, 1586863943, 2178788843, 4128924923, 574016400, 118333022, 3019059425,
            3734056582, 3974475640, 958936732,
        ],
        vec![10; 48],
        vec![
            901282364, 4131825926, 550521101, 4239081984, 354957348, 2987335611, 2947836402,
            1594339509, 1900787939, 3942224706, 1915750189, 2686147736, 455238733, 595779993,
            992449470, 225135268, 4216025815, 112446550, 2736130746, 1015352940, 1166343395,
            3559470539, 2787138552, 3128535813, 2203140859, 3479459112, 599923700, 684443693,
            1557326194, 1699057519, 2198150417, 2196463130, 1973109458, 3642841764, 426750624,
            1438683694, 42406461, 1444651840, 2152704621, 722727455, 3882030279, 205951250,
            838845869, 2997862064, 779154540, 1753953589, 1791445120, 500911172,
        ],
    );
    test(
        vec![
            2547108010, 2828666778, 3252702258, 3885923576, 2331974758, 730724707, 1528859315,
            4288784328, 3677151116, 445199233, 3304488688, 3566979465, 3541025426, 2491779846,
            3112990742, 2583249486, 3403111749, 1930721237, 3428792463, 2896462048, 2985885576,
            1819460734, 21206096, 3560441846, 987100555, 2844904275, 84854892, 1268249628,
            3963306788, 3338670067, 2504599089, 65588657, 321493327, 4249673617, 4150876068,
            721566898,
        ],
        vec![
            2339094549, 568841948, 757218994, 54206328, 2888117240, 1758638903, 3215886938,
            2041086168, 259363425, 3740850804, 3272104239, 3101597497, 4170226346, 1487680512,
            2997309052, 1761169487, 680164259, 104354801, 3642294827, 2001649447,
        ],
        vec![10; 56],
        vec![
            4156749298, 1238334534, 3541686335, 400023669, 3354392679, 146448234, 338562445,
            2541647274, 3476105410, 3869729511, 2592129633, 1524174755, 2864342013, 3189404137,
            2408966423, 1748955694, 848863232, 2061232865, 2863992687, 1780371599, 1814973544,
            4129152748, 1067034680, 3960771432, 1978132071, 249147649, 4113633238, 3331366833,
            103867284, 4274561406, 24372440, 1874890180, 2262704206, 4185039557, 1493676561,
            3605651563, 184712156, 1714079946, 3695806969, 3114374817, 2698021971, 2617815992,
            3374318018, 2710182754, 2217042831, 3166354273, 3526471084, 2282901181, 17853137,
            2805842653, 2980411632, 2879849003, 22987084, 2408312078, 212023482, 336282883,
        ],
    );
    // !carry && limbs_cmp_same_length(scratch2_lo, ys_1) == Ordering::Less
    // s > t
    test(
        vec![
            275320572, 2678313698, 1997150503, 1718206458, 3389415001, 1347098060, 423205500,
            1228674579, 1683636524, 1761485682, 3886555164, 1343770739, 3728441996, 3386212640,
            4218849286, 3154177905, 383775865, 685210915, 2915358388, 356527607, 1399377005,
            2203631586, 3950305635, 4107289625,
        ],
        vec![
            343872945, 2028904125, 1525417887, 867188532, 3911999830, 2139706847, 3256484706,
            961423019, 1530068826, 3577946967,
        ],
        vec![10; 34],
        vec![
            367134780, 454511356, 740068730, 2466817027, 444007987, 2116910983, 3588258390,
            4148666142, 241899205, 3037479671, 967522541, 1695514557, 3417684811, 1755587152,
            57889847, 1893598444, 894827452, 1259092281, 343759711, 417669929, 4250137916,
            2931151486, 4137704826, 1616987343, 118402896, 3476900958, 3144858924, 799089809,
            2899882887, 413231425, 2515242049, 142267098, 1727945779, 3421601015,
        ],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_63() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>, out_after| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(
        vec![
            6746486103788831552,
            2922469023463657485,
            7190781201699911122,
            6369274278675525514,
            11602031538822447399,
            18146097755068799938,
            10715195159596301824,
            1582667531232164822,
            17310503547119278200,
            11108448614311336701,
            16131384432757080248,
            10724146198461527790,
            17486718158725257827,
            6011711000953739951,
            12044019786490872751,
            12126819472937875768,
            11736689834584491812,
            2624631955548590096,
        ],
        vec![
            8718882040837103283,
            12513261442998616191,
            3363599670593686195,
            2576001491054566526,
            8476413363242630098,
            11800520882738943180,
            15256756628116724015,
            15102633230716809194,
            4752404995807312312,
        ],
        vec![10; 27],
        vec![
            11055708298853713344,
            11718134630995530406,
            1540454672309197922,
            2461234873920328802,
            12156343925049526190,
            7669775936281025739,
            5569544286309952271,
            1251802631971472159,
            7852335389754101252,
            16331287242162052217,
            16922468211499817236,
            1090055930057904858,
            4774304109866833132,
            2115064630415334045,
            3041714142401192073,
            5249251501654981623,
            6324653539847586925,
            7895228639492924348,
            13455067205957702368,
            1142009976612635724,
            13095096323291438869,
            4348574203955863428,
            8491467291307697179,
            3535832683825156722,
            3832291870552829557,
            16965222076837711040,
            676179707804463061,
        ],
    );
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_63(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(17, 18)];
    let mut out = vec![10; 13];
    let xs = series(3, 17);
    let ys = series(3, 18);
    _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(17, 8)];
    let mut out = vec![10; 25];
    let xs = series(3, 17);
    let ys = series(3, 8);
    _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(16, 9)];
    let mut out = vec![10; 25];
    let xs = series(3, 17);
    let ys = series(3, 9);
    _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(17, 9)];
    let mut out = vec![10; 25];
    let xs = series(3, 17);
    let ys = series(3, 9);
    _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_63_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(17, 0)];
    let mut out = vec![10; 6];
    let xs = series(3, 17);
    _limbs_mul_greater_to_out_toom_63(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_6h() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // xs_len * LIMIT_DENOMINATOR < LIMIT_NUMERATOR * ys_len
    // degree.odd() in _limbs_mul_toom_evaluate_poly_in_2_pow_neg_and_neg_2_pow_neg
    // degree > 3 in _limbs_mul_toom_evaluate_poly_in_2_pow_neg_and_neg_2_pow_neg
    // !neg in _limbs_mul_toom_evaluate_poly_in_2_pow_neg_and_neg_2_pow_neg
    // q != 3
    // !half in _limbs_mul_toom_interpolate_12_points
    test(series(2, 42), series(3, 42), vec![10; 84]);
    test(vec![0; 43], vec![0; 42], vec![10; 85]);
    let xs = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    ];
    let ys = vec![
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    ];
    let out_len = xs.len() + ys.len();
    // v_2_pow_neg_neg in _limbs_mul_toom_evaluate_poly_in_2_pow_neg_and_neg_2_pow_neg
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2176876728, 2496909862, 111654638, 4071443844, 1244732003, 1399710541, 3492272815,
        2804216879, 294683567, 2823495183, 1539340600, 2732661048, 2371405604, 611094747,
        2426195984, 3948451542, 3575143460, 2163084716, 2877537071, 1849282685, 1662381818,
        2022577840, 552741512, 1863034519, 2109621858, 3426780715, 233006082, 2766239663,
        1257764921, 1179443268, 3311729910, 4228711990, 3676801557, 83336617, 52963853, 1461131367,
        615175494, 2376138249, 1373985035, 3055102427, 1823691121, 175073115, 3051957217,
    ];
    let ys = vec![
        344785207, 1075768263, 3315797254, 2656376324, 160336834, 3872758991, 671370872,
        1253701757, 217686653, 4064957864, 1185854346, 2308111201, 847669579, 195002426,
        1955159211, 2003106801, 1041767923, 3605273739, 3153084777, 2806535311, 1401436525,
        1148858479, 958627821, 1267879008, 4138398998, 1028065582, 3914213477, 3370118288,
        4054975453, 1815994585, 2486521917, 995353494, 16609723, 4010498224, 1214270934, 797624362,
        4000265982, 1287753121, 874311717, 2200865401, 21122981, 1507911002,
    ];
    let out_len = xs.len() + ys.len();
    // r4_last.leading_zeros() < 3 in _limbs_mul_toom_interpolate_12_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2327202328, 3179332026, 2188958336, 2717879675, 130062885, 140536268, 2499125438,
        3163111280, 4259661702, 2176278885, 422519228, 2482586299, 2904549185, 656169575,
        2052350629, 1346745024, 2132509288, 3672720658, 1036389958, 1864007789, 4247227128,
        3920036168, 1436562554, 4261984498, 3509215437, 583752676, 3145348403, 2267709494,
        2846186667, 95392897, 3743233716, 2210401890, 333864866, 4114644153, 3030283850,
        2885600773, 209380485, 753945396, 719327396, 1293498320, 881901364, 2799735404, 3880748109,
        2227099476, 2045911493, 279042015, 1825819541, 1783146691, 2256898093, 2186071881,
    ];
    let ys = vec![
        4062960470, 3852836537, 2696572187, 2332897564, 3819654112, 1805852435, 2339319161,
        3891614436, 3143079880, 3244604349, 2122448594, 1926396564, 3938383812, 51745369,
        2731805677, 4257919711, 2550692774, 4079294279, 223709465, 1648526554, 689775843,
        3524108772, 1404538310, 806199241, 4278266886, 2467028886, 3773289773, 3246095241,
        2201055218, 2036154035, 3144210007, 423367788, 3883829868, 2190252193, 2069131777,
        3027047320, 1576225469, 3459606326, 2343356582, 2658410138, 1927376994, 3129832669,
        3772482523,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * LIMIT_DENOMINATOR >= LIMIT_NUMERATOR * ys_len
    // xs_len * 5 * LIMIT_NUMERATOR < LIMIT_DENOMINATOR * 7 * ys_len
    // half
    // degree.even() in _limbs_mul_toom_evaluate_poly_in_2_pow_neg_and_neg_2_pow_neg
    // degree > 5 in _limbs_mul_toom_evaluate_poly_in_1_and_neg_1
    // s <= t
    // half in _limbs_mul_toom_interpolate_12_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        1940830933, 3780770129, 1587254032, 832573251, 1504418072, 4247592896, 317874907,
        949850421, 2252881736, 3574316069, 3062236166, 1396410954, 3249498785, 3495392204,
        540855070, 1908700137, 1469179505, 4199276220, 953657385, 3056452157, 2141569526,
        2342475731, 3746376146, 3271677606, 2770490239, 2212992129, 1758619376, 1446549455,
        409094501, 767129031, 3284625381, 1887741449, 1134874072, 2988924415, 1641550007,
        856704035, 80648349, 1467185629, 2753807208, 1609415681, 4087676277, 3276525355,
        1530490532, 3475014952, 1971819359, 2190766950, 2667577576, 2404497182, 4128259693,
        2449514447, 4199089872, 2205116036, 4089987616, 457231895, 2931469481, 3147651033,
        2352907189,
    ];
    let ys = vec![
        3461606200, 1584050797, 14355481, 3385840230, 1703326352, 1625259628, 3642322228,
        911402341, 2158835226, 939248485, 3607511108, 2863853568, 1611642161, 1312857772,
        1839433327, 567060478, 3139863681, 3642698184, 3744632443, 712538472, 2692932947,
        576185818, 156934113, 518107105, 2803035863, 2284220097, 3447382922, 2400125006,
        3565062840, 160044186, 3644393084, 4196433258, 3391883838, 1115703759, 2380388002,
        962895870, 4001772616, 2311278419, 2620271020, 3047789793, 3229254302, 3182628087,
        2718480927, 2872538422,
    ];
    let out_len = xs.len() + ys.len();
    // t < 1
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        3796896013, 4144448610, 2569252563, 2859304641, 1027973602, 3158196152, 4058699545,
        2002924383, 3295505824, 695758308, 544681384, 3452307839, 1190734708, 4232023153,
        451772934, 673919865, 2022672425, 3493426012, 1142609332, 477542383, 1304798841, 461115870,
        3268103575, 2243523508, 606810814, 4235312469, 1885993181, 114475077, 757688489,
        1965769398, 260629125, 2265559181, 2568323569, 4202738507, 422918034, 1258453131,
        3552221985, 1666914845, 4063631552, 1893061685, 1362616670, 3828572660, 3003680479,
        119501228, 2101943449, 1119123129, 2512417484,
    ];
    let ys = vec![
        610160726, 3751120540, 2655318738, 2490069121, 732352936, 1985503906, 765573690,
        2709177647, 3058016350, 1432725430, 2213840145, 1911049343, 3116245242, 519557432,
        1828983405, 3092431113, 3844759473, 547304293, 1609305183, 1824076406, 2409386071,
        2970173039, 4255413180, 894750419, 90356879, 2880999631, 2157180976, 2261258057, 715581698,
        332174009, 27958638, 2464799420, 3232925197, 1952944696, 915312443, 1464711675, 4079172443,
        2445511584, 2092009263, 3412361485, 2354390078, 3106038172, 3481973486,
    ];
    let out_len = xs.len() + ys.len();
    // s < 1
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2187046946, 3600373521, 4275090943, 2120016813, 4177241875, 3185774231, 2397692077,
        1015362399, 2178889151, 3433916223, 1688082118, 1971242178, 236388706, 3802829765,
        521309115, 2299816689, 3207614143, 1053195464, 3584561145, 1178690670, 2940812254,
        3321982035, 2754825123, 3073598062, 202404806, 547895545, 1188944547, 1056841779,
        529463805, 204665384, 850370055, 2063320161, 3724100092, 1180272690, 1398467003,
        2814052449, 1311768018, 659771105, 3226477227, 4230080238, 2134344405, 1461172705,
        2728018383, 1816821358, 3231137250, 2012377728, 2206916761, 3121807673,
    ];
    let ys = vec![
        1717557648, 1819215517, 3449795284, 844168976, 1574237607, 758725457, 762624299, 533122182,
        1201164787, 1968174784, 896982568, 3419630169, 2247559545, 3983311870, 3975342941,
        1112833399, 2721518545, 2493587613, 3444837338, 3313000598, 751186769, 2970698395,
        915811688, 1206259449, 1340427760, 3844346545, 3762393860, 543253569, 1197933603,
        3734607133, 4037352821, 2263945478, 2831362781, 3363558852, 476952769, 1916745391,
        208671986, 2395250976, 1549715018, 2746690542, 1219103496, 256305249,
    ];
    let out_len = xs.len() + ys.len();
    // s_plus_t > n in _limbs_mul_toom_interpolate_12_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        1976230069, 2821313230, 4002048052, 2248747478, 1208640865, 1469538686, 2438066233,
        1106183979, 1877645648, 2583513281, 904899723, 1001323826, 3134049747, 292171929,
        1479818350, 821125410, 2017124898, 3447449059, 2073983663, 1214861045, 3270809855,
        2826108666, 412311360, 3687943078, 157663911, 447468817, 1727023746, 1120132848, 462566659,
        21711861, 2204912119, 631663514, 2655508903, 2912870262, 1326931248, 1409724492,
        3912444286, 1986726296, 190162730, 675575771, 234714100, 3787240294, 3149710501,
        1950469069, 1222949463, 218525862, 929916299, 1757577031, 3896857869, 443052809,
        4256330379, 1106528307, 2502814887, 108409846,
    ];
    let ys = vec![
        3774873792, 2622161570, 566787739, 1447674683, 1128900692, 2570098345, 3920242059,
        2431899603, 1456341665, 269610676, 673205188, 3712878022, 3795578329, 996518376,
        3414916195, 4167667588, 4013410429, 724257700, 698186720, 1170923258, 3652768880,
        1373260172, 3271469225, 971070649, 1556038273, 2204702414, 673789949, 3790414001,
        1550521405, 2173912108, 70968354, 1856452807, 2648613270, 2751500372, 1057118618,
        3117394831, 4409774, 2422780755, 3367234488, 1080583495, 29356841, 3627216363,
    ];
    let out_len = xs.len() + ys.len();
    // s > t
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2764481948, 3824853452, 3714446166, 1652416239, 2448871004, 3349954116, 2715554665,
        2953094534, 2191528165, 1105735060, 407641991, 1058849514, 2583237649, 3635224830,
        1509496009, 2360185935, 2419261549, 2433663350, 262632960, 3504095388, 2570319009,
        2415092334, 72373859, 3953007752, 3259518037, 3401184350, 574975346, 1921349734,
        1293058836, 2824387015, 670301824, 3449438821, 3149566748, 2370941125, 3445476733,
        1172535390, 684380840, 4007537582, 3019960994, 3833788436, 2407231528, 532343833,
        438092212, 830534904, 325324494, 1629611634, 3991887007, 1617691624, 3806774950,
        2737609900, 4123817599, 1139254855, 4270594452, 3772632696, 357643096, 978439292,
        3535266500, 1036728326, 408519941, 386395864, 986295007,
    ];
    let ys = vec![
        2893157767, 2933782072, 1630695663, 765017133, 148924741, 3933388144, 2827967305,
        1580462312, 4233997190, 2184167709, 1124313531, 1269787970, 2637050113, 1899399034,
        458443927, 676372848, 3341236235, 2358837775, 78253712, 1308766267, 1398616295, 442007911,
        3803960772, 2890078708, 2362278228, 452577827, 2295445770, 1281833658, 3733263779,
        3192119570, 1465309963, 4149236735, 2550067398, 3391554453, 3763654782, 280954439,
        4216404337, 2988297132, 1171366979, 752568358, 3832355781, 3002295862,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * 5 * LIMIT_DENOMINATOR < LIMIT_NUMERATOR * 7 * ys_len
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        1537074800, 903591185, 3505885895, 1600301704, 2247503777, 2456507858, 354178772,
        4264234279, 4276311343, 2137271746, 3095634214, 3503644667, 3271712752, 1235289576,
        3972513632, 4268165027, 3304957815, 2349877036, 1814187379, 1622480961, 1887152020,
        617829740, 2759792107, 2650325546, 3834300382, 1711067002, 16368281, 3248020475,
        1355293366, 2500355734, 3216660200, 2844209744, 919471841, 2536405197, 286948869,
        3207728956, 1786641001, 3909697676, 2990524533, 3373134471, 2770917041, 2941741335,
        2275165617, 610985518, 1663622513, 780492488, 696913656, 1787332447, 1693914179,
        2059746330, 4084862137, 1720114882, 2072770321, 2800094080, 164377327, 114079185,
        1630830573, 866212705, 86571916, 2701570437, 1022361296, 2774191689, 1485998454,
        1449541799,
    ];
    let ys = vec![
        10887125, 840662268, 2350057862, 3489480809, 2643647461, 2120151555, 433525765, 1719122308,
        3784715068, 3156307967, 4113669583, 607844816, 2149779595, 55766995, 3922134877,
        1464452041, 2877070520, 3517698059, 3219767758, 138329276, 1434547315, 1010269423,
        3836852303, 521525549, 1124005096, 128173038, 1627976147, 4217098680, 963901397,
        4003948876, 4078383999, 3163439869, 1376461045, 1260808800, 1583549957, 3016546386,
        601137572, 2476346948, 1057124592, 2232232546, 2939285402, 2703166574, 2566511508,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * LIMIT_NUMERATOR < LIMIT_DENOMINATOR * 2 * ys_len
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2480817744, 2385986715, 908796583, 3725142486, 4259996640, 2324291843, 2514777689,
        776517112, 1179390166, 2884250121, 2107025487, 1847592315, 1214792717, 581761941,
        2035752941, 3257884740, 1011095107, 388625485, 621566511, 1878249130, 2298430809,
        3893830507, 2516166455, 1685998768, 3349147146, 4262358486, 164529678, 1000098113,
        1468664761, 1088142633, 2140348214, 672483433, 4236152545, 460911546, 1948312076,
        1030937440, 3633681142, 1170002101, 2159285228, 1104198886, 1581288546, 2266152509,
        1437951300, 3854459332, 88193405, 3804599756, 577997778, 3610194716, 2527782134,
        4194448103, 3390832927, 863423772, 2308481008, 1764994151, 2876150765, 474256942,
        3850214133, 2831691105, 4251752821, 80285354, 3225163007, 84390462, 1489215151, 1516077116,
        299402893, 1093360002, 706962212, 375054336, 678692965, 2794629958, 3684518009, 1067098399,
        3918266067, 770155119, 1400555696, 4260143847, 3420662760, 2234352998, 2627202272,
        2396298990, 2703934662, 2975030448, 1678542783, 3962857080, 2037990778, 2350341680,
        3690768614, 3327392397, 2374080995, 1568940040,
    ];
    let ys = vec![
        2432887163, 3617411153, 4065664491, 954897002, 1958352130, 2690853400, 3170435422,
        333223996, 1886503369, 2874118364, 2360990628, 3409169651, 14803166, 2428352279,
        2882529293, 215157778, 3595826381, 1351666697, 3213081864, 1796627015, 138520647,
        1446708749, 549025603, 1154696063, 951257454, 1061151557, 3578338019, 553024835,
        1032056788, 3332695385, 1916952270, 1402847201, 418140204, 1113800470, 3311963507,
        3579825680, 283695808, 1030062334, 2885288472, 2307021635, 1215165167, 361703549,
        3359666682, 2960119991, 3759575408,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * LIMIT_DENOMINATOR < LIMIT_NUMERATOR * 2 * ys_len
    // q == 3
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2182584668, 370736031, 944597706, 368333101, 3076089385, 4269551750, 455799119, 1640998687,
        1332255273, 3039440200, 1094187469, 4158542740, 4241437189, 786279542, 3313987323,
        801901648, 2460914857, 2458651362, 1161118074, 3733983107, 1911753349, 4261306583,
        981590361, 1357088215, 210591422, 1159943023, 510963968, 2705428227, 3460159465,
        1967595187, 703584117, 3474024702, 3343010520, 1232104952, 823854220, 4012290690,
        3252492197, 3975386640, 1309751464, 232265040, 2026518879, 794539121, 1849747498,
        773993567, 2415934846, 842827728, 25297943, 3952540535, 2909076393, 4183158950, 2579267900,
        898983053, 2480815324, 1004385686, 3272214418, 2360496610, 3884948711, 3937994494,
        1355835525, 1862072763, 4077270583, 456721854, 1202741767, 1334238573, 3202598432,
        2518498766, 1873498914, 1155219866, 3257357513, 3381800028, 777225471, 1628571355,
        281982096, 1238331533, 728101793, 407378640, 1088081860, 2405377044, 2080950804,
        3105324348, 3065313268, 2776290680, 1200951260, 1789619269, 1088225065, 317598486,
        924903972, 3504476787, 1605816151, 388266283, 1613602905, 4051481387, 2773856406,
        3434866445, 2039264971, 1587433780, 1787644933, 2852323335,
    ];
    let ys = vec![
        3040086267, 3720432305, 3025753876, 3307555779, 2232302878, 1705545587, 3746861739,
        3551552480, 3791909589, 3559707401, 3597994914, 1201195479, 2759785652, 2538497144,
        2628719068, 1220743906, 2592330951, 357425155, 2683446134, 369894528, 2918070813,
        3201581079, 352827384, 2667389301, 406071886, 1478662115, 3424718337, 3498162517,
        1851891341, 2009161130, 4175528772, 2739823403, 2691610015, 530787751, 2995441702,
        238468207, 84087963, 2802633771, 2722772179, 1905704311, 791349630, 4036308669, 1333503772,
    ];
    let out_len = xs.len() + ys.len();
    // p == 9, q == 4
    test(xs, ys, vec![10; out_len]);
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_6h() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(series(2, 42), series(3, 42), vec![10; 84]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_6h(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(41, 42)];
    let mut out = vec![10; 83];
    let xs = series(3, 41);
    let ys = series(3, 42);
    _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(42, 41)];
    let mut out = vec![10; 83];
    let xs = series(3, 42);
    let ys = series(3, 41);
    _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(41, 41)];
    let mut out = vec![10; 82];
    let xs = series(3, 41);
    let ys = series(3, 41);
    _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(42, 42)];
    let mut out = vec![10; 83];
    let xs = series(3, 42);
    let ys = series(3, 42);
    _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_6h_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(42, 0)];
    let mut out = vec![10; 42];
    let xs = series(3, 42);
    _limbs_mul_greater_to_out_toom_6h(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_toom_8h() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    // xs_len == ys_len
    //        || xs_len * (TOOM_8H_LIMIT_DENOMINATOR >> 1) < TOOM_8H_LIMIT_NUMERATOR * (ys_len >> 1)
    // !(Limb::WIDTH > 36 && q == 3)
    // r6_last.leading_zeros() < 3 in _limbs_mul_toom_interpolate_16_points
    // !half in _limbs_mul_toom_interpolate_16_points
    test(series(2, 86), series(3, 86), vec![10; 172]);
    let xs = vec![
        3581553119, 2147449432, 208926434, 2037430803, 4143975728, 2356343321, 937192435,
        1637432038, 661638621, 1801480924, 3779152128, 4243491821, 1667774376, 1715755489,
        3661813139, 1605971891, 4030695606, 2961165054, 1368430397, 2222904896, 2817587025,
        1714442303, 3822714979, 300305701, 1874484285, 2601340412, 2275789197, 2695461089,
        2246464394, 1119579754, 1646098622, 3280004748, 33497272, 1940830933, 3780770129,
        1587254032, 832573251, 1504418072, 4247592896, 317874907, 949850421, 2252881736,
        3574316069, 3062236166, 1396410954, 3249498785, 3495392204, 540855070, 1908700137,
        1469179505, 4199276220, 953657385, 3056452157, 2141569526, 2342475731, 3746376146,
        3271677606, 2770490239, 2212992129, 1758619376, 1446549455, 409094501, 767129031,
        3284625381, 1887741449, 1134874072, 2988924415, 1641550007, 856704035, 80648349,
        1467185629, 2753807208, 1609415681, 4087676277, 3276525355, 1530490532, 3475014952,
        1971819359, 2190766950, 2667577576, 2404497182, 4128259693, 2449514447, 4199089872,
        2205116036, 4089987616, 457231895,
    ];
    let ys = vec![
        1495737173, 3863569894, 2781409865, 2031883388, 2335263853, 2715800358, 580338429,
        3465089273, 419683969, 372309798, 2092398197, 1587236508, 1706866472, 1926863329,
        2427550983, 3014840641, 2591183237, 311998012, 1838159904, 2382380991, 3168560843,
        2457672651, 1329938456, 1585986499, 32624746, 1886190156, 1819802220, 4189456784,
        2354442118, 1007664036, 3528608675, 3607011918, 3175583218, 2103466232, 4139172560,
        1977990249, 408055457, 1917901811, 4285926188, 2576630504, 3833124229, 664620480,
        3594197860, 38119241, 2843152292, 1589895470, 132829200, 911163756, 3350029197, 141124331,
        628197809, 3184483823, 2738720089, 3684675439, 2998575143, 2394913714, 2088681890,
        2743885961, 2257026807, 2812703572, 678096205, 2964972038, 1641032123, 3238217254,
        2452280240, 193873172, 277301379, 106064560, 2264572378, 3461606200, 1584050797, 14355481,
        3385840230, 1703326352, 1625259628, 3642322228, 911402341, 2158835226, 939248485,
        3607511108, 2863853568, 1611642161, 1312857772, 1839433327, 567060478, 3139863681,
    ];
    let out_len = xs.len() + ys.len();
    // r5_last.leading_zeros() < 7 in _limbs_mul_toom_interpolate_16_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        3998843185, 3237409891, 364765898, 887299373, 875693912, 790653310, 1949338310, 309040598,
        2753929769, 1560315881, 2158749638, 124625299, 1949071109, 4293842935, 3418183766,
        1387429696, 64843603, 1303399904, 455978049, 3724928213, 4182321093, 1342619213,
        1692503310, 2594578249, 2811338438, 1715625698, 751013184, 1529801113, 2582454920,
        4199343251, 3183268625, 2516721877, 1167772050, 2317983168, 1793272983, 311653702,
        3588179354, 661601476, 2154410870, 2334965650, 4135084105, 1682699224, 47903600,
        3273743199, 3845966395, 1357302998, 3756718174, 2451701689, 2321438159, 3211448326,
        2377823945, 50814995, 1672303030, 4158805623, 2661886690, 1846253587, 702414278,
        4059841129, 3727323213, 1424047747, 2939622087, 2231052374, 2013876172, 2053003398,
        1741887596, 3509712959, 5142212, 3825464748, 3375048072, 338658021, 2655991044, 2889153792,
        2332483687, 934832926, 3863652984, 1414099507, 2895368376, 1013122176, 2794762768,
        2981493251, 3152252275, 1564424419, 536147906, 242465174, 3000707896, 3526733161,
        943706939, 349997931, 1497577916, 3473622068, 1517005385, 2206423568, 1544165865,
        3199998353,
    ];
    let ys = vec![
        1562512360, 3239315566, 2225439589, 502536858, 1867965636, 618137922, 4149231651,
        476678563, 4203415530, 4178036608, 1956783646, 4023049148, 2645084690, 270122366,
        201340005, 4276855303, 1021151730, 916821881, 663141922, 2795604136, 3762385264, 348487994,
        2655354829, 343872945, 2028904125, 1525417887, 867188532, 3911999830, 2139706847,
        3256484706, 961423019, 1530068826, 3577946967, 2361035355, 337639742, 3774308229,
        2185652798, 3532716804, 4018761888, 1357817255, 2216301712, 2861241181, 3053055924,
        3777579308, 795689292, 3386662598, 4160296368, 2005833155, 1297354264, 2851045342,
        954306552, 1613754854, 2227385445, 528669733, 3315107199, 3402866739, 1117279433,
        232818134, 1490857876, 1962534623, 1227821174, 159891958, 1385848424, 4061426539,
        647828819, 2061390815, 4239314784, 1854131914, 3258304017, 524974854, 450125309, 684998491,
        2942294237, 4191667771, 2230185588, 1844054665, 193300986, 2652500966, 4050934267,
        1133780381, 3709046706, 909867408, 4209959016, 4275912160, 277155368, 1775051743,
        4190065677,
    ];
    let out_len = xs.len() + ys.len();
    // !(an == bn || an * (TOOM_8H_LIMIT_DENOMINATOR >> 1) < TOOM_8H_LIMIT_NUMERATOR * (bn >> 1))
    // xs_len * 13 < 16 * ys_len
    // half
    // s <= t
    // half in _limbs_mul_toom_interpolate_16_points
    // s_plus_t > n in _limbs_mul_toom_interpolate_16_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2456061149, 2562918666, 2903450513, 1994190773, 99234624, 3722083920, 4262323306,
        202219441, 4201857695, 3988878636, 1533308334, 401400520, 1069756554, 2457773969,
        2892388936, 3423117995, 1944069442, 492036629, 3426800580, 2282483359, 4006366620,
        1695364515, 2555180845, 1669287836, 349290429, 778467450, 2020203604, 2218159817,
        1450404019, 1278304750, 2412695340, 1592154884, 3868182043, 2240370481, 3859902860,
        1008825116, 412233394, 2475457637, 3664379433, 4204584226, 2750684469, 4113507475,
        2916584959, 285955744, 739598569, 18278051, 3768126932, 2181905109, 2612988076, 1827656088,
        1160380415, 4160443718, 1846086671, 3050604645, 2547108010, 2828666778, 3252702258,
        3885923576, 2331974758, 730724707, 1528859315, 4288784328, 3677151116, 445199233,
        3304488688, 3566979465, 3541025426, 2491779846, 3112990742, 2583249486, 3403111749,
        1930721237, 3428792463, 2896462048, 2985885576, 1819460734, 21206096, 3560441846,
        987100555, 2844904275, 84854892, 1268249628, 3963306788, 3338670067, 2504599089, 65588657,
        321493327, 4249673617, 4150876068, 721566898, 2186945060, 922948272, 1502464627,
        1426914435, 2906888275, 3454987739, 2609132626, 2073366782, 1058809001, 1226951003,
        2624503637,
    ];
    let ys = vec![
        3941840558, 1662743930, 1905993615, 2485835810, 3925643251, 3071436009, 851721712,
        1325046168, 3214018378, 1465803515, 2459667310, 2361559987, 2668552637, 2425633974,
        3200812339, 2594448814, 4170435967, 1112582678, 3198704424, 4028094030, 2482710119,
        2990475705, 708195759, 612294539, 2794828841, 2498141427, 3805184114, 3010938369,
        1479667740, 660767380, 1641177565, 1782849661, 1915222559, 1626388136, 1816788637,
        1338361170, 783877621, 4003339370, 1930607900, 1259399167, 3351643097, 1641708262,
        967800396, 1800752717, 2198926109, 1163817943, 2710351254, 451351637, 1285647338,
        865168955, 645286276, 2685132510, 1773153387, 4273868103, 2604563645, 4105767904,
        2556376985, 158907213, 3579937882, 3059825408, 1920542835, 528717490, 1430681949,
        616489338, 597761261, 3760865497, 963173252, 2915089223, 1441674715, 1717557648,
        1819215517, 3449795284, 844168976, 1574237607, 758725457, 762624299, 533122182, 1201164787,
        1968174784, 896982568, 3419630169, 2247559545, 3983311870, 3975342941, 1112833399,
        2721518545, 2493587613, 3444837338,
    ];
    let out_len = xs.len() + ys.len();
    // s > t
    // s_plus_t <= n in _limbs_mul_toom_interpolate_16_points
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2166912886, 3021127478, 1088026295, 863338925, 1902617744, 2706401163, 3211745137,
        3537828549, 2310228205, 2585051285, 3210490216, 612524924, 269492174, 83675252, 3088638931,
        2020592214, 884676247, 2114372012, 2448236682, 3651962645, 4142890271, 3807368959,
        3038213130, 1740849525, 1839016815, 3718350068, 1798083657, 4018300117, 2557824626,
        1367910868, 3524299249, 2718734101, 2199735437, 2156117642, 3314330151, 91570504,
        1763771190, 730175380, 3035959105, 930897603, 4104577491, 1545111417, 2973200358,
        1531233892, 3216274102, 2879326700, 4043195388, 4012932329, 1225928231, 3148638781,
        3350412374, 571148440, 42117077, 2619230436, 570695610, 3533920410, 2337569860, 2616128436,
        1101128308, 986097032, 4127211776, 1459526104, 121723950, 1459838938, 1563443987,
        3106615121, 2637954840, 238917822, 3086105506, 2960421944, 2937286162, 3871313970,
        554575295, 450448609, 493464699, 3492897008, 3198787067, 2691863142, 874317820, 1804414164,
        572281701, 2867423932, 412542374, 239109523, 4270925097, 1858402222, 3784404338, 162014339,
        182208178, 171269941, 1556499146, 3122050585, 2070559038, 1293272336,
    ];
    let ys = vec![
        131674806, 603734923, 2440163395, 2896151903, 2142986136, 3702794463, 407655836,
        1281722924, 1990690788, 2883417209, 1106804242, 965105623, 3369860750, 2422075060,
        1042530548, 1864787458, 1722387953, 324177444, 3169639558, 1324636283, 1394919591,
        1382200609, 4014256585, 1943865290, 1318181231, 2753206532, 465681637, 3556126827,
        3726586809, 2859198026, 1880611700, 2743775719, 2312093882, 2611444395, 2043850780,
        1748249887, 1827465861, 1827026074, 3842470222, 886015214, 1202152837, 1760966154,
        1303682364, 2141063912, 2027419958, 3046273896, 276337299, 1629565318, 3973822671,
        3586055166, 515343743, 4150823547, 3812419028, 4047886683, 408756427, 30807697, 3839670586,
        3241113948, 1946580966, 211283947, 1648787704, 1254977229, 324210665, 409019127, 999906525,
        3589880779, 2652719468, 2740912614, 75319316, 3276454084, 3598090610, 225502084,
        1039377126, 3755265351, 299690912, 2582901309, 891564570, 1062813956, 318910996,
        2153235228, 2834278326, 130377847, 977327805, 3290994684, 2956083989, 826986477,
        1417957671, 2007397536, 3845476521,
    ];
    let out_len = xs.len() + ys.len();
    // s < 1
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        1012246656, 3781649075, 2144318856, 2608903399, 688555306, 1040133166, 3831584367,
        1593112617, 1823654254, 840638304, 3109717334, 188514461, 398797195, 75875990, 1486449995,
        4269057266, 3729965858, 1861862237, 3631015569, 3651675458, 103019792, 4115125912,
        854107191, 437995362, 1626634580, 1556708150, 2197935825, 142443256, 2516681044, 165384798,
        622726627, 2804275513, 3768014324, 1019999140, 1630141384, 1569491385, 2650112147,
        404117490, 959368136, 1567892691, 3740061638, 1492035182, 2806958299, 3558543973,
        2394278513, 193040368, 140963621, 2363913022, 521760299, 1509309827, 1222622424, 236238235,
        148145098, 1185145642, 4050835140, 3496710859, 2912031916, 2811044753, 293786270,
        1593967022, 3059741198, 957447590, 999733770, 3225819121, 389969264, 1617194653, 930042654,
        2073424372, 1334988223, 2244143480, 3036433790, 314486992, 3505856530, 2253001666,
        2732695676, 2150239253, 2058771616, 2553846568, 3156714961, 275374496, 2154639432,
        1705499511, 2661128488, 2996751598, 1991220721, 2971546013, 947096109, 1988630082,
        3629027637, 2894867708, 982953971, 1288656915, 3544920961, 2725968940, 2718109332,
        1685012966, 2463009759, 1861144639, 2364403606, 3459863283, 983775524, 3466796660,
        1976698215, 708098181, 3069387825, 3638611575, 2579187312, 632774203,
    ];
    let ys = vec![
        1809516468, 2803977220, 3078159083, 486681337, 1568336896, 4117841648, 422990983,
        2706208156, 3747890395, 2705136812, 2904348475, 1582408791, 723059442, 3021061511,
        4080366324, 344817763, 4291264074, 846996023, 4266039848, 1034099747, 3469554547,
        1098932136, 4197098884, 2840685725, 3598360260, 3858664271, 2988904929, 3788334949,
        2778508367, 2862059554, 3453038230, 315104137, 659918534, 3119028578, 178870393,
        1471088291, 908295683, 5373305, 1643272591, 1306263419, 808966614, 4084169993, 740212697,
        4046005160, 2962244838, 2183688745, 2126344144, 2041407930, 201066579, 4119015900,
        3263668172, 1482349211, 660638692, 596028971, 3002749394, 3127689329, 147925750,
        1069598238, 1868876453, 1293290441, 1391999979, 1064595909, 1912901608, 751720124,
        313663396, 2718231373, 1813378594, 1913592155, 2372166689, 312370283, 1294902637,
        1519106439, 2159217107, 3862662328, 3650935678, 3673744494, 1365354839, 4239084491,
        2676645359, 906655247, 2012326184, 363781147, 121405308, 3179196888, 1415338639, 788446024,
        2165764832,
    ];
    let out_len = xs.len() + ys.len();
    // Limb::WIDTH <= 9 * 3
    //            || xs_len * (TOOM_8H_LIMIT_DENOMINATOR >> 1)
    //                < (TOOM_8H_LIMIT_NUMERATOR / 7 * 9) * (ys_len >> 1)
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        4119986492, 3769784140, 1016845783, 1462133596, 4070906664, 3720888633, 4162266585,
        357581522, 1461543577, 4176530320, 4211178471, 3101664977, 3852655570, 166352500,
        1437797012, 3499540684, 1659293446, 4040889056, 2872135683, 3443479700, 655062062,
        1438477128, 1251147166, 2862092792, 1899445621, 1706155530, 2740470033, 732343724,
        3637646944, 4084594941, 2604690616, 4034800391, 3052473123, 2211244267, 947388355,
        584537104, 4143732645, 753960748, 3490638800, 3716731483, 812984705, 1845462359, 65215620,
        4176252687, 2616921776, 2554085123, 4119079055, 4015290385, 697509015, 234073199,
        845662165, 1354305840, 981298174, 1565184955, 207005143, 3409837524, 1220287572, 729153595,
        4103593694, 3696910742, 3965466426, 2266950204, 3856396952, 1764904477, 2684424799,
        2851670593, 1238534904, 1193928568, 775873269, 1360693711, 2015831201, 4011315900,
        3412793575, 214657369, 4288738109, 2288646350, 4016569358, 3132961648, 4045851426,
        3660819126, 4044839853, 3089247133, 2180567261, 2646234732, 1387965746, 2657998851,
        713566741, 3356621670, 3732665499, 1904626236, 64110644, 1408823950, 3590020345,
        2474929782, 849015605, 44073994, 1392682200, 2899713947, 276297197, 2522590522, 3057126922,
        2424068009, 1656987557, 1344629217, 2147192728, 3358875432, 3127883048, 1416207351,
        2542101426, 711240683, 2104649063,
    ];
    let ys = vec![
        2166824272, 3241826034, 3119928903, 4235394337, 702909009, 952063230, 3767289278,
        3471432542, 1289423414, 4165356232, 1144080646, 1098693005, 2158644075, 3466960484,
        107907398, 1849951849, 1697379716, 3245621651, 789557144, 3055443426, 3784862213,
        3687293729, 3527108073, 2085509714, 2098672286, 4237955923, 1799505183, 4280924128,
        1714047371, 679046973, 2920210487, 2630108623, 3799940507, 2820960341, 2480102998,
        3063576036, 1124333889, 3649141414, 3766465016, 1301782752, 3365747207, 318110166,
        1798715740, 3939897237, 1972418626, 525713989, 4204639302, 1845175119, 3066964494,
        3197166778, 2045294098, 1778200774, 1122512884, 487879411, 3912690682, 2631572995,
        119236796, 3659697136, 875446358, 2784882013, 724223194, 2290104863, 3553626657,
        1049986268, 1149074120, 457683007, 342994481, 3969592954, 4124706173, 793289745, 50385201,
        428623925, 330776585, 154172871, 652756593, 1305471058, 3295431270, 1976260297, 1729803474,
        1132360814, 2965768226, 3482945302, 2017386623, 1093051437, 2874103717, 2882475975,
        3735654948, 1766940801, 3723445548, 3203977826, 1788553316,
    ];
    let out_len = xs.len() + ys.len();
    // t < 1
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        562392731, 220608607, 3016011233, 1988425644, 1753293069, 202000452, 2988281129,
        1833355482, 2406139229, 3819843447, 3864310556, 2964129037, 3243750205, 1300008578,
        213321522, 4162936161, 3499001762, 2548817881, 797422884, 3464557820, 3172918275,
        3342298017, 4095467160, 1278405537, 2731045246, 1797909329, 915931552, 1234105774,
        1721010619, 393116356, 3595672812, 246921897, 3156619416, 367413315, 835896205, 1133867872,
        732164137, 2864249493, 4191919416, 2012484604, 2046119300, 464214194, 1309621688,
        2133767576, 1817717936, 3210357881, 2703486295, 73128890, 3834854978, 1247202589,
        3867658887, 743571365, 623502109, 2414902368, 4157134303, 505113368, 3563229135,
        2326845431, 1870329856, 412186635, 643126122, 918171482, 3174437348, 992920198, 2549886607,
        2594507263, 870344606, 3354423872, 3768408002, 1124888954, 3015715321, 3554830011,
        153164314, 2571405898, 3088317836, 3826710038, 532463221, 2174408986, 4066384743,
        2858347925, 3362316763, 3912725306, 1672655485, 747559434, 2494848220, 3353179599,
        2958541661, 2754014801, 2253228000, 3548360599, 2532574632, 3609949183, 4224112455,
        2830762232, 1638592699, 748357099, 2027377618, 2154359009, 2042715188, 2328113060,
        2228778844, 3805284055, 3740811424, 437279916, 2305090412, 2502181871, 3285232891,
        3972490704, 3821166397, 3272678301, 2818983671, 4257635933, 1730183078, 4193248424,
        1863033893, 2751966968, 1985590742, 1553448103, 2731396486, 102894954, 1596356734,
        2399109494, 326183031, 3303826610,
    ];
    let ys = vec![
        1675796150, 1752707855, 2960577702, 4246206199, 1769535683, 1968809225, 2828046910,
        2881173858, 4049894594, 690462953, 288094502, 2301238042, 171278398, 2941234911,
        3855716963, 3569445656, 3999649666, 1033046275, 1441788099, 1121368236, 3979411258,
        1744237927, 2218358768, 3293576320, 3290293896, 2918243870, 1271587143, 1530970846,
        1057501000, 1208621673, 1776318661, 2630121830, 1577699073, 3947123592, 1916313897,
        3189157970, 1684300643, 5245214, 2973935012, 1013692937, 2575458340, 1202811269,
        2350985644, 938605227, 710807110, 3840777315, 2476378686, 1408221563, 3963538750,
        1495981337, 345677390, 2267206171, 597425252, 3652332994, 1484311898, 395641995, 508511757,
        1756437663, 1140313927, 4146891666, 1764315654, 3179667093, 2753886170, 2955381796,
        1486042517, 194560773, 4113616196, 3870970045, 687965138, 970031260, 4029682995, 652798493,
        3718790353, 2790548419, 1973920939, 1737499520, 3093968446, 4016940528, 1440510403,
        2896783742, 3442955437, 3111677005, 4265014223, 2141411993, 177598581, 1546615872,
        1296900550,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * 10 < 33 * (ys_len >> 1)
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2699110155, 1597521691, 470373633, 1547603733, 1114505968, 121868046, 1203637014,
        1508031395, 2678363006, 1428373366, 181016145, 2228522822, 3784155833, 1174663302,
        3119880811, 3351843127, 1893166310, 2733160757, 573074872, 1444139090, 3771161592,
        3202218806, 1184188558, 1337716051, 2651973158, 1523269291, 3416369561, 374511279,
        2679410392, 1510022750, 228616166, 4003251265, 4290642350, 3280834410, 1463007103,
        2311946289, 160203186, 1585276951, 3812024477, 3976220702, 3453132955, 903478724,
        1692984648, 32969770, 393253462, 2089515635, 2580037721, 1368262724, 3975524017,
        1095890302, 3362835893, 1467244702, 3126524190, 1558041706, 1473844963, 2931771668,
        769941843, 1383766743, 2048229827, 3587516656, 744923988, 3114188668, 2900631137,
        1550641047, 3971430916, 1024708451, 266103704, 1961354549, 2996989736, 96509114,
        3209890269, 558760343, 1942895993, 3030238742, 3901981217, 1553802266, 1100766439,
        3617908428, 2903765815, 160559154, 3223711195, 1505354960, 3400362702, 1532921847,
        2633984159, 2547091597, 3753857128, 1603256426, 1467979288, 834683287, 883770936,
        2091938738, 717946381, 1738927478, 4212395432, 3554713903, 2891799196, 2460462345,
        1068611661, 1983982847, 4254702408, 2862607717, 205351503, 899537845, 4178691861,
        2027719370, 1613590765, 1667586567, 658709687, 569869145, 2542265621, 4018309335,
        3115945617, 1860868443, 2042873761, 2857432666, 3454761191, 644158605, 952236065,
        1246066126, 1054146509, 820815201, 4116210106, 911797864, 980581305, 3662945636,
        2395465042, 2988547838, 1592529958, 4123985797, 1086072833, 1344358819, 2713461665,
        1166149285, 868088866, 120572741, 2719927699, 1609748024, 1381464015, 2371158669,
        2027765235, 2167125167,
    ];
    let ys = vec![
        1088368182, 3374520919, 2135624591, 387360487, 3348241848, 2559227752, 3399060139,
        2714380393, 371475119, 1878664574, 3306012397, 3678253780, 2537332523, 634258529,
        2378309044, 1907416933, 2176550942, 3624058493, 608851538, 77324946, 854257549, 2563267740,
        1842976277, 2560652658, 1177372492, 4164431297, 2857340159, 2813781292, 3608170666,
        289363804, 1276568988, 1858470908, 2027103570, 1210716416, 3885179582, 980951621,
        1332461771, 2439102632, 78855299, 1535655076, 820717475, 1372739985, 4277759699,
        1928781862, 2056547589, 2689637269, 3487926306, 1712399855, 2387894324, 1345157890,
        420194957, 2408734980, 1088476282, 1237271902, 1570597541, 1299046081, 2179334980,
        3757788366, 1320170918, 2220338411, 3413493273, 4047658929, 1004605073, 3758106669,
        3623304103, 2595195415, 3392723185, 227342906, 3297612463, 1577658966, 3646845515,
        1442494023, 1805636027, 1293916606, 1856823520, 2157779944, 1701394115, 1586957718,
        2203990942, 3794477956, 470446365, 3294563814, 2801795027, 2712013665, 1473818504,
        2726878536, 4276109446,
    ];
    let out_len = xs.len() + ys.len();
    // Limb::WIDTH <= 10 * 3
    //            || xs_len * (TOOM_8H_LIMIT_DENOMINATOR / 5) <
    //      (TOOM_8H_LIMIT_NUMERATOR / 3) * ys_len
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        561532292, 1489901668, 253691236, 2318497628, 4251899866, 2953100123, 2461942387,
        3249119706, 369296206, 4217598289, 2953582842, 2377320700, 2568035293, 3298340549,
        2920237456, 546954422, 3577037488, 92033404, 145112422, 2502470868, 1400281201, 2303329463,
        633903343, 3944799609, 57410139, 3300617501, 2988597979, 3756577241, 1111328153,
        2315706065, 2359556880, 170569603, 1875977300, 2265470483, 1673672630, 2694260146,
        620660163, 4086502272, 2268845329, 2531408738, 745892765, 2985301421, 641961881, 620799476,
        1513471210, 2206613713, 895576219, 3432428917, 1326478424, 721293050, 4129832181,
        2328492091, 790053303, 1886834609, 2560250292, 14318242, 2263105643, 3768652300,
        3685567034, 1053183071, 4035043131, 1140590999, 1312717632, 820131789, 2381319255,
        515196511, 2436315339, 513976227, 688721295, 2969875582, 2843970288, 567346371, 2277297382,
        3266747935, 3125131739, 391700432, 2628083321, 779071641, 2971551059, 3314957816,
        871191953, 3336232721, 2709555815, 918246312, 923872244, 2827827195, 2966239254,
        1586350108, 1024706608, 3525365202, 594940169, 1872199600, 3239665333, 694926057,
        4271587637, 3916707341, 2190558956, 2300957253, 772629754, 238192213, 4247448230,
        3565892036, 3184365211, 2516885224, 3979985839, 1180780557, 783722885, 1061155274,
        3798456603, 3320505371, 589311966, 1623819314, 1001947009, 4232577387, 474033387,
        3930737007, 1729002759, 3148522805, 658463592, 1424102704, 2305467923, 552214960,
        1642169523, 2066768192, 3794357111, 3557589618, 4204044663, 1778418301, 1181058217,
        1612951946, 588858899, 3836952607, 2977777237, 9660119, 2962495164, 2992962211, 3923151463,
        3345257705, 2981383558, 2363319525, 3608470059, 874691575, 2586822309, 912499640,
        603852379, 1888867173, 2770352234, 4238262229, 3877831016, 2596074823, 3663087235,
        542677879, 228437282, 480155344, 709141324, 782255006, 2839979153, 1271748198, 1031245745,
        3053801112, 3462023195, 172164778, 3874269611, 3279470898, 4076666435, 3596981639,
        810288236,
    ];
    let ys = vec![
        2267307147, 2856749182, 90961593, 1052868712, 3437758783, 899762302, 2825414504,
        3100252964, 214994098, 4262558841, 2740902902, 1743352008, 1922058509, 2975766063,
        3399126202, 897115238, 401142729, 1715015464, 244955103, 3177992227, 405891649, 1768495060,
        3524094602, 4080016656, 1432684874, 3397000143, 434821341, 1754546815, 4094846559,
        4286153335, 2240106918, 2310322076, 1713831329, 1428414845, 2188185809, 2111765503,
        1131727372, 929039425, 465389857, 2677898170, 1160632541, 3376736943, 491317513,
        3242464822, 2045506450, 1242019843, 3965879224, 2484620055, 3447163057, 2809067396,
        2409780789, 548871240, 2024164190, 4133800101, 105887616, 4257692355, 1942633927,
        1532037864, 2395107706, 1815832330, 3470252735, 3388820081, 2275739186, 2499364631,
        2076801086, 3670985009, 395675635, 4219873512, 338672631, 3757753689, 730801911, 529959909,
        393050276, 2506914867, 349901023, 889932113, 2359995672, 2260685091, 3193258383, 993644814,
        660499678, 4213349264, 915065087, 44382277, 1138965336, 3728412916,
    ];
    let out_len = xs.len() + ys.len();
    // xs_len * 6 < 13 * ys_len
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2628750713, 2361938253, 4208887130, 2080756349, 672997060, 2130716095, 4212789307,
        1848408220, 3496438901, 84923093, 3765911616, 1894564551, 1611354899, 273564832,
        4150644671, 3064400972, 1543250045, 2858928926, 1070491873, 1579001797, 1184344436,
        2022081087, 579467674, 3617124184, 243126922, 3969739693, 3428743965, 4195070089,
        3234082950, 333482038, 2496442330, 894715026, 434494401, 2735937738, 194433417, 3547773069,
        1310458322, 1092526211, 460831665, 314882384, 352225614, 2524634920, 3907974253,
        3587596708, 90585625, 3922151265, 2706453821, 2479984430, 1899379393, 521798300,
        3544490367, 4025847744, 520557399, 1960228079, 2440638916, 3922652110, 2874111917,
        3780219346, 1155970954, 3101729918, 1154605497, 1641746684, 3885558155, 713658859,
        2298415211, 1104859444, 397648670, 938276629, 2245930839, 351999985, 3962599907, 162580649,
        4135267160, 3893533927, 708603373, 3649893874, 1549341047, 446919848, 3848748260,
        1193215655, 1667453481, 4263900238, 3083741929, 569862864, 111540402, 371222591, 836814821,
        2523967214, 3373518119, 288800478, 2983910658, 3822451776, 3717238299, 4103554210,
        497321656, 1267537380, 2210886058, 393666292, 2341926460, 2993069655, 3449632275,
        345728673, 1850135319, 1546568315, 349065480, 4148532822, 2743969263, 1135023914,
        856540508, 710683508, 621037301, 2245404525, 1375763902, 4230256152, 1103848377,
        4068950000, 2774111626, 4005998377, 1420452414, 142442998, 296389949, 1793483671,
        3236856344, 1470778143, 2199111141, 1485252921, 3021831668, 3409728715, 494048497,
        425352623, 547187992, 307378564, 1878128309, 3632431108, 3608263098, 3158948042, 268203532,
        1889965332, 2413564070, 494017444, 4018318246, 2256416411, 2325799856, 424840978,
        1475143253, 2578705133, 3454058108, 875893914, 3369487214, 2161583703, 2368049199,
        3710749831, 2234731371, 2548143256, 1212646047, 775618131, 821458424, 3027168315,
        841398247, 3991240853, 2094376383, 3587145176, 1943420573, 781156526, 2434343084,
        2126213029, 2402207510, 4019808646, 316909832, 2750686513, 2438176721, 308346316,
        242903105, 3531437189, 4095795963, 2087963376, 3007755141, 1683404210, 3086330285,
        1333246101, 1581088323, 1356633529, 3666603849, 540703941, 1410918479, 2987931996,
        2750320701, 3483743338, 2503688388, 3308034421, 3019960566, 2668657879, 2363438262,
        1470517413,
    ];
    let ys = vec![
        2312659839, 2350424241, 1787407270, 1271425122, 4187967770, 818645453, 3539315256,
        2178962268, 2575529612, 3589703821, 2051328589, 1350506812, 1181962471, 440960359,
        1364212437, 3414960630, 901255513, 1225743051, 2301315145, 1970642256, 2850715818,
        3128888797, 2317420929, 2155667782, 1962983120, 2710186451, 648444928, 2272821232,
        133989660, 3141011857, 1529770260, 802759102, 2173416392, 1305065341, 45650077, 1082105231,
        1602486318, 3755990436, 1936896216, 2400713018, 1591016508, 4068454220, 3596573883,
        2619324298, 33580971, 2286577695, 3083324417, 1169438566, 3225233768, 808739442,
        2766243970, 3455083573, 1549857550, 3592398125, 2248831497, 3521856807, 1967034,
        3078700295, 1346379862, 3820864333, 2903766704, 3884607466, 4174763992, 270916374,
        3218398044, 3434381035, 159751999, 2768080251, 2464394277, 566049661, 442155673,
        4112913396, 1456961327, 38309439, 1525792638, 2372197825, 1956558568, 4294769490,
        3096019721, 2031664251, 3017984223, 1381760341, 4260655051, 2253457354, 2984264086,
        1088854315,
    ];
    let out_len = xs.len() + ys.len();
    // Limb::WIDTH <= 11 * 3 || xs_len * 4 < 9 * ys_len
    test(xs, ys, vec![10; out_len]);
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_toom_8h() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        let mut scratch =
            vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(xs.len(), ys.len())];
        _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
        assert_eq!(out, out_after);
    };
    test(series(2, 86), series(3, 86), vec![10; 172]);
    let xs = vec![
        4161517722334671206,
        271035878974614969,
        8768264966582261304,
        8206956804546718361,
        10016740860128464264,
        2943682457917422384,
        10577659840261915262,
        12098681961003341371,
        2525073961085508373,
        6868684266500244649,
        509821878609210517,
        4263249474085213536,
        2307565444887817803,
        12419028787241261317,
        1281995004584322618,
        13869993964458308221,
        4485392892470363180,
        3274613913599014818,
        13075432300049036016,
        14042578030952079199,
        13098932791585915075,
        10142506622182970580,
        7251838551095799764,
        17051632328075633635,
        14834683551906590335,
        18022997779550454484,
        13851155116066438974,
        3279920275984726839,
        12575373964173554443,
        15489604937489489906,
        12630529117895897413,
        9562379919499143009,
        1417878505992996127,
        2188363987094684136,
        4744951957683006311,
        12112952790370550632,
        313413052918057660,
        952838993607855174,
        5933080761807357068,
        5875775551766205334,
        10228588026136726855,
        13111641204516926240,
        10636665232562365918,
        11359964631071199362,
        5929704785320756798,
        7890881054270407934,
        4884891330151666074,
        11055829837821054078,
        13707765469312479203,
        8153558212434726394,
        17445193585880639275,
        6568289716541023323,
        8041757936108402209,
        11089742802624534358,
        9104866424438942973,
        3236275382520001400,
        9213626463300221545,
        5359296447813232573,
        2888775200925828643,
        1504166968227419931,
        14327007717613163305,
        11802896026004225094,
        12726419078417922871,
        13309155468447837337,
        8586421913645886721,
        53962250520164792,
        10299535356260218467,
        16946113957982976032,
        2902460381404773190,
        14757465720632393328,
        4285719983639600380,
        8437230965528545912,
        5716398831975234496,
        1373020012523386515,
        3326027605041066746,
        17656221602314109866,
        5927567778944922379,
        7395768072445629410,
        11551011221061348004,
        13862329630891761456,
        3443745263810155735,
        497965567194021216,
        13073929868627981515,
        9340721263069758697,
        16189911797862953019,
        17331477506134450185,
        18441976800868209749,
        3733349995001197864,
        6937510789920909911,
        10459182483341515090,
        16282716012969111817,
        3142838808933013004,
        176169927348158611,
        11447076894000834768,
    ];
    let ys = vec![
        3898028307372664956,
        17056541935478225194,
        14004255653437064260,
        5500365157672511509,
        15774417221201329293,
        3229812365626959565,
        1542674716041014040,
        7356251598468809943,
        18181760582149085284,
        6447899299954117957,
        15228766707939040914,
        15272444333081468110,
        8256864946368840840,
        15131537266446006793,
        15615697223616434527,
        18149135087211146951,
        6359898540214993921,
        11306735121000975748,
        10447887135010383963,
        12772438236294882417,
        17631737056955710770,
        8945404460793598129,
        8945720889114856152,
        3648711115155303988,
        4353348842999127960,
        2258094147328762698,
        17154005505580115535,
        13882701371593165208,
        1610163839528654069,
        15350954595089578211,
        2071555476679360064,
        7797386300145290156,
        12827100752536039252,
        9294676638100895403,
        13194197740670114341,
        9490868657650122292,
        13133123495028388830,
        12350221742051084451,
        12424378851382358824,
        9807292823459903392,
        10987641767148832341,
        10914994897211362878,
        828242546480310184,
        18006801931269403354,
        3042908768715701160,
        8117699035539485321,
        11944855102415629844,
        7384949013429384602,
        11066738683960763872,
        14686958392900209441,
        16412025437157422416,
        1334344044228684681,
        1631366399820348565,
        18062594111889109095,
        5175299421808157128,
        16616812968596909641,
        797326939277169478,
        14593183003025528412,
        3580961852669434633,
        2104948106588459323,
        14322976299272137248,
        3536903766355663369,
        6932211742640251008,
        17616766237027326857,
        1477865108082927148,
        7817082715310166375,
        16183969129154492111,
        18146981620947356859,
        11618268397687338183,
        15294321769160092821,
        2447614867702883346,
        15261926111061449320,
        4029723450982123355,
        7820711996327940306,
        6188156586792352365,
        15703528769184364862,
        6698415575574578533,
        7770946582061166480,
        3543987370105940918,
        8845414905041844753,
        13110356713999163167,
        12862812457872444435,
        10749027774576978236,
        17822296942008093229,
        13898152040175560707,
        1879212271519144526,
        5428215269251527991,
    ];
    let out_len = xs.len() + ys.len();
    test(xs, ys, vec![10; out_len]);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_1() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(1, 1)];
    let mut out = vec![10; 4];
    _limbs_mul_greater_to_out_toom_8h(&mut out, &[6], &[1], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_2() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(85, 86)];
    let mut out = vec![10; 171];
    let xs = series(3, 85);
    let ys = series(3, 86);
    _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_3() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(86, 85)];
    let mut out = vec![10; 171];
    let xs = series(3, 86);
    let ys = series(3, 85);
    _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_4() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(85, 85)];
    let mut out = vec![10; 170];
    let xs = series(3, 85);
    let ys = series(3, 85);
    _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_5() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(86, 86)];
    let mut out = vec![10; 171];
    let xs = series(3, 86);
    let ys = series(3, 86);
    _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &ys, &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
#[should_panic]
fn limbs_mul_greater_to_out_toom_8h_fail_6() {
    let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(86, 0)];
    let mut out = vec![10; 86];
    let xs = series(3, 42);
    _limbs_mul_greater_to_out_toom_8h(&mut out, &xs, &[], &mut scratch);
}

#[cfg(feature = "32_bit_limbs")]
#[test]
fn test_limbs_mul_greater_to_out_fft() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_fft(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
    };
    // n < MULMOD_BNM1_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1_next_size
    // n.odd() || n < MULMOD_BNM1_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1
    // ys_len < n in _limbs_mul_mod_limb_width_to_n_minus_1
    // xs_len + ys_len <= n in _limbs_mul_mod_limb_width_to_n_minus_1
    test(vec![2], vec![3], vec![10; 2]);
    test(series(2, 3), series(3, 3), vec![10; 6]);
    let xs = vec![
        3880369625, 2046269565, 1822282335, 2221259246, 591087516, 1168798342, 4157592488,
        99508592, 255770597, 4030412990, 732445015, 464547519, 3022806246, 2041511902, 2832066506,
        1945336809, 2455710210, 2304201475, 2565115467, 2887049415, 2514800023, 3951089948,
        714185103, 4011010683, 2183092021, 153659003, 1295368576, 554753781, 1202210183, 392527848,
        3392160678, 2126628229, 1954902464, 760602891, 1941838029, 2295913780, 2190426597,
        871205334, 4294317592, 799801005, 3738343153, 3843172993, 3381633143, 1733844263,
        2997203172, 2345470867, 3226692979, 557321994, 1836626917, 368056172, 533990784,
        3801087097, 3221981658, 805171773, 3035654037, 2848584333, 89670734, 3315827751,
        3445810294, 226344610, 2162265647, 714025958, 1173196238, 2446744923, 3316515761,
        676833056, 191852669, 2525504847, 586963753, 1820425542, 1510700202, 4126606114,
        2788622730, 309576646, 4052402525, 2735003544, 3694996544, 3958033962, 307244885,
        1598433286, 1250405164, 2472596463, 3534664036, 2914775535, 2335655040, 2777457454,
        1202172721, 767150558, 1431223479, 3563103489, 3430079883, 4054708690, 343518806,
        255849022, 3410302498, 2987095424, 422474648, 3534995881, 2072603391, 983856518,
        2521863636, 2086597423, 4075644176, 1360888861, 9486493, 3040705091, 2589936789, 379991635,
        1702022115, 4194552654, 742133780, 3260523830, 221457065, 751545474, 4048101407,
        4107620071, 2856093473, 869485030, 3089687745, 513237346, 4189790945, 1155534451,
        1357509558, 2416443221, 4126957773, 2612482077, 2928198318, 4218852101, 2788429387,
        3691118443, 3434451810, 1530913083, 2362628863, 3668182815, 3653654411, 3922150906,
        488104251, 3975223481, 512164527, 3204770876, 1442410662, 1358396797, 2305452029,
        3568322018, 2713465272, 3930252214, 2727648291, 1376036201, 2844159250, 4259111954,
        1338772244, 326634457, 593019032, 460022059, 1137416211, 950573100, 1920458741, 298702673,
        2079101523, 4126531255, 3323430507, 1118979188, 3336349435, 176447964, 417033567,
        2639333137, 996914891, 1580004163, 741252635, 1564648390, 2580681751, 3909382539,
        289972070, 1230903117, 2099994154, 1877884253, 1578112391, 181595699, 209137808, 364111390,
        3091370573, 3717430094, 1497980372, 772011387, 1736317651, 2137190646, 1174322895,
        1319426499, 4036048690, 951480110, 1368739234, 454232013, 3405265242, 3006474045,
        4250473707, 1846529525, 13225441, 3901491932, 1470597832, 3749311124, 220376354,
        2730319262, 1742371952, 1929737641, 491219608, 3973589512, 786610468, 4206168074,
        3542613310, 1361451667, 1186147370, 3820744969, 2182532649, 3190392441, 3449735165,
        1599417291, 3044444618, 2645014286, 2328065301, 2881363664, 690726057, 2578295696,
        3140311317, 3185064779, 4160401154, 2517971929, 2601508946, 2845073901, 1794261891,
        4239011852, 1549281539, 2862902144, 4170181031, 2718449838, 2954257599, 3793978253,
        243076086, 1756228332, 3316157050, 1882375898, 747360475, 3802225483, 3411924317,
        1538849403, 2347315665, 1542296028, 4199754284, 1699607468, 226438193, 1396357313,
        2504367108, 115882834, 2132918964, 2313884605, 3493925632, 3256604042, 1802499772,
        4143130220, 2699065525, 3936713656, 1933331639, 3450925891, 920946102, 338978210,
        1419367915, 1251885406, 940581709, 2801253506, 1622354125, 3256815103, 1649055984,
        895271671, 3164447220, 2294092270, 2336759237, 1943099632, 3379324701, 1780896822,
        2108194859, 3391835652, 357715931, 111215427, 1672590365, 1175496280, 2195788696,
        2450853995, 1062061481, 221694632, 1531591811, 2421141891, 104765638, 4131690025,
    ];
    let ys = vec![
        3402299054, 2443296419, 2326428269, 2938901235, 1489264423, 1025170170, 2647815691,
        435123300, 643986325, 3182752687, 3040783829, 3327776663, 4084235129, 1577161850,
        3046348612, 945764789, 3712423832, 145840946, 659548547, 3682821459, 3704260942, 155447248,
        1379127039, 3607780378, 1896268859, 3867559499, 437903223, 3186425005, 3136267957,
        1086679793, 3052315141, 1535150259, 11610737, 948834056, 35218463, 2910992368, 3037289921,
        2527638448, 2625500813, 99273820, 2152617028, 3837002371, 3587378066, 1899863001,
        2628256365, 1281090777, 780238141, 3416959702, 3474708362, 866926151, 2782693077,
        2176773584, 1657381867, 1987900441, 1033834075, 2151004892, 3799723102, 570715572,
        1702767503, 3829428181, 2876075242, 1315903695, 1010995262, 3192533410, 4223340307,
        1518935682, 4120728343, 949085616, 3610981279, 676112694, 2369026265, 992944154,
        2814490763, 204279795, 2988763406, 90954787, 2939415952, 1450433956, 3654918101,
        4261365703, 2827561403, 3956967431, 302222838, 1789467914, 653672641, 2014108751,
        3804591848, 1353537076, 144676559, 2784745181, 2038239621, 2632214710, 1652343153,
        2191323217, 1543734552, 3806634097, 872960020, 351932530, 3624254243, 4020004554,
        2040409044, 2160510203, 402399640, 1549056404, 1256470133, 1550578376, 4008948436,
        2024833971, 2697826883, 3100596473, 2172952378, 1345794753, 1766441560, 2311087668,
        2304301869, 3945397070, 4047741564, 1878774686, 633898466, 1674899800, 2656760925,
        1239528158, 1619807296, 1606748685, 2021427526, 105085958, 2353240602, 51861436,
        4109994148, 446547938, 2019486171, 897598458, 3808139004, 3092488039, 4119226539,
        875964411, 3988200888, 1056372570, 3344850714,
    ];
    let out_len = xs.len() + ys.len();
    // ceiling_half_n < MUL_FFT_MODF_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1_next_size
    // !(n.odd() || n < MULMOD_BNM1_THRESHOLD) in _limbs_mul_mod_limb_width_to_n_minus_1
    // xs_len > half_n in _limbs_mul_mod_limb_width_to_n_minus_1
    // ys_len <= half_n in _limbs_mul_mod_limb_width_to_n_minus_1
    // ys_len > half_n in _limbs_mul_mod_limb_width_to_n_minus_1
    // ys_len >= n in _limbs_mul_mod_limb_width_to_n_minus_1
    // half_n < MUL_FFT_MODF_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1
    // k < FFT_FIRST_K and !bp1_is_ys_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // k < FFT_FIRST_K and !ap1_is_xs_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // xs_len + ys_len >= n in _limbs_mul_mod_limb_width_to_n_minus_1
    // k >= FFT_FIRST_K and bp1_is_ys_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // k < FFT_FIRST_K and bp1_is_ys_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // xs_len + ys_len < n in _limbs_mul_mod_limb_width_to_n_minus_1
    test(xs, ys, vec![10; out_len]);
    // n <= (MULMOD_BNM1_THRESHOLD - 1) << 2 in _limbs_mul_mod_limb_width_to_n_minus_1_next_size
    // xs_len + ys_len > n in _limbs_mul_mod_limb_width_to_n_minus_1
    test(
        vec![
            823938137, 1528271032, 3754017422, 3733650953, 1787749760, 2772188495, 3146748967,
            3753298741, 2089159904, 4070772057, 2984890557,
        ],
        vec![
            2220104467, 3431834219, 496531593, 2537836643, 2934054423, 2997129442,
        ],
        vec![10; 17],
    );
    // xs_len <= half_n in _limbs_mul_mod_limb_width_to_n_minus_1
    test(
        vec![
            2085137171, 1117546275, 1886156676, 98424960, 2074093393, 2154503198, 189860005,
        ],
        vec![
            2916276379, 1952025216, 3574945482, 3027541861, 3394630765, 3511855818, 3454027741,
        ],
        vec![10; 14],
    );
    let xs = vec![
        3346334198, 660089823, 1779198723, 4241430399, 4112870857, 1352618861, 1729484362,
        572082922, 374443979, 822043705, 2834718493, 19922774, 203041204, 417612275, 173708633,
        1873747876, 1115987846, 3958850382, 3644186291, 3686056190, 1629556768, 2239527142,
        1134947537, 1660828195, 984095088, 4200985541, 3991487958, 2934101592, 2323313411,
        1179453512, 62744225, 3022926157, 1204728242, 683322759, 976408310, 1199915158, 2208312607,
        1976553561, 3798271553, 2580593309, 1276385336, 3072657792, 3916404370, 672093385,
        1602757373, 2877995560, 459021627, 2459620479, 3261687667,
    ];
    let ys = vec![1970030099];
    let out_len = xs.len() + ys.len();
    // n <= (MULMOD_BNM1_THRESHOLD - 1) << 3 in _limbs_mul_mod_limb_width_to_n_minus_1_next_size
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2543408782, 1266633745, 2743231472, 2766403608, 438908947, 3460789749, 3630408044,
        4052297001, 2259735507, 1395222229, 2880537307, 2266244913, 3106375065, 4033662594,
        2197241056, 2449250954, 1269604066, 4226953881, 1181923073, 2906499442, 618315422,
        1293477195, 455999673, 3446323050, 460578407, 170926229, 2610572348, 1724481392,
        2267784026, 2911392952, 4245143337, 833329583, 3024865031, 3838237902, 4249946418,
        774499324, 3732360179, 1908094710, 99975124, 2744426859, 2951516386, 2663054980,
        3620773499, 2715105234, 1069661703, 1725593690, 134677653, 848464942, 3075189804,
        1940457420, 116827531, 916174854, 2134007037, 2881244486, 2449027483, 15406818, 1634396810,
        1419261333, 2574198603, 748540873, 2926939156, 301472433, 1173949752, 2930741739,
        2230418741, 256835538, 4064412068, 1738573734, 1895793567, 3890763992, 3255082722,
        3145554238, 825530687, 2184243814, 3358692034, 2028185791, 2584878342, 4246143870,
        4096308436, 1493796799, 3198683824, 958009917, 3599107601, 2124235080, 1908664979,
        1884273505, 1993105569, 4257912077, 1293474815, 144319134, 1283000109, 689416500,
        248087950, 3372888373, 797676775, 1099240320, 2897210375, 25499570, 1021279196, 4273864172,
        3624163828, 3815582815, 457007067, 3685557376, 3113206218, 1520149313, 3567636845,
        2313838968, 811337197, 3022157430, 3929077463, 630649288, 4185681977, 3884638570,
        3871575830, 3812933393, 3617873784, 2442100269, 2633117987, 3126713288, 3020815221,
        3048896042, 3939075027, 3731945331, 1837315430, 74691384, 2423842515, 860417060,
        3990961597, 81940834, 3804076393, 1027448820, 4117620903, 619001292, 1446779730,
        2640513708, 3918041967, 3943981544, 2093854161, 3338392154, 4185174748, 3691874289,
        2422772519, 836885880, 2464414876, 1342786029, 2607551795, 519427140, 1269084612,
        2012545593, 1910023251, 3870397852, 1752342495, 62899098, 1964351723, 574570176,
        4271761385, 2125939300, 2186180440, 1446655249, 636896956, 1900705578, 2770721850,
        221383058, 2778313291, 3662733150, 113040974, 3161976326, 3594592215, 1578809210,
        3430762597, 4086119694, 917514282, 2739064994, 3718841761, 2569118103, 3532927375,
        2488953847, 4097747319, 3510501052, 4275039026, 4111742862, 841130100, 2105166600,
        2642414854, 3745457918, 2060503105, 1211258170, 745294125, 2527724536, 4252000421,
        198531653, 4269159086, 4102184606, 1925717294, 2401914260, 2180208298, 3855440515,
        2947660388, 89391982, 341280108, 45974116, 817639057, 3864224117, 3825084464, 4004628371,
        3664046777, 3580875139, 3834474518, 3197200842, 2839629413, 4006466001, 3092747399,
        1822694634, 2230003299, 1000550258, 291919421, 3864487022, 600509558, 2421222252,
        2115755461, 926640810, 2002540661, 3617271930, 3265295915, 2984793601, 661262298,
        1600368090, 564649718, 1020558915, 3428747156, 1243663102, 751843834, 447428139, 114163331,
        1240772456, 2267238706, 3318866425, 2216125111, 2656152099, 1981391063, 4162185070,
        1989273174, 2366291345, 4094113857, 4076531501, 3089202974, 3372441377, 1871753141,
        3002801592, 1105217608, 972267254, 3993402673, 77013156, 4003577482, 3152953829, 863580451,
        2479483820, 2527301536, 3878513872, 3807786041, 564867640, 1895530055, 3906578562,
        2824033273, 275515022, 181642845, 503386038, 2584088333, 3599055444, 420729625, 4180676549,
        2602624287, 2251299375, 3595638962, 2745732537, 783940329, 3625116905, 3375879970,
        77354347, 1972983789, 3511425209, 169761148, 8623562, 2276594926, 1194550780, 489005853,
        4255140856, 4059088952, 1103341609, 592992254, 3076804884, 3168223693, 3869640900,
        1448347281, 3628249682, 3963524164, 739629606, 225612954, 2007965485, 2435679777,
        3884407152, 680695000, 422748305, 3833488128, 1934960934, 3013030352, 3091262242,
        287747455, 1010466572, 1233120052, 3015836459, 3683508326, 873422956, 4026941482,
        3422696443, 3806255866, 3370896404, 926075714, 2366056578, 372468269, 1934359570,
        2778361839, 2422304253, 3149511790, 1765536704, 1466835015, 2647081606, 2232028096,
        1887102010, 2053921556, 2081985460, 4088071498, 1000209741, 2682119568, 2018168892,
        1967010689, 1231711028, 642926859, 3402695716, 1616623846, 1778090387, 4273871045,
        2144323182, 2355455152, 3058500321, 2111373360, 3205216213, 1632428114, 1291410914,
        304332341, 2464451947, 604765881, 3088666951, 3163270372, 1911407332, 628924590,
        3309428284, 3658706490, 2946747946, 334552823, 315883848, 4054370452, 192902227,
        3362200784, 3911535825, 2523325363, 3944931969, 45140220, 2234487500, 3987876591,
        748422762, 3789694351, 117694013, 2409009225, 2037785030, 2749757579, 2994604201,
        1095488386, 3911443806, 632285046, 1555347187, 989477161, 2498459703, 3453841202,
        905849441, 3077554277, 2783941661, 1589836808, 1694641806, 2919594448, 4034815355,
        3783838629, 1501735638, 2218558482, 1478833339, 2921810148, 3688667080, 3025009060,
        3760899165, 1419109058, 4081877407, 3586565112, 1840306376, 245596503, 203347508,
        1804179379, 2619852801, 2284217925, 2936641491, 1783088264, 4221164293, 1960751239,
        1136988770, 4253264048, 2862667240, 56552174, 1954836729, 4117460062, 2611671760,
        578953709, 88647311, 919089462, 736785565, 143779026, 420020309, 563074723, 1980974136,
        2058350510, 3442922006, 3672166676, 3171867396, 861448357, 4057258264, 1603426213,
        1399185345, 2726755008, 2419822541, 3700060595, 2838871672, 3485481456, 3588090656,
        1884031600, 428805635, 2375415597, 2682476186, 1664697401, 1327313885, 386653143,
        1792979205, 876676642, 3013498460, 2015444185, 107812130, 3699119088, 955154885,
        3067521807, 947300879, 2725362293, 3845606026, 1231699632, 1178268877, 3343406407,
        213677611, 2323249019, 1107976976, 732451736, 1665047776, 4077674893, 27357303, 4082550343,
        2657186720, 990641653, 670384546, 2458171321, 2967915000, 1466081450, 1039490858,
        2845020890, 1638229824, 93971273, 4100579930, 1816740405, 2953752981, 821092315, 919926004,
        2511888342, 3135799185, 255548418, 2557117784, 3028861724, 188856318, 1056346343,
        1687682936, 24343217, 1671294683, 4291517106, 4130988823, 3569421165, 1235633414,
        1801624363, 1800092211, 1105173648, 402392502, 947505047, 2492272420, 3676004165,
        2135941724, 2557245689, 1529127695, 1699546746, 1585419013, 2010516244, 3456333089,
        3086048286, 2734955395, 3068266090, 4178140055, 3228038243, 783645715, 1940316365,
        938340857, 2260663165, 1286819403, 1882280576, 3931975665, 2454936120, 1472856458,
        3239103012, 1153030087, 725007486, 2037478137, 3064238161, 1126643361, 3189826842,
        3506296091, 3889149434, 2285522164, 3734697327, 3931678009, 1489114747, 2703638245,
        1765501882, 2897711455, 4076242281, 3876433318, 2681584040, 1194831194, 1435002347,
        3535394391, 543832506, 4050635343, 4240238873, 606630509, 2337192127, 772266066,
        1764039295, 2583718119, 3706613521, 3876978075, 1772670858, 2704487297, 3661008347,
        3908085104, 3782476684, 1212867303, 3617979481, 2169541584, 2037471029, 3035924153,
        2988800888, 2859662431, 2144351335, 1206438749, 3199590069, 3686966492, 3011119844,
        2110567656, 3191932115, 4048346317, 112509873, 730803069, 2032402031, 793357876, 614029035,
        1626877770, 1352379917, 3524320603, 4006874205, 2534525876, 3622113179, 2653770775,
        3322455088, 3839467778, 4033188379, 3471048837, 3278449086, 1645631398, 643253486,
        3665028544, 4061452434, 1165133198, 1706941183, 248724667, 476684462, 695717438,
        4009027539, 306931820, 1348828742, 3348108802, 2404836800, 3466727554, 2136748447,
        4274786485, 2334094005, 988271302, 2705240433, 4085605951, 3246221472, 138641221,
        1512850515, 2219695324, 1745338641, 2210557271, 3042378588, 2161405415, 3141716208,
        1794177762, 2760033657, 3465247906, 2348183440, 1960863177, 3016664935, 2685844541,
        4012216383, 1848255188, 3416008667, 119179827, 856979683, 2063528447, 1152848389,
        132399757, 275374180, 1139273848, 2384521621, 507583957, 1765503215, 2115249141,
        1129798183, 608033986, 2117346396, 2767836754, 3926313298, 3343047, 1792483602, 1645650628,
        981832823, 958715857, 229700844, 4294206149, 312057774, 956479348, 4007965775, 3322037217,
        175065297, 893729395, 1077385993, 3304320682, 850783095, 290370482, 976936980, 1166635968,
        999024110, 3172841397, 4027994353, 1990653414, 3858421207, 666603716, 4054231076,
        2473403465, 644695031, 2512625969, 4120153784, 1617132347, 1201388887, 3159630967,
        971288835, 610552767, 846766038, 135381920, 2759802428, 364069062, 381214518, 1746913712,
        516894808, 2905211565, 3416701401, 2108810755, 2156216170, 3616844236, 1242862845,
        1452074818, 331232113, 2007819918, 1100136479, 4100056381, 826829988, 2723557478, 99933200,
        1531962662, 2335970748, 1404001524, 422581631, 29162949, 1647132170, 2221124178,
        2327309007, 2171232855, 3789609369, 2932036142, 312424672, 1093977430, 2874221762,
        1696878769, 3899362963, 1026935710, 1334868963, 516166669, 1277458481, 482134165,
        1378799015, 2495850434, 126234265, 2624883180, 3187587661, 621479705, 1577047146,
        3196798785, 62169004, 3972851515, 3696885032, 3893400943, 2266763186, 157939110,
        1122622281, 1291123953, 2299753810, 2866957129, 3990680834, 2897580227, 2568327622,
        830779103, 3296698542, 4077783722, 2161864947, 1609209608, 2250701388, 866261684,
        1635820699, 521770093, 3752484017, 3077731730, 1161414507, 3460048600, 3770570685,
        32010398, 450395437, 195678277, 1988446960, 252674624, 2727361029, 2407943968,
    ];
    let ys = vec![
        855025377, 3346150233, 3804098844, 3224356202, 1568933212, 2365652821, 2276938882,
        10234433, 3258649607, 3638907823, 3532415418, 3013228254, 4236549410, 3688599519,
        2131276581, 597638761, 1427322095, 2525327753, 3219316903, 3952731294, 62447925,
        1201093425, 1703511560, 3923061301, 3053702724, 1104415926, 4067728336, 151656806,
        2835199032, 1901557506, 2772134726, 1806087716, 1840158636, 3069997455, 617468378,
        3167102211, 2613668565, 2288058459, 1906588859, 2757058331, 3434762901, 325719386,
        2091492257, 979208590, 1402000071, 1004453923, 1191843901, 2456463066, 1604349443,
        3164729829, 3838999758, 519756213, 3099257638, 1384127436, 3911362699, 3661195959,
        3319966868, 559769228, 3440166680, 2918058623, 2476706974, 2882816153, 2318189433,
        2715140157, 4059599733, 1597075295, 2820851931, 1284972499, 24427210, 2692524997, 78430446,
        3408474155, 752270260, 3290353385, 3578800117, 4139840738, 2810764733, 962883534,
        2306661525, 3340705515, 4044826154, 3677033844, 1402474816, 2883842149, 1600490549,
        541341841, 3908640154, 2359627968, 2094384275, 1374071618, 812921239, 4122228581,
        2602496988, 3970262735, 1045715830, 834787465, 1814396368, 1603068437, 3229871867,
        1983279859, 4124544643, 2433685064, 360129940, 1113045446, 15875827, 1329577579,
        2365540618, 1939394392, 466125317, 1827530199, 2254394039, 3825429125, 3168105666,
        2096693205, 677530180, 678714924, 4187157259, 2271143012, 2043961452, 284889078,
        3088767431, 3700876930, 1389453908, 972389123, 2841049402, 1957720027, 160845795,
        2059617606, 1784567797, 1574115227, 81854142, 3500164071, 509026907,
    ];
    let out_len = xs.len() + ys.len();
    // ceiling_half_n >= MUL_FFT_MODF_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1_next_size
    // half_n >= MUL_FFT_MODF_THRESHOLD in _limbs_mul_mod_limb_width_to_n_minus_1
    // k >= FFT_FIRST_K in _limbs_mul_mod_limb_width_to_n_minus_1
    // k >= FFT_FIRST_K and bp1_is_ys_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // k >= FFT_FIRST_K and !ap1_is_xs_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    // len <= k_times_n in _limbs_mul_fft_decompose
    // len != 0 in _limbs_mul_fft_decompose
    // shift_limbs < n in _limbs_mul_fft_shl_mod_f_to_out
    // shift_limbs < n and small_bits == 0 in _limbs_mul_fft_shl_mod_f_to_out
    // shift_limbs < n and small_bits != 0 in _limbs_mul_fft_shl_mod_f_to_out
    // shift_limbs != 0 in _limbs_mul_fft_shl_mod_f_to_out
    // len == 0 in _limbs_mul_fft_decompose
    // k != 2 in _limbs_mul_fft_fft
    // k == 2 in _limbs_mul_fft_fft
    // limbs_sub_same_length_in_place_right(&scratch[..n + 1], &mut xss[increment])
    //      in _limbs_mul_fft_fft
    // carry.get_highest_bit() in _limbs_mul_fft_sub_mod_f_to_out
    // carry <= 1 in _limbs_mul_fft_add_mod_f_in_place_left
    // !carry.get_highest_bit() in _limbs_mul_fft_sub_mod_f_to_out
    // carry > 1 in _limbs_mul_fft_add_mod_f_in_place_left
    // n < MUL_FFT_MODF_THRESHOLD in _limbs_mul_fft_mul_mod_f_k
    // carry != 0 in _limbs_mul_fft_mul_mod_f_k
    // *ys_last != 0 in _limbs_mul_fft_mul_mod_f_k
    // k != 2 in _limbs_mul_fft_inverse
    // k == 2 in _limbs_mul_fft_inverse
    // limbs_sub_same_length_in_place_right(&scratch[..n + 1], &mut xss_tail[0])
    //      in _limbs_mul_fft_inverse
    // shift_limbs >= n in _limbs_mul_fft_shl_mod_f_to_out
    // shift_limbs >= n and small_bits != 0 in _limbs_mul_fft_shl_mod_f_to_out
    // xs[n] == 0 before sub in _limbs_mul_fft_normalize
    // 2 * a < width in _limbs_mul_fft_internal
    // limbs_cmp_same_length(&yss[j], scratch_lo) == Ordering::Greater in _limbs_mul_fft_internal
    // |carry| != 1 in _limbs_mul_fft_internal
    // xs_len < 2 * n in _limbs_mul_fft_normalize_mod_f
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        536845695, 2558806929, 1489289365, 3329304370, 2717810433, 1612861178, 3032334508,
        3814948455, 2207086696, 1172424736, 74004634, 3162004651, 1644600884, 2247633499,
        3724771974, 3791881122, 3356765119, 1797138640, 2968076031, 1951182443, 28178434,
        2999439469, 3973101512, 1773155149, 3528755596, 2970070031, 1048123493, 865194883,
        3926014598, 550346756, 4180641578, 4012742684, 1677067497, 3691772143, 2160788924,
        3120525892, 2706582310, 1103414134, 85748171, 1200001750, 614923434, 940133594, 101308240,
        2740743586, 2770251682, 3680599636, 55485642, 3334105948, 403845029, 2541105469, 400674666,
        3236021310, 2478637894, 344195055, 3047692718, 3626937965, 108675619, 508696104, 2943701,
        2776304132, 1754412568, 3736343577, 964493996, 197759327, 1759807543, 1573108678,
        2021210404, 4191057481, 4070191749, 66804445, 1488299508, 1948952861, 1885363486,
        2598937428, 1166067832, 3651536598, 1096457730, 724152602, 1385511909, 3403605727,
        355090498, 1538772352, 772785433, 3362306257, 3133598431, 3137698865, 543191511,
        1839099053, 978013500, 22325990, 1343363782, 762194192, 785182135, 3811132058, 1094643604,
        2606491970, 2042121065, 239021944, 1722680321, 1488423851, 1745615606, 1632482781,
        894831608, 2081706482, 3063480794, 3844288975, 977613434, 3308265013, 4271404090,
        3576878551, 1509627729, 2007346360, 2540235889, 3222090628, 815883733, 1807698301,
        2082717900, 3911735063, 1392625791, 4216401251, 2280761033, 2068247221, 648040326,
        2352760665, 542848097, 1801234017, 3533029989, 735231125, 2563773847, 3729269851,
        594601488, 4115295954, 2357743501, 3421131267, 3951657610, 647588250, 642666131,
        3803109598, 666571861, 2704311490, 398686983, 237271261, 3362921504, 3353694364, 712569670,
        3580383486, 1883818600, 1279153496, 2903337626, 891594905, 141950027, 4023137677,
        1710617147, 720591798, 1366425830, 2810324923, 3280049723, 1703271196, 2414790938,
        682707263, 99845231, 3041233408, 1349129909, 3656565700, 1933632152, 693173897, 966751112,
        1370934160, 3457118718, 2357508498, 3643747316, 3884347956, 1556999690, 284334148,
        3677826976, 1828102944, 3427389734, 2145353274, 4179860139, 2116682836, 3128816855,
        2858812725, 3866387733, 205149935, 3606470892, 333851443, 4093404238, 267403352,
        1522771754, 3703838916, 1227976617, 3371702904, 4274401236, 2655151964, 4286229542,
        2265722904, 2660244206, 2985123182, 3203511797, 62841671, 2706389726, 1162899640,
        1208766738, 825105696, 1747874729, 2735884139, 1419901605, 1094343400, 1725211537,
        1933578527, 394764233, 317188738, 3983104180, 1459485603, 912922593, 2175578917,
        3249583240, 1011878200, 700541831, 1963760467, 724265676, 3026026112, 314118618,
        2440548373, 173363743, 1114260517, 3356386702, 2213099364, 2758364070, 527707901,
        1137512122, 4032841648, 4181237865, 3036395321, 1081779711, 1198120381, 520110279,
        1064457883, 363386489, 190697653, 479659366, 435123458, 3915661594, 1722202554, 3655822881,
        2710315451, 3716894293, 2657219993, 3692098999, 3146002595, 3534174749, 3239372280,
        2653548483, 4161002559, 1216004393, 2919415572, 3665977644, 3738323650, 85393310,
        1937722915, 1446344767, 805858780, 829864936, 3913872151, 2564954944, 2822308520,
        1374652509, 1430851334, 3082008751, 434113365, 697208760, 547313694, 4004743793,
        3477394280, 3958140399, 792189120, 3746562667, 2641117078, 1763955286, 1319489354,
        388420507, 3040415195, 2438766039, 2414772521, 3408546201, 1014181468, 3097978166,
        3223404715, 3094689449, 4080955087, 4180595512, 4259385665, 117464744, 616666921,
        1352077253, 2583119816, 2060499123, 1343903024, 1057859122, 3509736255, 2363945236,
        1053480584, 2350183640, 2140557464, 1023987428, 3566510253, 2710154436, 2407626371,
        3552739652, 1781443290, 159785337, 104974767, 531655185, 2095020949, 2735007310,
        2975184749, 2808820521, 4023843970, 4254439936, 2313714700, 3151234047, 1538455285,
        2431366956, 897467870, 766472542, 2160649826, 4175412006, 1616656579, 2958474465,
        520251106, 4273299563, 1589689426, 67534293, 4058645857, 2994306139, 3476170883,
        1383921354, 3226695059, 1511110645, 938877357, 3197528464, 2112418557, 1259682435,
        788357827, 4018864436, 3715092665, 974735070, 2847305791, 1556151668, 2727189154,
        3852758001, 142366260, 863729052, 926065764, 324832083, 1042557521, 169830739, 1125922162,
        2172984764, 2434560144, 4112241808, 363413042, 1037962376, 3408214249, 3308474563,
        948582090, 3689561294, 3002211611, 2068322580, 3455003261, 1629643539, 3241230255,
        2568864288, 335200100, 154902519, 1639352024, 385205090, 4004564575, 941623510, 2183424793,
        595395801, 187416586, 3798208708, 2903155344, 2994719038, 2328483110, 716726424,
        2627609886, 2954569280, 1143870368, 3317042859, 2830400829, 3899183739, 1921801783,
        1692475898, 1020201431, 2270070607, 2749635341, 3060370681, 1679778400, 130454920,
        2764749530, 315605197, 2229805700, 1491117808, 891642867, 406572731, 2986587483,
        2062751011, 2680613662, 3170518159, 3403968301, 4065543563, 2522939461, 1250025727,
        3786985165, 3960085125, 3898795466, 2230422634, 1606488769, 2007190724, 2191423971,
        945880865, 4092331510, 3075773666, 2438174538, 909732782, 2567259064, 874907093,
        3165565006, 90192681, 406105792, 4027605656, 561046485, 2036688639, 423186123, 504795372,
        1298163569, 1472210361, 913660107, 3336622245, 3418377298, 405938149, 2972939145,
        3284499130, 3832116377, 3741050363, 2781859963, 3601703860, 740572916, 3857553891,
        927657809, 3409508652, 609814989, 1850653797, 2108789652, 1976628350, 2358130682,
        3144526099, 916348646, 794117824, 4180876214, 1307256963, 3594935550, 1084610868,
        3440389084, 1184280207, 1513242566, 1530761140, 2162752590, 3420403582, 2942021525,
        1045778589, 3477129672, 2878855681, 3747712650, 1561541268, 2941978793, 3528081107,
        2051212402, 2601468429, 785516734, 3942474380, 768728059, 778206967, 2163687161,
        2176330210, 2844597385, 2554225017, 339090960, 3024024809, 2123280217, 2261195082,
        1922301048, 1816541470, 2020579827, 1915826021, 680559805, 4011617455, 2851346458,
        2152229116, 1261845321, 4197096166, 639639959, 1280796475, 3639072776, 2818826629,
        1395045076, 706269961, 870651485, 3155718467, 1116632357, 1624411964, 899408824,
        1034569587, 2142611473, 938611292, 3390463965, 1569113790, 2506683705, 4151012341,
        1593377138, 1042345343, 1719592302, 1118369006, 3041977110, 3586299422, 154629965,
        1895108135, 1212338162, 1064806983, 1597675981, 2541257904, 1756344190, 3171607010,
        1551904980, 717485522, 1512059284, 658965314, 3147089579, 455557582, 2513354289,
        2402915944, 2079435768, 3936315008, 3584247729, 1183849714, 79862174, 517212932,
        3596846963, 4077317357, 3624244968, 3194025690, 3658852925, 2440989192, 4112560655,
        4150885284, 3388407587, 3944141016, 2526452563, 2071749342, 1796399599, 1946266445,
        3849759312, 9194752, 922258726, 1198537811, 998230081, 491045204, 3981306807, 528385325,
        2699584901, 2352520931, 2211397022, 2399214196, 2959428285, 877054909, 3064126802,
        3635450025, 566053507, 2264493943, 2637864338, 2490921775, 2600583289, 3662046818,
        3141912876, 2781691626, 2701715323, 1883023242, 814116286, 4113013644, 1350053581,
        2641097721, 2693528147, 1851990991, 3652094823, 3718531440, 1998524256, 4099462743,
        2147150297, 1864383287, 3928478697, 531851028, 2148303287, 1601764602, 3325035556,
        2386273809, 756652965, 2475751611, 3834991991, 2629779868, 4080188961, 2833104402,
        3585614267, 2338256294, 4111445344, 3923675130, 1133552430, 3376931205, 933485924,
        665551586, 259778494, 2390476703, 2852516488, 1124671896, 874845285, 2900792610,
        1057386552, 3717779649, 3330927804, 27532908, 3847969758, 3588372640, 1000918933,
        1281939762, 1882504077, 2210707378, 3680010640, 3303603295, 3849896497, 2649519765,
        3848917615, 2981703926, 3768469804, 2858395698, 813475666, 1135260594, 3541176121,
        1919774195, 3448838404, 3489468601, 3762716781, 1979203676, 3067374168, 1342307886,
        1064233258, 2388642612, 2144323377, 1799256374, 2615307168, 3765279441, 2549575000,
        166299041, 3546489037, 1898575290, 1824398717, 2350285980, 2615901092, 940786171,
        2192477782, 2986314054, 2695632996, 3513560117, 3454395491, 3549548367, 642080672,
        3029820637, 2076593184, 3803515225, 4096099148, 590616792, 2029063512, 545098820,
        3633105713, 150714653, 3113631976, 1713814817, 817958034, 1054200617, 3831651328,
        4228863221, 57495824, 852084265, 566253807, 3524551712, 3842677671, 2778378092, 4073639572,
        4200514477, 3744552272, 1230221091, 1572262687, 437321651, 2176265634, 2643297903,
        3575240639, 2982728906, 2880964530, 1850273010, 1230515539, 1570736131, 2776479329,
        2773856798, 1812700307, 2590930462, 473159988, 2695740418, 3374389323, 3452453320,
        1605231822, 631681869, 2430601650, 1324079060, 3375788808, 3672922975, 409000159,
        2449992860, 2980746045, 2393005414, 157500431, 2710580344, 376098836, 684356863,
        4048023105, 670916723, 1157345078, 3615250032, 3506990314, 600182126, 2295246265,
        2743942403, 2438788961, 3181512771, 3598977753, 2205550620, 3463272831, 493877960,
        4251350765, 1486768860, 3882997332, 2937151601, 4095054695, 1693634207, 332526319,
        3564692358, 1889921430, 2332989664, 2095619222, 853492357, 3200795683, 1701633848,
        1525100316, 2384138727, 3065052610, 3825325381, 1961144872, 3431015728, 2426630255,
        1776375091, 1252316380, 4058986512, 3096632663, 2358923274, 3126209929, 2719981895,
        3931557594, 2032066284, 1965776171, 2675430389, 951738535,
    ];
    let ys = vec![
        1436222287, 1836601273, 1171173867, 931129857, 2825744589, 2288865028, 4093714963,
        2661921128, 3708815800, 412428514, 2510370806, 3695551540, 2812922652, 438294412,
        877885595, 147734903, 292192238, 3203030042, 3511066704, 2220478449, 2267601696,
        2280248233, 4226315124, 3634368382, 341615124,
    ];
    let out_len = xs.len() + ys.len();
    // xs[n] != 0 before sub in _limbs_mul_fft_normalize
    // xs[n] != 0 after sub in _limbs_mul_fft_normalize
    // with MUL_FFT_MODF_THRESHOLD = 4:
    //      r >= MUL_FFT_MODF_THRESHOLD in _limbs_mul_fft_mul_mod_f_k
    //      r & (two_pow_best_k - 1) == 0 in _limbs_mul_fft_mul_mod_f_k
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        2747852327, 3284222237, 2520745108, 2829584604, 463401376, 256649758, 3613822930,
        915722493, 106037115, 2746430250, 1857296821, 3738059766, 798300650, 1072320244, 181030054,
        736148500, 3287542487, 3191687531, 2479346002, 3876666473, 4234463645, 3993565555,
        748112025, 2754738223, 257577496, 1794926796, 4113554361, 3014850728, 2341663146,
        1903625596, 1145362085, 3861557615, 368243000, 4190856145, 3050859026, 3686680122,
        3155402316, 2927242947, 3152316237, 3455313649, 3034259189, 382862840, 236904687,
        1083044681, 1403288058, 1838495995, 3822259827, 50044369, 3212639853, 1103134563,
        1729433542, 1624608653, 1670593431, 2234047320, 3011822555, 1269718700, 1463050688,
        277110886, 28988224, 32834615, 3149071512, 2527159725, 3167102778, 344880004, 2379669866,
        2052073382, 2289683527, 4085606838, 130174550, 1659309260, 3294769754, 4186561224,
        3665233513, 1352803196, 1720681482, 1888498836, 1996336932, 2149577467, 1059716358,
        1071821357, 2001354869, 3600383211, 1110058466, 1947762972, 3713775555, 1394710694,
        1457600834, 3551518405, 3396592614, 583038112, 3514874956, 982811588, 3195525125,
        968541463, 3918794630, 820610431, 2431962989, 1450208849, 99000814, 1825411544, 1119327310,
        275615456, 4012398191, 2472691704, 150102896, 719147887, 3950858508, 233129819, 2673729375,
        3050839633, 2482565512, 597002506, 2419928733, 1918909142, 592309706, 1223925975,
        640293171, 3507913329, 207251377, 272455452, 2738172352, 2997877987, 627079517, 848662873,
        2157048747, 395648946, 3288510825, 3105428439, 3799073463, 3320319094, 4108383306,
        1142051363, 1000125519, 4095622306, 3843385809, 2155861403, 1287129117, 2763153651,
        3505151918, 3794665024, 1736107497, 4282554631, 1835774096, 1123612300, 4009244412,
        1466775078, 3385583879, 2497300080, 1295296420, 2702466527, 1484113854, 814308624,
        3726825231, 4139503587, 2716249648, 1231810975, 1957605108, 1567957051, 3709131637,
        579145303, 3031201586, 4072442744, 919522617, 3103558856, 2880748908, 1855074471,
        4182601952, 3097928112, 3140891346, 3106991909, 1368002159, 4042223832, 523894957,
        1310891238, 1337116682, 174490477, 238757959, 2998822732, 75157028, 4214905301, 1081226312,
        991947455, 1905301200, 1034764279, 1727133801, 1390831938, 1668601555, 2591982891,
        2381963515, 2343734002, 2150431392, 2539468027, 1618909142, 3542577597, 1338585448,
        2706788808, 2481875613, 2925311910, 3121575502, 3759959414, 575778995, 1116863229,
        131873954, 1001113998, 2538127488, 420077878, 2557265153, 2947595657, 4233563541,
        3143408643, 3886967600, 3697973565, 774998735, 740472070, 3915672262, 673269652,
        4208105706, 1960536012, 399244754, 581387798, 1478728149, 2676341060, 1297240045,
        2768126435, 2792518797, 877084200, 653142960, 1937144960, 3841544078, 2385158267,
        2897341750, 1320323479, 672947779, 2263944917, 1115728991, 3234555474, 4119894716,
        3489280294, 2595051296, 3647932430, 2757372220, 4115867828, 153082178, 609411280,
        3973756081, 1746958052, 87042584, 3587850968, 298169201, 500582428, 1516083606, 820389957,
        4261058756, 2540508836, 1681056334, 1604759955, 3002154405, 688395124, 2328059098,
        968843587, 762300636, 2429961426, 899673200, 629973501, 3874831318, 1387276928, 3232959410,
        661797535, 1260089627, 3300582278, 2272320902, 343035824, 2784132970, 3939096333,
        1735357020, 1369045384, 415044120, 3129896459, 602686244, 837829882, 4023957246,
        3189829519, 1856833711, 503808139, 4094114347, 3771966122, 3362609499, 2040666537,
        958364286, 2177502334, 1453269050, 1953640899, 2512225999, 2800391181, 3932650290,
        2972382612, 119384058, 2896639292, 3518870929, 2498509633, 1774295178, 1840499938,
        310218603, 2945730782, 4068499043, 1215384342, 2994463134, 1809556161, 196815011,
        2844475863, 2733808391, 3434170872, 2771830450, 1415036607, 2368430995, 723659496,
        939372751, 3189074149, 238922458, 250393519, 4243315757, 4229684736, 3402539063,
        3612508080, 1898949834, 688162939, 3973254156, 234982869, 1653348659, 65590128, 3076719637,
        2037429662, 2270583839, 308949833, 39113913, 1443547479, 2303823978, 51994220, 209763297,
        1426882098, 890964142, 3348665436, 2963367104, 3392428694, 214102390, 3438508849,
        3173829131, 2245146040, 3020520202, 10319403, 2027672170, 1183558511, 2466726255,
        3921821173, 4117856915, 432314728, 1632934848, 2598687459, 2364201542, 2777200019,
        4086800768, 2983582284, 3405268058, 1468805524, 3887006675, 1977344744, 1227977269,
        648771807, 47449163, 1298857023, 762846374, 3814370139, 3292657960, 2462405642, 3029108293,
        1271997971, 137634433, 1836776046, 3197472174, 2884099642, 3455640996, 3975763413,
        3585810223, 4012915521, 1226524394, 3685501572, 2054429868, 4061758646, 2802284310,
        1840889484, 4032858979, 689278105, 1312742960, 3800498693, 2209056892, 3448081656,
        920237809, 3169207214, 665322946, 4040987638, 1091502002, 3655165795, 2199876015,
        2718041022, 328653100, 2247056540, 734025980, 2837035239, 1934561708, 4076886496,
        2175378635, 3482347682, 2762343131, 1021756499, 720642694, 989419547, 1796047981,
        179046962, 3093400413, 3927055106, 2032813121, 2648424350, 2831483027, 2805507705,
        3423282445, 1776060972, 1047458415, 1118287357, 3223714084, 82148262, 3078159955,
        2070444572, 694535216, 1917374848, 345018868, 644104331, 807046782, 3586187374, 2462158623,
        2271007682, 1648991682, 2179947576, 2876935767, 3701944714, 2984590856, 3146147782,
        1439916655, 83480614, 1412047906, 2756144842, 3417461932, 3812958696, 3660886927,
        1026289105, 3042258911, 1157593635, 2297483757, 3065984292, 2245243645, 3217937135,
        3244573720, 498927824, 1540034584, 127571409, 3354163416, 3095586550, 3267265226,
        4048368903, 2538096749, 2633421819, 3941762941, 1913951976, 592152606, 3339686728,
        4131028742, 4011875519, 3231817810, 1266368035, 2741964580, 1360563716, 2397471262,
        3581775601, 442713246, 2583985905, 4140368871, 2948719470, 2632270286, 2931545422,
        279844012, 3470154617, 2608016318, 1865695758,
    ];
    let ys = vec![
        4052630511, 3694635970, 3497494227, 3450377827, 3023326407, 2954215886, 2247181480,
        2537199363, 150319414, 2151431193, 2909661308, 2322669391, 1966099638, 3416313539,
        4221204656, 3353287542, 3659836487, 412505913, 2314408638, 4117608371, 978424689,
        3456246220, 2612695584, 2375363908, 2053041914, 1485239693, 702201552, 2564115222,
        2438519360, 2763668870, 100342827, 2417805591, 2823195968, 707971606, 2320118968,
        1193036241, 3943979297, 2560147830, 3750088579, 874004468, 321250653, 3127008598,
        1230575155, 2118339904, 3473055431, 1089722458, 823585420, 1657658332, 3592505951,
        1399472678, 2767625047, 2974161464, 4262301376, 3876214428, 2729656809, 2886293105,
        2745823729, 3130060589, 1719642490, 1419226562, 22334360, 1057133406, 3739087595,
        3318655346, 4113482594, 3189799522, 4276063810, 1157119653, 351476228, 2322954160,
        3008415462, 1724393357, 722714795, 40572522, 1778262448, 3809147874, 3695128433,
        1373927168, 3292754161, 4285510155, 1681375647, 2009975333, 2459947628, 3028333964,
        2495754276, 3594532873, 1119972269, 2110606235, 2432814393, 3384258261, 2220008679,
        1419934042, 550906109, 3919223200, 649938729, 843562982, 1404310133, 497873803, 1126414412,
        2748269469, 597837614, 2250172976, 3036113464, 4125614803, 567031325, 3153408911,
        3808217187, 913077440, 811820224, 619117728, 3571015864, 2138019818, 2638499375,
        2285785271, 612284585, 3117263036, 3401915509, 2825297482, 3547967841, 1092540699,
        4095363005, 2567966436, 3063532653, 2754399242, 449097021, 3750104023, 3496399535,
        4281741637, 2631980331, 3463991032, 3337936104, 1163369136, 4283670859, 238683344,
        3275102357, 341377106, 318605666, 794717168, 2369934202, 2786010293, 850706590, 369477669,
        424810219, 252423648, 1931655700, 2648037385, 2888007043, 3336440817, 3429561231,
        1502079501, 2543521924, 1238066700, 381121595, 1513192740, 4040027440, 210446437,
        1376263001, 3164867457, 1525853646, 1912936036, 3625038265, 1677041311, 143836119,
        2342985498, 1187692333, 3688003744, 3610245466, 2657022853, 2339601519, 2668787372,
        1263095279, 806992389, 2404718838, 1445671499, 1748111766, 179908924, 3490390136,
        1651040679, 918931418, 314588145, 2258882739, 1423109047, 3707409023, 2784952342,
        961312640, 4265068146, 2808908108, 3404159886, 3108269960, 1922163793, 3765147558,
        3263565731, 2813182242, 3059923262, 1199146024, 3218800908, 3637613494, 729235541,
        3083455633, 1739185967, 2391919856, 2550874721, 2193248543, 4016265696, 581612844,
        4270434483, 602337346, 1629908728, 1639736763, 2080299576, 4061678032, 4067370131,
        3011644887, 935498363, 2845967441, 776064906, 1224877115, 1568689210, 2155387177,
        1281668810, 394841148, 3650885016, 2337529418, 2988868865, 2608129160, 957063490,
        3956695911, 1397031860, 1622206099, 1137444556, 1670712490, 1904330595, 2949839020,
        716702090, 3064069425, 2718802048, 2039155914, 1310485275, 2299994445, 3783220006,
        897691056, 2186561725, 2420858320, 3200499649, 1644970104, 2174349587, 1711578367,
        3860536049, 2383747173, 3580876998, 3979996792, 3165448287, 206753248, 292418355,
        760860233, 209682517, 3701390335, 3053030990, 3763739638, 2722583543, 591068510,
        3448622365, 1465568231, 2280376243, 761194363, 4127076379, 688541069, 4277715058,
        3469211657, 3537025097, 1092233135, 665734316, 1191958756, 1024989415, 911775001,
        1239537011, 2625249028, 2578675813, 2547821823, 3633943981, 144864738, 3367991969,
        939826100, 2910922198, 3577356068, 765311683, 3021209867, 3766181086, 1199057697,
        568869861, 4074104342, 3603573776, 1791242553, 230189602, 360178165, 1893740110,
        1378496397, 1127814115, 721915420, 720212209, 395367673, 1814008985, 3479742163,
        2387596058, 1675795422, 634729030, 3948486140, 3452855335, 1981554870, 2556300041,
        4272117331, 3775890083, 3723724320, 3932389222, 2629480043, 1915094911, 1615818469,
        3456372978, 3985409285, 1355527954, 2885369718, 1677943517, 1257979707, 998504904,
        602210913, 2183190228, 2821538209, 2842237818, 2841523812, 66196820, 2569279229,
        3136836224, 3492345591, 446642886, 1885286969, 1455290493, 4063500493, 3653003003,
        4131706668, 5389112, 4268652977, 4287455687, 4232283796, 1912718743, 3719930993,
        2606884706, 3681739888, 2741032953, 1954950922, 3922875028, 593156711, 778008361,
        2026334408, 4180069808, 1585253234, 2965564431, 3636026063, 2142382375, 853577839,
        2496813835, 13015114, 1568201265, 3850964536, 3460248272, 721170094, 38755138, 2185235123,
        1159542585, 670177474, 1360341401, 599464095, 2794872055, 195648815, 1760205950,
        1468022233, 1823275482, 3837135378, 3355071086, 3750944136, 3430432053, 915519187,
        3713025697, 1115265370, 1102808975, 3967785386, 3421018239, 3427911007, 2560662109,
        3302569883, 3997625399, 2753931075, 1009685428, 759771794, 3412296584, 2875922581,
        3249747780, 4233791135, 2636351563, 1669334357, 137820683, 2503139993, 453917578,
        3576894830, 807963482, 895762529, 2250010130, 2830798166, 2300402118, 4173582870,
        340409551, 1796126855, 1857189661, 1833228008, 3719454407, 2825401065, 3497476272,
        791340321, 583327252, 1288625474, 461798918, 4102492809, 2469166546, 1486212208,
        4050316666, 1675982138, 2967250994, 2554603908, 4010825786, 3572730813, 3742785139,
        3983266159, 2802229391, 3548095813, 824136869, 2129619346, 2136469429, 2763887155,
        4050239400, 12460638, 2151715426, 1562670532, 3081044521, 603717232, 1426596910, 840918733,
        4100889707, 521260261, 3774890639, 2051555741, 347307057, 541390678, 4133830949, 156192085,
        4230448178, 3273811799, 3841916857, 3331269804, 1293152940, 3801024409, 1043783722,
        3724215229, 4206042666, 1964278897, 775925843, 1588097194, 799905702, 820380723, 291469911,
        2437519330, 1543197978,
    ];
    let out_len = xs.len() + ys.len();
    // k >= FFT_FIRST_K and ap1_is_xs_0 in _limbs_mul_mod_limb_width_to_n_minus_1
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294965248,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4292870144,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        67108863,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294967280,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let ys = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294965248,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let out_len = xs.len() + ys.len();
    // limbs_slice_add_same_length_in_place_left(&mut ys[sh..sh + width], &yss[j])
    //      in _limbs_mul_fft_internal
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3221225472,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let ys = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4278190080,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        33554431,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4160749568,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        15,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let out_len = xs.len() + ys.len();
    // carry == -1 in _limbs_mul_fft_internal
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294967168,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let ys = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294965248,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        15,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294934528,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294705152,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4160749568,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        1023,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2147483648,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        8388607,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4293918720,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let out_len = xs.len() + ys.len();
    // This one is hard to trigger apparently!
    // xs[n] == 0 after sub in _limbs_mul_fft_normalize
    test(xs, ys, vec![10; out_len]);

    // Test the following with MUL_FFT_MODF_THRESHOLD = 40
    let xs = vec![
        2059162901, 780533837, 1499514616, 370408320, 3488943057, 3002968643, 3280754902,
        3629584694, 3418343040, 1953506790, 4227958856, 3292959365, 4251993448, 27178930,
        3819621186, 3381642109, 3235864857, 3320441971, 735568773, 3290549190, 2348520748,
        65035469, 3189134198, 3433792542, 2046603388, 1846893202, 1500591314, 1926093928,
        3833442284, 917715021, 3060453109, 2502036413, 2486190035, 4141727718, 2855183664,
        188921106, 1246150527, 3431147745, 52063887, 672364788, 305091796, 3258503272, 2482085735,
        4102804575, 512510410, 3916789795, 2663906964, 1972608015, 903707278, 2685028702,
        2171888453, 1337253711, 1679113576, 2327572728, 3967130453, 3134007787, 3116117288,
        4142909207, 2432907644, 3081874273, 1111845126, 3208612026, 2603144379, 3122153710,
        3175208339, 2128890203, 1635551873, 2151589012, 3387454549, 3421114727, 2554751387,
        866312113, 1190570989, 4278773232, 2602581616, 2910208274, 2257500082, 2255882946,
        937670205, 90499214, 2092760775, 614537845, 1198289972, 609568709, 997146097, 2168994526,
        1134990908, 3629906561, 2462005955, 2011879044, 1863981585, 3686830724, 1677077983,
        4058273166, 2404858820, 1259209273, 2497631932, 2457416542, 3006927860, 1302705050,
        1457220550, 3551369195, 3352696372, 4027160336, 826008279, 2892448348, 3259072336,
        3394801085, 264845340, 1650378808, 99319937, 2713584180, 921696353, 1550121177, 3037722513,
        1149506135, 3085605854, 1876457795, 363686106, 1177010345, 3884361646, 2310366211,
        2931017711, 1038940152, 85349787, 3018952046, 1563758994, 2895374319, 3964727542,
        129352416, 882031465, 2512252764, 2906276783, 2502713922, 2079718769, 3189036249,
        2350753553, 3990135593, 83072972, 380689525, 1106719395, 2854523982, 395864250, 3964889568,
        3962138730, 44237838, 3898872993, 3543081347, 561091830, 3833703781, 2744732276,
        3882501499, 803646731, 2730194868, 3729729040, 3940567005, 4022707928, 3504409704,
        381298568, 2951360676, 3227997925, 3619350516, 2364098189, 1344691436, 3430034877,
        2408847965, 2071078934, 1479837448, 3114447285, 3743479511, 906911524, 3688678786,
        2308038741, 3665274956, 2934122576, 391577536, 2343160586, 3286260867, 1003413704,
        4034294818, 594700746, 574667192, 1680675400, 1498011376, 3643575302, 2763459047,
        875347246, 2320400519, 3973524284, 2289469378, 1139488788, 2289851311, 2517972368,
        2275659894, 3257331649, 1882679997, 2012204823, 4147632131, 3735295195, 294568049,
        934129710, 3253682808, 160955006, 1373429799, 3956175554, 1432279564, 324020053, 627478067,
        1580707099, 1372400568, 1183382594, 4066957426, 2764948514, 1735153824, 3182967835,
        2503482328, 2316583184, 3927384324, 3914960880, 850983809, 4103842431, 3211198632,
        1002474724, 1549702880, 1547976679, 2826596595, 1353945633, 1664866622, 1118425048,
        4205508552, 1193607580, 405660220, 963153904, 2934403875, 1213898883, 3634764716,
        2103210922, 1012713568, 590532961, 2346854826, 3163049840, 2289558862, 741700681,
        426513383, 669169561, 41839739, 2560465217, 1739741748, 2373565542, 3135770860, 1995226548,
        2722148789, 1015171874, 697773668, 1821510250, 3551122912, 3658092114, 3310771509,
        683722574, 193940206, 123285549, 3768274686, 2242213008, 3207902399, 334437955, 1574784248,
        2657193166, 2910229745, 48160809, 2913876693, 1608158028, 2947645699, 3467045873,
        3015250662, 2929097381, 4193567758, 1284457878, 886723441, 2468825581, 513811427,
        360443399, 2197228885, 1894810265, 3700912493, 2668716894, 1444514083, 2252886984,
        2478547796, 1485043002, 2185711932, 470185056, 2380500664, 4255311641, 3229109240,
        3156533774, 3150785843, 4189334636, 605315125, 1907935356, 3318372065, 2517267992,
        4227678597, 3642397098, 4083957535, 3707096993, 764282191, 3081563208, 700657244,
        218630324, 646053677, 955416231, 639109029, 4230263142, 399337333, 2567623022, 4021054275,
        3926911610, 275692125, 3899505474, 652822539, 4008149978, 3193565314, 666847767,
        2942812523, 2307533433, 1954156881, 1426469005, 3001779779, 3823205563, 1321269402,
        2408383771, 2663368658, 1986236765, 948461567, 3600290362, 852026290, 3979134715,
        719097660, 1169575617, 2004673928, 665013724, 800120540, 909335683, 1048440713, 2622300510,
        3817401735, 4202904084, 3543655195, 3749039676, 1725722582, 1177710249, 1856304453,
        3297295393, 172438880, 619950639, 2888546738, 4230559685, 2248011209, 1566061119,
        3515580407, 17884981, 4019794823, 355109143, 724787217, 1623133184, 4027360194, 4016386228,
        2729394898, 688712601, 193286419, 244162554, 3899864221, 1889168909, 542972447, 1266183745,
        3460142657, 1888397575, 1284472560, 1244801499, 4287539579, 1871032895, 4205542885,
        3517116797, 1115870433, 2375967502, 2650445037, 3730727774, 1275943967, 466215684,
        3729679044, 307128759, 1819814246, 1536461077, 2015340242, 2450817120, 4143647501,
        1523149252, 1342380478, 2739864372, 515228120, 3717846516, 3353260789, 461728360,
        1471406919, 3460939158, 683245655, 355147923, 4118291945, 3949588248, 1300989740,
        3690604560, 4007540037, 1431477123, 386729987, 3745245253, 1990429399, 2080374204,
        3815884287, 3337144897, 2700765561, 2879704489, 1949704502, 1566035313, 1628765930,
        596847248, 199115183, 3098212266, 1077898833, 3249568335, 2674816139, 1058191726,
        2780304044, 1645409965, 255629619, 350057101, 657584223, 3240775883, 475151865, 3928775029,
        1904415144, 1205837485, 536799842, 2199210596, 3361655874, 3117091935, 3891547077,
        3008007960, 2905897633, 2192198297, 3025577186, 2627751704, 3358030035, 2143785127,
        1863570247, 128682880, 224446890, 3216261028, 1861603202, 2073782625, 2323496634,
        626130577, 299171750, 3153642888, 2322962453, 3906570780, 654399754, 1080984115,
        3127176320, 958928995, 736790953, 2100678804, 2903622553, 2107571288, 161703184,
        2700392282, 1989910936, 1796436076, 1515388804, 412760241, 1995752724, 1721940124,
        2737694008, 815152672, 1914254795, 1383458130, 1800852927, 1647765784, 1069160320,
        345688896, 2791967527, 2175261255, 1948295004, 4037030712, 2657710590, 403940219,
        1903868449, 2230179452, 1812095151, 3660353063, 1294692572, 3258599349, 3454524122,
        760682329, 766382315, 819832704, 3385791773, 1914484018, 1275152406, 1932412318,
        4031987146, 1819754146, 3774811730, 2964861676, 4288002126, 4290823022, 245833153,
        710012617, 2086942335, 2651508560, 3199801806, 746131129, 2940101994, 2572564190,
        3450556750, 1344201645, 297192561, 1496600742, 2055222323, 2385593032, 3409985640,
        3914372419, 2332027612, 3786782368, 540524573, 912405094, 2877205699, 2216295165,
        553147617, 366603285, 2317311507, 3808832055, 2865103578, 702159169, 3090322425,
        4177622807, 1619269792, 3297641011, 3435148923, 2721091463, 770888433, 3309812831,
        3313271365, 2326968808, 4211902837, 3575021941, 3837056156, 1946426830, 2700875408,
        3549909051, 2624133781, 2386190586, 1503611989, 146942982, 3815167348, 738291884,
        3032865270, 514493690, 3263936185, 2586760230, 477608224, 494962015, 3880551569,
        3986966514, 1280447624, 3211986655, 3389322855, 4268603202, 2250073597, 293584844,
        3263462055, 1823557259, 2793680748, 2662207513, 1176545264, 209201999, 446994031, 82323309,
        239543118, 454147102, 2891166620, 3870866373, 2540598108, 2007661797, 533409108, 841454151,
        3116414099, 2050039475, 463676192, 3929494140, 1066708857, 161158156, 4134871427,
        2799759810, 2187433216, 4260636195, 1510870314, 2051466823, 1002646639, 1688484235,
        2376109665, 4262818491, 3725070505, 2657576261, 2828936397, 771266682, 2834874214,
        1957169492, 1861927729, 3280823487, 3658602724, 3625644600, 1791435100, 4188970583,
        446451814, 1957630886, 934986262, 2985111870, 3949771191, 3100662680, 3594244958,
        2534768310, 2066787915, 3404594888, 541866716, 1517870570, 3070528892, 323774299,
        3321181795, 2049159226, 1156761860, 316808538, 1910208354, 3181537489, 1572808162,
        3879922730, 2897260288, 2226461347, 470729820, 2994348619, 1272460544, 3773802152,
        3415663815, 1384523751, 2040433002, 1612784207, 3975112242, 2240414295, 4206353177,
        230554224, 3513023650, 3285711770, 3643031588, 3177962237, 1317684839, 3747629333,
        2908087060, 3356532116, 3864288664, 1221086282, 3247393464, 24833515, 1353717859,
        3479062204, 1079163501, 668835409, 164051107, 3324922154, 263602114, 1872413013,
        2113786784, 2261867566, 2248153397, 3564593470, 2703677843, 231138276, 534310763,
        268320689, 1276446423, 3079789023, 146337187, 2445298628, 3227039159, 3398693647,
        2881205016, 2646371170, 2686404936, 453946329, 1872573291, 722329562, 3753449909,
        1090431915, 3315975340, 430787134, 2390212230, 1727980122, 2803311857, 3072747639,
        3261723048, 2572486190, 82215310, 1185542307, 671157677, 4061151072, 2381144592,
        1114856304, 3068528375, 4170007402, 2330174148, 4089152911, 3617414932, 1589389596,
        3357278071, 1481167787, 2556217983, 3699212518, 2289125516, 4268990503, 2359356171,
        219039141, 85288797, 873877172, 4188146480, 1446907105, 3986052263, 1418399317, 769134167,
        4085076685, 2662492196, 3687979224, 1933867353, 1012317672, 3830645067, 695035139,
        3479040669, 3237613118, 2086498779, 3357896500, 472163509, 1041304672, 1008901135,
        1782630553, 3442358680, 3782054614, 421738333, 2226349626, 2276566975, 2074260497,
        3209131123, 3966860053, 1797546775, 564244485, 2202331520, 1878652705, 2135603065,
        1978607830, 643021959, 3435504349, 2724630731, 2193332580, 3674769014, 2004922500,
        640360316, 2130716296, 1151613434, 2236311163, 2795683949, 1187558475, 1026967456,
        1109136249, 147513228, 3586931705, 2493351234, 2173667395, 1609807459, 1459365094,
        1701337041, 2640846789, 3829492808, 3964042606, 1801800156, 1689063876, 1620631947,
        1883666680, 3615040343, 1816809669, 268316836, 2870582510, 4200081316, 2633001298,
        3733057156, 496633284, 580202213, 1110908968, 1958445634, 4020958525, 801052010,
        1414967004, 3127544041, 3772507779, 2663299598, 1895955969, 1433495230, 550717253,
        626271695, 1058103500, 3001197828, 1372177433, 2364132903, 2782999905, 2965163253,
        1179575055, 2347753319, 4231390212, 3421994008, 735024522, 3309165337, 3751050831,
        1777493239, 4275880824, 1737293929, 2435278136, 639625091, 2940603519, 885598016,
        208681843, 2972774365, 1187287863, 3422319144, 266814310, 682229383, 431714843, 3585885021,
        1350851497, 1706825945, 1137400503, 4046937582, 2403921940, 1101854065, 1781695471,
        1349891921, 3929519609, 175561290, 820500285, 1260764846, 1065899573, 3681210383,
        2148053626, 3489196299, 3939529751, 2650566724, 875741179, 147344264, 3039703487,
        1286704295, 929871152, 4236975761, 1219838240, 3196966807, 1556994374, 4265657233,
        1713717380, 372875541, 2807730339, 2611112399, 3863137900, 2547382381, 3502270010,
        1445065814, 225458248, 3328832967, 4144338266, 3178375598, 2196507442, 4063844512,
        241538504, 3396252192, 1260047779, 3018352370, 662038505, 2054611171, 2738526778,
        2874691284, 726177272, 2155989772, 1701605489, 1538378782, 2383159212, 3853280374,
        2517968233, 661315191, 1086419726, 2961335982, 2515714891, 831796439, 4236151695,
        1534306867, 2823792222, 2865235095, 1525944385, 2385176467, 289158208, 1021082693,
        2218167492, 2300853294, 2785237210, 2259298048, 2013400046, 2829680074,
    ];
    let ys = vec![
        3030223722, 808365787, 1804683972, 2375667315, 4271725602, 2215280313, 1489685370,
        967545156, 2860907841, 1208281500, 2036180558, 3850122844, 317531140, 1856558814,
        2601828821, 1848610558, 3122242315, 4257865629, 3741236289, 3073738323, 505765146,
        3460141670, 2355597333, 1800152507, 2128112931, 2366111017, 632754891, 1866074461,
        548746273, 793026035, 3244762005, 4142135799, 1549954455, 2575932648, 2334880913,
        4204152070, 469345279, 2110266950, 3936809191, 2347513594, 279288246, 612430643,
        1951123610, 4029577626, 1027163573, 929781431, 155408068, 750602647, 4200195121,
        2100912756, 3430125303, 4232728802, 3018905223, 1900131326, 2793568823, 206659177,
        3779880561, 1669789680, 2881651759, 1137761668, 1351695009, 2691196670, 1564811767,
        1231348738, 1767757773, 3177673949, 1715998838, 3181777452, 3559552443, 1600826156,
        2433377930, 2964909011, 3533424882, 2280609763, 347781226, 3027176789, 235261980,
        4108176490, 2511147509, 2165162774, 1116705265, 4170655522, 1050158273, 599757746,
        3146788968, 1899136391, 1985347700, 3945798097, 2057784772, 2829470995, 1172218950,
        3795077957, 230569182, 2498564393, 3632171934, 3697249928, 18960904, 2974052675,
        2138694082, 1844672263, 2186636213, 1850284092, 1140957027, 1365068794, 399969014,
        3798479410, 2374820958, 2083271458, 1230918816, 2849569771, 1247506479, 1435680007,
        2093759374, 2019726619, 3639957274, 2920813488, 428968983, 3355265056, 2632073389,
        2225647842, 2753018980, 962007777, 1242347855, 3720128582, 811579030, 2807569506,
        3788952080, 2459395658, 3596261032, 3681130111, 115444544, 3067905394, 242397244,
        3190965646, 4109832829, 3287651067, 3033134130, 2623052834, 3811507855, 985369373,
        111279750, 4287743780, 4273886533, 1115473900, 3181239041, 103421968, 867667855,
        1906233554, 39356167, 3104891531, 1869061657, 2354999329, 3649741524, 2163167406,
        2825254931, 944024397, 3155431731, 1508214277, 559928868, 1836801349, 3220191217,
        2636516426, 2221404282, 3309346328, 458282933, 3676027945, 2421666007, 2749101075,
        4205978623, 2126392974, 453503638, 3743175263, 1248198697, 1629042832, 1133607335,
        2350446294, 403983911, 3334374507, 3051666153, 2851467850, 140407386, 992701021,
        3955291442, 474228013, 2333292291, 26227473, 2938128774, 969466674, 1355228708, 893364469,
        698919613, 2286009666, 397823553, 3767419949, 2739151600, 3699086824, 3700388636,
        302890411, 4184693032, 1646867570, 2973578612, 2418030081, 2784924210, 1128646424,
        1344387926, 334455850, 2415181746, 3834991701, 1285981973, 1484811546, 641912436,
        548813201, 3375565184, 4178232411, 3654363982, 3847579087, 3180259214, 3923446002,
        150814214, 2512937692, 3470834115, 1876200905, 2929819697, 1402155241, 3320112275,
        3914870064, 188363261, 2009706466, 4176535967, 242922203, 119478136, 3120574297,
        4084089686, 3202727755, 3724339067, 837742719, 3511076901, 837277442, 2521698201,
        3886505524, 3122561807, 1524499051, 2118824564, 1175991745, 2772484662, 886969579,
        1971916905, 885740124, 68494567, 3167140211, 312548443, 2733185959, 3747157378, 2984465815,
        2747752, 1860458197, 1698462959, 2732876374, 2533962760, 1582739554, 3631554542,
        2721453700, 2442544689, 4165712902, 2941231664, 3370114343, 3030796362, 3453876171,
        782827029, 938970580, 2988883424, 2232473053, 4205884152, 2335228103, 1034277603,
        3206895322, 972871891, 2992617228, 134169003, 1732043820, 290965523, 3044181516,
        2447473660, 2919104734, 2063176772, 1195228305, 1296235600, 3654374264, 990814986,
        762303678, 98927796, 2059221966, 1409734193, 1479582514, 2482239797, 1561583975,
        3889969945, 3884005417, 4161290416, 1924409426, 1583650718, 2692298607, 1571883664,
        3476591440, 2233999240, 719492693, 2136754473, 3331513206, 635050012, 3786018239,
        3936655763, 1740662647, 2417463896, 2528481448, 2979438670, 3385854021, 3402028371,
        2267321397, 1485746858, 207183677, 2535937827, 818004957, 921577222, 2183094815,
        1159270682, 4039349861, 1126276195, 1533584551, 3352911844, 237646572, 2531363639,
        4044991996, 441274529, 55720491, 1835927942, 1938629384, 1924411892, 3103942034, 902517519,
        3855955122, 1406011986, 3467250643, 761462830, 3923779883, 3261058888, 3884865636,
        1513741200, 2584601773, 2948553468, 4124317252, 2457368102, 27103757, 529592356,
        4268470407, 4151173135, 2578218255, 401852823, 2169621132, 2961338838, 3178039495,
        1170665529, 3325575227, 4138359730, 713234648, 2906030110, 1565449498, 926909099,
        2350931500, 799624959, 2243852386, 4234415725, 2174134880, 3106986859, 2043880659,
        185151496, 4184737107, 2832913851, 3983319613, 288671578, 2550748832,
    ];
    let out_len = xs.len() + ys.len();
    // width_minus_one >= MUL_FFT_MODF_THRESHOLD in _limbs_mul_fft
    // n >= MUL_FFT_MODF_THRESHOLD in _limbs_mul_fft_mul_mod_f_k
    // len > k_times_n in _limbs_mul_fft_decompose
    test(xs, ys, vec![10; out_len]);

    // Test the following with MUL_FFT_MODF_THRESHOLD = 4
    // carry != 0 in _limbs_mul_fft_internal
    let xs = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4278190080,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let ys = vec![
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4294967264,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let out_len = xs.len() + ys.len();
    test(xs, ys, vec![10; out_len]);
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_mod_limb_width_to_n_minus_1() {
    let test = |out_before: Vec<Limb>,
                rn: usize,
                xs: Vec<Limb>,
                ys: Vec<Limb>,
                tp_before: Vec<Limb>,
                out_after: Vec<Limb>| {
        let mut out = out_before.clone();
        let mut tp = tp_before.clone();
        _limbs_mul_mod_limb_width_to_n_minus_1(&mut out, rn, &xs, &ys, &mut tp);
        assert_eq!(out, out_after);
    };
    let out = vec![10; 905];
    let xs = vec![
        6809535447687914471,
        1103330005972507068,
        372788324988356904,
        3310988417383334329,
        2768136713654061049,
        17867128683005223868,
        2238946582723710409,
        3081056558438604150,
        17026613024401611127,
        1744473747933758430,
        4884032754714318833,
        5071706901657208751,
        12689572021505695693,
        10978480551041753799,
        1800129976413451867,
        16286820002622524539,
        7281000574726170357,
        4219678291438654832,
        15700081839772688751,
        15205907878248907247,
        14393184334614991066,
        14756848254875178077,
        4793637008204029812,
        9858797803427744303,
        16884118866110086987,
        2330774877124323542,
        16233995226797389662,
        6091870787973288330,
        5905123672617126566,
        6532637120046850310,
        3781012952181700512,
        1147955258215944149,
        16381863291477272057,
        13470194198585905847,
        2807745192926696062,
        10417338102018291024,
        1182003379390951531,
        10572015994470653864,
        11256589899556451377,
        7047560236256902575,
        16809106838958682299,
        8167397083217775737,
        10405120914265859441,
        6050515699222625782,
        17283763639396397450,
        12481792043865481917,
        10515115098175408116,
        3547231139273206009,
        2955870806881464447,
        81763485884574417,
        18038197306999979657,
        2697663113419170508,
        13640328591104580425,
        16380387086795482436,
        5937997179794219672,
        11280227770841311656,
        15247718447550407960,
        3356207189433327172,
        9295483089881333487,
        1048090603086884014,
        17630347864859687326,
        16292502783826501772,
        2554058376409680235,
        8746244974811121511,
        13601151617020904249,
        11424464616482878222,
        16592787416774613845,
        9541965809588758702,
        10304263209519954371,
        9718232210246640079,
        3964199137038797179,
        1133689222449100290,
        11762544598027160268,
        8892566166642784135,
        4992855273094478682,
        3467095579457639126,
        17527051578764837605,
        12788831523184320706,
        15884832626408420422,
        15445614371886990386,
        4605408054811466579,
        9468992277252416191,
        16059556135741327423,
        13703354904914355468,
        12651524370372775470,
        12076530382821868093,
        9203720925482564499,
        6751521177612318975,
        14730048400600245248,
        9583087821356332745,
        7635737274166465491,
        15909961927185268608,
        15152412967792641434,
        1117148048506231546,
        15036765086001151283,
        9461075977858154319,
        283984775170615496,
        10870934978120381565,
        16402595751643852267,
        13300950714409955136,
        16269834104766854165,
        3823800040156766433,
        8001239710257605750,
        8854456135465589491,
        3559503577426585699,
        82907824154359285,
        10429508186090534661,
        1795271336507026791,
        16052612691484506490,
        4449527904102534257,
        6652828614119627650,
        9436314767260323923,
        14084834581845197080,
        3924506166878684856,
        4006253714000661354,
        16835787368527074469,
        2939573978616449941,
        827685924983906914,
        513438846841933201,
        5499086145667050935,
        5970432596053952196,
        2357808915999726215,
        13130152994826263557,
        1029371010558121271,
        9673453535289645591,
        13630045027309361503,
        15140438118448998733,
        14475237670869667854,
        646607524428232975,
        8603154126726854477,
        562632002079264944,
        11132087168116199036,
        712016548873706286,
        1162552953778143562,
        2720821187699295729,
        12629405027198622023,
        10085431077125120126,
        11036408623217209328,
        9412034889605831573,
        3580947814659655797,
        2384617485952276249,
        11991332791506170431,
        355732385395682650,
        11957596579072080069,
        7637503009753705463,
        8641065560841157989,
        5385185370436588141,
        14613602605895034796,
        16149929536213837897,
        14926494841744326505,
        8478550502351441150,
        4754411934055301811,
        8446559217491804253,
        175563428577047295,
        13317411913787179089,
        1999388610388624930,
        11997574948104529333,
        7709394800320180604,
        141106960118475071,
        9185076664574888313,
        14711830716786764563,
        8646328906792567341,
        6435770954980752754,
        10889857927018380675,
        4856598903599320278,
        5559749328765755744,
        55448005653193385,
        18376290341644060781,
        5411230779476997204,
        3208977317832509473,
        17939099296520163690,
        14610289283912272679,
        15727344360076838968,
        17691225907664733828,
        6277158099136871988,
        6227268882497066304,
        10537912046761025798,
        4569425383713839933,
        1540443185169512503,
        8083699057632389568,
        7713824171800942769,
        8199521127345296820,
        18024850838783811685,
        11847360547777377558,
        4462968389243655548,
        3995475265600836322,
        1735988164410255922,
        5169863977080869823,
        2205341702567171145,
        2235183401932173280,
        4237083636488253034,
        8651273126396740151,
        7677914001769310460,
        2488550701988271373,
        6362894001274871299,
        6938141915629282617,
        15289077957178314583,
        11369273085874533146,
        15146552950762343609,
        2250130405529921684,
        4507408042222997556,
        12067657188384750699,
        753594982979265248,
        9819871477024072995,
        8074675523776512539,
        17863686634271613087,
        10148559641897798765,
        12078707926245944334,
        16056144107847929568,
        11477562644132166451,
        633839849054735197,
        1974937519863601198,
        9431759751115500349,
        16231263638095445675,
        2852944099010004296,
        10805052896366212239,
        1090853228632071464,
        5943661063504137996,
        12279437176065016726,
        6997180572817064008,
        5167976820090909749,
        7252605595265132660,
        2377574067337995256,
        898853472418766215,
        15283250736100608687,
        11681971203683297764,
        15733049786589504720,
        1874550821442898161,
        10775751683446032879,
        14346795044143203654,
        7996691180178068337,
        7988670994586391460,
        15438536777951336029,
        15583275281862893881,
        1645086929138484726,
        345744887729039216,
        3687893952132688571,
        10659362456954960532,
        9602393538964870338,
        16520689555988157334,
        12546754178798486611,
        8040849778898919845,
        18425567932309437192,
        7524804173796997825,
        7482803818757957426,
        2159381166607938760,
        11953191500503254263,
        11662381083106843270,
        15954507061982303817,
        2311355641538841753,
        6262214959978467810,
        3205610786437952171,
        5833762588841339039,
        9584891950834271718,
        16431258786750754174,
        11295777256302945260,
        10262743010189168916,
        6579167273633548585,
        10655344951630924167,
        12426159972843518796,
        13809556914733676017,
        10421408021758282646,
        13742014587503715343,
        1213383935103977733,
        6155186430649126184,
        180686018379637244,
        6671736391598895649,
        6711423272868884639,
        10567222126096946863,
        236255051969434496,
        10538599139522078386,
        1840416208489527534,
        14920772374579070414,
        12181583640158673672,
        13150385378549419551,
        2385161800547570055,
        7427796248918503499,
        1086611422915217495,
        1034188908993802486,
        17895224758095668351,
        5605583861310416260,
        8276090981819119594,
        16774347628768167103,
        4438689443393994418,
        1445832965009646259,
        12020209207509332983,
        12101154623632027374,
        15952145139262310731,
        4569147745515423074,
        1032438357998575006,
        7719204784227574899,
        7620365528941515938,
        9134138337791325501,
        17595820721307989341,
        10837897611871188641,
        3628300610284347069,
        6056782082517998847,
        11889121953261384595,
        15658848261681587671,
        760281128415892566,
        9901843341271410215,
        17997287540098693599,
        11471174400256577350,
        13773435664609284401,
        224645455536727129,
        3248370257584471677,
        3402146064818516495,
        15419892046652096835,
        6817408051904455983,
        13462567452174648864,
        3865219578658340818,
        6401692728490725482,
        12241061753482985847,
        18093898726091231688,
        2085695270753393724,
        1486152210073874278,
        10962392580868374592,
        18233050379629714175,
        15440497426454102854,
        17029248778709090701,
        11943840019902256468,
        1838494147415724342,
        10624384750477063994,
        2802400104447544796,
        14482700272009891532,
        7488752288284248623,
        16689053330367821624,
        8122258539396763672,
        9378594940099937779,
        1953829770254669263,
        9095248272317331200,
        8866691394084862202,
        13201017990930506125,
        5874101266603325988,
        12758355031414108476,
        10906401543018450367,
        7070115242582431545,
        8015463853343573521,
        6337419761897564053,
        8245569799737529081,
        2143044650526073628,
        10001469296387640338,
        11129612211343148678,
        9846592166231801208,
        3293328206977069772,
        8271586651454757561,
        2516303987084978983,
        18226852422794010543,
        15105013013529789613,
        18154225228636318154,
        2013990863661732083,
        1784747160358384741,
        12567581004427688912,
        12324983884662973603,
        4935897487517618842,
        14994876132441559883,
        3460392282827044973,
        178151701108469307,
        14330685158880278679,
        17005759398710652579,
        12918079073431941444,
        14737890013936547836,
        13116140709796209375,
        4406659418908136238,
        12427086661031458855,
        7492548499951595477,
        16111633531233494957,
        6547469955282364389,
        10562100669850668222,
        15418878616411295006,
        4956757255402949102,
        8013302230254643702,
        528640010877453099,
        14207088120532813066,
        16751882716911936366,
        7949419147113034512,
        1638837693666608472,
        13878268226712426549,
        8273407385523164786,
        11509174550235804944,
        15966833959669295468,
        16501367189938100697,
        18237618137386130737,
        12449896376279048977,
        18110666911456042806,
        3193062725115205782,
        6188346541223558421,
        8058450572610971381,
        6102995183728564982,
        1217219394955358461,
        4696899915064498873,
        3897448246350199671,
        12662172956137287871,
        6610124623177066401,
        17355303367288349560,
        2046855789488294262,
        3211014904560014361,
        17115241076245460723,
        15298358927000333664,
        9182539314691893135,
        5164209594070862585,
        9062044958688820752,
        11123512834458221854,
        2659061244791686400,
        6806035717656270289,
        1027290028815967628,
        9405947735639936936,
        2540349601344589130,
        6895259978837037548,
        8904474026325226434,
        12273615493885622366,
        8677764880724506780,
        6002959367751808149,
        13123965742105252412,
        11735284964695785299,
        2417001610052848193,
        16769279424767143997,
        7098399088498274096,
        9910748236374366737,
        11111297830299095939,
        13640041663283902885,
        15915174780574330612,
        10929481089808875146,
        4581632826936763294,
        8581099749824253588,
        12645736569302882821,
        7359153121066395683,
        114042912187761457,
        8021867264848320576,
        15492861144941287563,
        17574065125533105845,
        16374369432221228355,
        10459169993431587286,
        16366034776295832243,
        2627084718398353897,
        18099240392705942111,
        4326916362018195403,
        6552915731272193737,
        4273219172539573763,
        12682979794809012349,
        2630341686377453497,
        2883112777041844122,
        17280553753834600520,
        16523493292363775458,
        4645653082909935710,
        10857150457399097857,
        16240900012104288727,
        13936061320958754124,
        7489056125188749067,
        3240618672663587347,
        4473897013556224538,
        15959787311013455542,
        6807910945586226902,
        9410336371061067189,
        6906088553149840730,
        5605158148442495482,
        884531864210940213,
        1872297304786275835,
        313522309067627421,
        17334018801756959340,
        1675436862731542012,
        8842978529412038193,
        16491099153488944340,
        3255602365380029669,
        4091823593236384660,
        9059086866751700824,
        18074592049968473162,
        8939611511088706324,
        2901954556715326677,
        3168063820638083277,
        9642457237234984168,
        12973730047202029231,
        12383420012085361069,
        11980461635855055601,
        815939574328079776,
        14011981531029282088,
        3819777392902083260,
        3664266433302366398,
        3842827072078938508,
        11680613555445372946,
    ];
    let ys = vec![
        15245088662193948010,
        854969528224537163,
        192457876290468361,
        3156774054099849881,
        10102117358735393641,
        13923135497401538045,
        15603007686998930972,
        3707765480829539463,
        1075990372015045994,
        4440028045035707188,
        779932550205535682,
        13284596850012603887,
        13447370325749987403,
        10657005451799608034,
        17344058779081327933,
        1801131630646010099,
        17879455113972297046,
        1049662270419803525,
        17887003202529550415,
        13730724178286439296,
        3086493866184691051,
        7455503161286080904,
        14945249663072669446,
        7413071270018261565,
        8165098975144402988,
        15667870805615006559,
        4534237642686726425,
        5675059133984408369,
        13542693529471369730,
        4650690134857994243,
        10593876026982724440,
        8719234160809710444,
        7340192483727047710,
        2225660849988538666,
        3260628781823840386,
        14784063213821786553,
        13478324037708856111,
        6239844587086244103,
        14508626048519473050,
        11443816492520902359,
        7084448144752764341,
        11673478635762496725,
        13444020463604694513,
        1798574113181758005,
        15195278749704748030,
        3490272214933312037,
        15632500462832370824,
        9808665338648603851,
        6377980234800091876,
        11306384233660763805,
        6392788317448223882,
        8005181869701567455,
        4601526777105113530,
        9348184476999479133,
        16105441815997897842,
        15373735633778437011,
        11733794529384137433,
        769246272107807645,
        2922899274256775805,
        16218486247871807873,
        10650657974127272786,
        579665301817927565,
        6403006378940431337,
        10150254532952843560,
        3736822004545760197,
        10244207440138560761,
        16631379436671010056,
        17418302422321190629,
        4844439457855539440,
        9662799133272397874,
        11622100630061039998,
        11017257064923257696,
        14025546287952884200,
        1170766120552674008,
        4852413824670160293,
        18019298735978800767,
        14042374992041286164,
        6103187929964524269,
        5988592592688695870,
        5579172720281387479,
        10738878044274955012,
        8401646271610146442,
        12016061916593958227,
        14752402557741497038,
        5053283107906893264,
        12910662726197463795,
        787526459034857809,
        10304827788120361107,
        8387521101013404665,
        6030209567663971422,
        7511028869236306454,
        11105170944119024313,
        2911699195421772292,
        11710398806568443147,
        7599646386487625804,
        2146501359265516686,
        1193294087739295886,
        16419769173966961854,
        14779980297792837632,
        6286361066120350249,
        8246126699673376536,
        2339493649448723726,
        12383521129608538925,
        17459816050942292574,
        7213741082075285427,
        14702683527305456088,
        17849030573001874153,
        3273901152373442943,
        10086273715179643444,
        14351251935054659627,
        3067622597087477151,
        4241957707372911307,
        16686513037697490920,
        1503886102490162470,
        4222986769290077389,
        17209928444872897872,
        10064374817012298812,
        1391022681726221923,
        3482099619102309134,
        151151415131464647,
        5477310851692317777,
        8185741896741403527,
        12297179519749775078,
        6980896315258250234,
        5491311995173541969,
        10908311176531272611,
        15140263006374103771,
        16292302828281485620,
        13488663273854028028,
        17078235461511918753,
        523009743565281503,
        11105648925812514991,
        13827146014280242829,
    ];
    let tp = vec![0; 964];
    let out_after = vec![
        14914577666128062141,
        12068273989972843735,
        6116694005478833271,
        3562611869773989286,
        15670691724611128823,
        7249128461000381996,
        15151435496873338180,
        13770931346629219578,
        1187535282027344550,
        16236693325430049515,
        2991034239214163143,
        6018061923835566187,
        17284480928832658068,
        14451687627520119240,
        8458802009939241800,
        3578663573390196265,
        11053350197861111769,
        10545908371462300770,
        12247772832897108412,
        4468839684066577960,
        4549770468763696098,
        17752125097317086921,
        4544887864950226436,
        2945143834276229802,
        13648049166616052237,
        12600592346334587273,
        166409088005131745,
        13013620684136565587,
        676730163848086040,
        12404388221407599051,
        10705640677758869552,
        4689698885735113463,
        9700890479828306187,
        9036861144548712951,
        8094206411676899952,
        17821082304555823758,
        5054804670485674122,
        16421357706067082536,
        9704734314786980295,
        13265421291054572321,
        4619919032177510478,
        9576547362592346883,
        2025158308184190088,
        4984956647828393866,
        5567014476440543897,
        7390123682276500529,
        18303245037317000170,
        4525541943295462130,
        2509303616856320788,
        15659980472438820675,
        13570563127509629314,
        13564844957739564512,
        5956170799543933857,
        14572147749185034353,
        15936664264029850696,
        3337746889684993302,
        5339311381497232535,
        791608983511277044,
        8425434054207053106,
        4098815735774818440,
        13011885841922962026,
        10478691500722275800,
        288311354477678992,
        16688724556777848799,
        3854559944896493088,
        4787579643539441431,
        8914365544703418944,
        14867687936657046038,
        17948945926508777996,
        17265394933400453261,
        6520518082305967564,
        6823369778027186436,
        14260127132198472109,
        5636179564496979683,
        7510494946039669953,
        7445089968619727375,
        13151208295034342548,
        15327531597402220486,
        6165165423748958807,
        7649301241163383867,
        932300362699473366,
        10332384620840363496,
        1645779973200198914,
        6819633096753052339,
        8430257326959342191,
        3365328330624946043,
        17882376594601626429,
        7931772344347882099,
        12207106533717173393,
        9553942214328281184,
        1211963965695483236,
        5986284857424925918,
        1725008760284435757,
        13885703170228952143,
        679979762314983844,
        2803926223916590493,
        15129803423596480560,
        5700355505192464858,
        6737697386531803219,
        11676336532156262967,
        11219388591096271471,
        6036126874875117221,
        12759399619486488762,
        1075627928411788278,
        8986609583347352588,
        315614912525710770,
        2968976622267634808,
        9398679997246989312,
        7442449431966307944,
        11074315772256995625,
        13059753170473066158,
        15516530300302448410,
        6694913298086290552,
        12225172653086039386,
        14693751743728804585,
        8946708930559907274,
        14677397241988234315,
        3209366617332728026,
        6979717107269587401,
        4941778982576664589,
        12304520439559413990,
        16634028143562183371,
        8142239299779908752,
        13355303957199352688,
        16647311136213462709,
        4819997788796101212,
        2740900572266512222,
        4917952099793992792,
        15276502006380998408,
        11163544344324054972,
        4805821501449058572,
        8031120161948062386,
        9296985703342487576,
        16564164538495558074,
        4151584010060908718,
        736580097771121849,
        17811365526093310331,
        3584057130812467869,
        15343174508489570281,
        6663904409520260794,
        5148198311285516597,
        5459037875257818034,
        1732839752669203018,
        5817171919148564506,
        14532823584962157630,
        17664910567425460977,
        1606328717145502899,
        7258676117087673712,
        13564853056256859610,
        15566073818913471128,
        17505691249649149638,
        8720681711808526345,
        9299675336460004741,
        12175130218583331200,
        17275662125027429780,
        5254636675017986768,
        4584180635141974747,
        17229718845518394206,
        9903358674827047499,
        14227884446253370289,
        10238808006451695682,
        15776343954783670697,
        3568203177480129616,
        10791516058691563224,
        14667733988945443113,
        4760849120471199172,
        14824266274906749858,
        4738766195452531583,
        18201869520178488918,
        7991042165868231006,
        14001045459551827213,
        9728825906169570644,
        16356820821501653437,
        4624890364800751139,
        3202345381085270173,
        10825323351814264733,
        12844260821347730875,
        17890471175274365223,
        15983756164008599310,
        9229389060056964014,
        7980425933216172325,
        14689445497065509264,
        3947266856163410121,
        13986662827479113948,
        14086840354569963505,
        13182084671726443227,
        9173479010912744389,
        4592278812024543534,
        15484536985258289385,
        12413608308331869638,
        2694433334520487941,
        1628652491883279350,
        3020979365812132524,
        4761921028454215909,
        9912693764834406519,
        14831540747828363756,
        8079998785196191830,
        11252016841358535301,
        1583433672276669340,
        3452712503195064151,
        3057285240369947887,
        2595743348455770874,
        13596185098573058903,
        11667772373252099988,
        3692370881551772687,
        14912011223264263901,
        3289162294555844501,
        11705734929820375948,
        17609626782993672509,
        18117255127345119328,
        1604093155153663473,
        9302755008283648290,
        4607754412797627670,
        2438148241672671544,
        7767633059920523266,
        3595119232557040143,
        12437965844493362543,
        5945493114625270416,
        1881882682439839256,
        12119104281808262978,
        6340145747352803155,
        13626236273901226360,
        13270069380549785256,
        15850889016963874457,
        340925488865420050,
        14028143098693299269,
        3675481773099673886,
        15132383794361616982,
        12233631174234968448,
        12037785574496977166,
        10737440493925210255,
        17968097042350264930,
        17680205263988402231,
        10859227415540706659,
        1792989334549221826,
        2177480830391393668,
        10338369798118713206,
        11542959090623521328,
        15037173432548249812,
        4664260954029694873,
        9780024773679095230,
        15423051572962932558,
        9219085292170154212,
        3117519792300278178,
        15201618561147315107,
        4493458887555315362,
        7071488025555767928,
        14797673892858036574,
        15761839968701169338,
        944266743877977151,
        7946878991241141272,
        11588285294320616520,
        3085763786364505728,
        382160258300824544,
        5755505265595418236,
        15139252786842523155,
        3984606858609787503,
        7067124810169118107,
        11087518322251373936,
        2145074716108216620,
        13925513670821357445,
        11473752360428444547,
        3033405528387034503,
        7582032677934023131,
        6892449022193017132,
        13657958745036075118,
        6128417560891330511,
        12848284770679740346,
        13130020275156534634,
        15464211076162624262,
        5054410800851766065,
        5483902692780184480,
        4738318744782334997,
        16867167009329238452,
        2678560575986600940,
        2615258434432884977,
        7292976780151019583,
        7128935031167862533,
        18221899987307473439,
        11248303633169678295,
        12738639111676263555,
        3155353877742869694,
        16071495863264781073,
        4264698448823081203,
        7418994727203896067,
        14811917097660163843,
        7385790368475083290,
        664373701990601810,
        13483754102463667701,
        7612123824094233525,
        512453134520186948,
        11691341684613561710,
        13867096232148780503,
        7687434174716142000,
        6803483980923514751,
        13342782916572404854,
        8439201436522607326,
        9757760943763629593,
        5981970754483057908,
        4190757094163155311,
        5660547043969581137,
        14325603855966161415,
        8929633236673768270,
        9297312576387550830,
        1693558263949957284,
        6836793952945831062,
        10347383165146273428,
        14661681337332505439,
        17963531302478114205,
        1709137293854005147,
        3006720702657955228,
        7329219772915910677,
        17104100208631258612,
        1949699737886797762,
        17000436044616227003,
        11324808183485510201,
        13235495906244342819,
        15749585439652205935,
        13303759086698322754,
        14891288338853864137,
        2704605299240507925,
        18013575082547999538,
        2430267745104734440,
        6179542971962498102,
        16185308076341237746,
        16642985193904420358,
        2654686382891502775,
        14166125840594907890,
        13875221482589820174,
        4356811139286595070,
        7880657059321548510,
        9955951238878446164,
        17891804138739212705,
        11829321244704294673,
        11236151306675978093,
        4831011344740993127,
        15572388809599316560,
        17846543352626240390,
        7199845863441340373,
        11121886749027339043,
        4373695674384726918,
        17093036459186744076,
        12232005422016339414,
        17131567018724437993,
        16256199016182051711,
        13475963188288260257,
        911027923034979647,
        6400295517498242996,
        8837389249699670037,
        2811700517251274120,
        513035437159887251,
        15619284911695136524,
        399375572943822801,
        7075743944967114918,
        15672634271222934582,
        7207711819265953469,
        13693046740725554616,
        4027434095315202255,
        3539401330347027933,
        14804329511729011870,
        349324242806502305,
        9296277440807870703,
        7176700326904811702,
        240113067969972951,
        8383831921575151446,
        1722116363229832243,
        11612954111300504655,
        2215733152712733871,
        13493183699196154480,
        16071186765983825953,
        4130784068501749192,
        7338573984508524547,
        10825001941195956075,
        14997934222654203001,
        6505703712429055284,
        7221915757982082460,
        1275601006259924603,
        5672514881351973473,
        14882830470570010681,
        10941637348461954999,
        9488919083136123898,
        14043552860848000866,
        16822079753245337019,
        4714248213100277643,
        969715273010037797,
        15521864292227188985,
        16073105970793932270,
        15708820798300121289,
        13898215817316628619,
        12776496008354836588,
        14999798045466993632,
        3260898735577297939,
        13139436153787118831,
        13332280475731022238,
        17383012290790364040,
        2995641007327542345,
        14136727525433141277,
        17334568127137876546,
        16958828191205021632,
        12417369554667951160,
        3090518852098624195,
        13657230135070531823,
        11743085280276876203,
        3114616886140581544,
        6043287503993377429,
        17550757261658589945,
        17149590190690566703,
        9103040591046283294,
        7946146551153766574,
        6328750617512334061,
        7611645677682650836,
        15633620719663274568,
        9212436143674176261,
        15788907043061834348,
        9498761316246368036,
        7352496413262997914,
        9095543535942948357,
        13109519298804112825,
        17605710606152813899,
        11836475532966293267,
        15936748974921397105,
        1111801049346591026,
        15762144272111321164,
        13004674117006965866,
        11908453630639663926,
        8672383672749866782,
        2088248899380502026,
        7296610571351867175,
        13755695345060796205,
        2999982423435890541,
        4129519642079256449,
        12622156276462967022,
        7111496398765881581,
        14480787311565160150,
        3469939266209117746,
        7438701329152033623,
        11629269482462741856,
        4885777542024810464,
        10705129561986474549,
        12704646697057875,
        6458480273092609348,
        6552269679491575287,
        16764409845541378365,
        5112781772516022587,
        8008989787537536761,
        1103584530948037829,
        16382841334779146359,
        10554805089071823936,
        5435260964051060833,
        9791508728754514420,
        490382068908134805,
        17435419070710567937,
        14195398757764953304,
        2963888499740999291,
        4662041165840469949,
        6744621662455431846,
        13427204268640870135,
        3887747288146601313,
        15443876414310792510,
        14209765039523837918,
        15685162874875886369,
        17718873723062454563,
        3899085415479325935,
        8112448753673506965,
        9870640447409364221,
        11832870733499002257,
        12563697741369320162,
        7101757806260064829,
        8836333095435223130,
        2301074177341928226,
        8276824997793946999,
        2827834280767843126,
        11204234843351418659,
        14057032714422307544,
        16637779355549534512,
        17293043019105638911,
        5235444579393367735,
        7875158171121328348,
        12032932633735348172,
        17577724652120330660,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
        10,
    ];
    test(out, 480, xs, ys, tp, out_after);

    let out = vec![10; 905];
    let xs = vec![
        12477471680342457016,
        7439834363175998259,
        8364531072478531307,
        7720669117264982572,
        13871089126608066865,
        5538739089658515009,
        13485862549968349516,
        16668965138415286574,
        12815918125584966674,
        14984155091932260860,
        16644766636646585123,
        306590725006293979,
        8429368518159297616,
        9218529725576681069,
        15016741949480768499,
        1670879514738013725,
        8417955162372577946,
        15387720484925756369,
        5110476884223883348,
        1816362467650579730,
        6344760880304946457,
        4582050077501139760,
        11544561500401244826,
        17507375286136941082,
        6780825611959218867,
        2173592718397418409,
        14895320899302250577,
        1732130437372403944,
        2652228013798656770,
        14059887082577558829,
        17320142963333434007,
        14639018477416372959,
        4436670787324500429,
        5494397060264160564,
        14648982379079464056,
        4281784633461453767,
        6798187094949642558,
        6608877920405717218,
        12631712797504769978,
        8551308273612802041,
        17246776198396440310,
        6444397599333607623,
        15925650298696285563,
        10601768410796015631,
        15000906276520941112,
        3338797399168993953,
        1246352375954040582,
        11420394385271506024,
        17068095307090480528,
        7644631914604520606,
        11033781661348318008,
        11117169690184835735,
        258761790873428567,
        17489901188933003933,
        14840505235785535230,
        13227413113638715481,
        16997698053799118525,
        9019797589817151925,
        4493694255366969932,
        9725237995968980495,
        15577413875064628551,
        2280312394933338862,
        225569847977698671,
        2323301829890963353,
        10256874123357921822,
        12539122566148296448,
        9989537237723725906,
        6811992642529374338,
        88727847633051669,
        15695593575052197094,
        2761202085861005143,
        16533039048484256106,
        9351088285086271793,
        4055478109313752276,
        10213434408975318081,
        8762684020269433141,
        5837079994402234584,
        16514518402377369291,
        12378208937452956180,
        14421807887515276362,
        3988627559762405319,
        3918544582422029230,
        4755956678288947720,
        9676877814462397554,
        224961575368542488,
        14611489560386313010,
        5196486534973110781,
        14213777193365038984,
        4602978866967803674,
        11003619085742827120,
        16763677630294953394,
        1684559030448096764,
        17767374982649848838,
        4877949630873126245,
        3682814944580280752,
        2561235719818456295,
        2364934896956055350,
        18263613281445563076,
        4089114060737928308,
        1871768083735193579,
        16678770828678552573,
        4414846026098045432,
        17125831209897882395,
        3912127090800830255,
        14011181803889192282,
        1295043426575781791,
        10420967703804408197,
        6199906131836288010,
        11807153033347357192,
        14265899593105313257,
        8147605267573587369,
        3295330776500509264,
        16732577613226211515,
        3630606949899242603,
        4077531443619740772,
        11812426165247810337,
        780989759563676061,
        16843715221613475518,
        520503200629457264,
        15698734581373560858,
        15717047446773117386,
        11739182472950746776,
        5508507755766772851,
        11277744890514126849,
        7102937323315103744,
        15043426316219001362,
        17264933403548961444,
        4786858792980655802,
        2014728966166520846,
        13049152613696846196,
        8986797982833879405,
        5686978963676857351,
        772150166774986658,
        14517086870053753709,
        14954116996489490375,
        7746391697910526188,
        4606434146793009376,
        3009553593220536962,
        11834331104428006940,
        9959812709547803325,
        9312818550721389795,
        8167722699792448458,
        732874657192970052,
        698773781905867242,
        12119405880051172902,
        17673033350796167980,
        13538870733321508367,
        2664725175527539380,
        7636536994105874784,
        8629987496621113680,
        2000550558774774739,
        13628751714628702436,
        3345724186836801042,
        5296651644730514746,
        15440075910536479523,
        11566524344598274755,
        12142530999548267726,
        3178476168461706193,
        11231993373182544616,
        5535836762655782188,
        1821857691788680579,
        15398067123112832375,
        2959937906512595934,
        9894128090659796945,
        10977676213479413606,
        9896053141077387340,
        4732359585478105829,
        2782537058538126590,
        16748650113511090469,
        16234573623069140583,
        13526364553240274764,
        3472042735026885459,
        1375504011635585658,
        14134901088610758184,
        5812986093773998116,
        18343907802066284210,
        10338195362284836496,
        4538933452393836273,
        7202972851508573831,
        10663048845744919725,
        11111095559628771539,
        15813947556665176307,
        3844063447234634925,
        5652338735091822320,
        15812061039848958137,
        8229753298839583649,
        802923134917039889,
        4829163585440544772,
        15429176731296846429,
        8019558793413477543,
        1452525545607666514,
        15573790577533593753,
        491936016981197942,
        10062863560179613545,
        11061384784011621889,
        1900052214617990619,
        7753731008479284745,
        16019010346473083888,
        10253841258470892164,
        13903408453788781151,
        10169884958783022914,
        1771119784479465694,
        16876761255984683913,
        4507734336556855851,
        1644190668914968903,
        11524855357000701681,
        6768296219427733234,
        10057582861726337550,
        9899648217778374596,
        18140808584162437045,
        3502136377186507090,
        4607134693582048621,
        13936949880580583914,
        2596788772608678076,
        1796713826239012327,
        4260582063129126187,
        5748801488885906379,
        16694615442676144004,
        3887305188180051618,
        2550350767205712363,
        18068173339311621649,
        12758173303022710234,
        9740862123276893551,
        5102010307820377604,
        10942936333209708005,
        18421941488948996650,
        11388637231777062032,
        9127668535392226249,
        6469837987038520357,
        14193922743168722337,
        8879463076013852218,
        1299536255974471810,
        11657123384643255381,
        7261659951101262301,
        5894363505946510117,
        4245862285394351605,
        5678371230350087802,
        17178046578086915046,
        5767351492432132301,
        2765778331274782081,
        5032104048099942935,
        17629257268172754881,
        3538476034090404567,
        9059696921132002704,
        10148267678588608063,
        7431557905485244392,
        17701219837659593435,
        11179519028472592747,
        4072852058212419917,
        6998722206646617171,
        4881588377784087158,
        8942392135657118187,
        12450098984983403167,
        4877380715364130438,
        7442425351254657978,
        16893368119062256892,
        4133190116578139434,
        14033231224823505685,
        17690698791038106309,
        69885719555671168,
        5451291976155541960,
        7641909931651695485,
        14034042004808926588,
        12720147227862124510,
        12957030947591398482,
        12124026692922785247,
        4883408107294185147,
        3308537627824539756,
        4406371143811003270,
        17321810257306281660,
        5243104860854009275,
        16431126877381187748,
        9754896554997520777,
        6749101884247660127,
        6263295512058358448,
        8583119091158463486,
        5555416137611535608,
        9162144452187531823,
        15840624178481981270,
        6187472780701357377,
        3164204801472770089,
        9460961259991884760,
        12198117330023239045,
        9445542084090344416,
        6826521970103491663,
        6996442717256261847,
        7363775912789871847,
        1821616883363314737,
        13718695280220668528,
        9265991471759860428,
        15403328465978445840,
        10435756695146507564,
        9134138337791325500,
        17595820721307989341,
        10837897611871188641,
        3628300610284347069,
        6056782082517998847,
        11889121953261384595,
        15658848261681587671,
        760281128415892566,
        9901843341271410215,
        17997287540098693599,
        11471174400256577350,
        13773435664609284401,
        224645455536727129,
        3248370257584471677,
        3402146064818516495,
        15419892046652096835,
        6817408051904455983,
        13462567452174648864,
        3865219578658340818,
        6401692728490725482,
        12241061753482985847,
        18093898726091231688,
        2085695270753393724,
        1486152210073874278,
        10962392580868374592,
        18233050379629714175,
        15440497426454102854,
        17029248778709090701,
        11943840019902256468,
        1838494147415724342,
        10624384750477063994,
        2802400104447544796,
        14482700272009891532,
        7488752288284248623,
        16689053330367821624,
        8122258539396763672,
        9378594940099937779,
        1953829770254669263,
        9095248272317331200,
        8866691394084862202,
        13201017990930506125,
        5874101266603325988,
        12758355031414108476,
        10906401543018450367,
        7070115242582431545,
        8015463853343573521,
        6337419761897564053,
        8245569799737529081,
        2143044650526073628,
        10001469296387640338,
        11129612211343148678,
        9846592166231801208,
        3293328206977069772,
        8271586651454757561,
        2516303987084978983,
        18226852422794010543,
        15105013013529789613,
        18154225228636318154,
        2013990863661732083,
        1784747160358384741,
        12567581004427688912,
        12324983884662973603,
        4935897487517618842,
        14994876132441559883,
        3460392282827044973,
        178151701108469307,
        14330685158880278679,
        17005759398710652579,
        12918079073431941444,
        14737890013936547836,
        13116140709796209375,
        4406659418908136238,
        12427086661031458855,
        7492548499951595477,
        16111633531233494957,
        6547469955282364389,
        10562100669850668222,
        15418878616411295006,
        4956757255402949102,
        8013302230254643702,
        528640010877453099,
        14207088120532813066,
        16751882716911936366,
        7949419147113034512,
        1638837693666608472,
        13878268226712426549,
        8273407385523164786,
        11509174550235804944,
        15966833959669295468,
        16501367189938100697,
        18237618137386130737,
        12449896376279048977,
        18110666911456042806,
        3193062725115205782,
        6188346541223558421,
        8058450572610971381,
        6102995183728564982,
        1217219394955358461,
        4696899915064498873,
        3897448246350199671,
        12662172956137287871,
        6610124623177066401,
        17355303367288349560,
        2046855789488294262,
        3211014904560014361,
        17115241076245460723,
        15298358927000333664,
        9182539314691893135,
        5164209594070862585,
        9062044958688820752,
        11123512834458221854,
        2659061244791686400,
        6806035717656270289,
        1027290028815967628,
        9405947735639936936,
        2540349601344589130,
        6895259978837037548,
        8904474026325226434,
        12273615493885622366,
        8677764880724506780,
        6002959367751808149,
        13123965742105252412,
        11735284964695785299,
        2417001610052848193,
        16769279424767143997,
        7098399088498274096,
        9910748236374366737,
        11111297830299095939,
        13640041663283902885,
        15915174780574330612,
        10929481089808875146,
        4581632826936763294,
        8581099749824253588,
        12645736569302882821,
        7359153121066395683,
        114042912187761457,
        8021867264848320576,
        15492861144941287563,
        17574065125533105845,
        16374369432221228355,
        10459169993431587286,
        16366034776295832243,
        2627084718398353897,
        18099240392705942111,
        4326916362018195403,
        6552915731272193737,
        4273219172539573763,
        12682979794809012349,
        2630341686377453497,
        2883112777041844122,
        17280553753834600520,
        16523493292363775458,
        4645653082909935710,
        10857150457399097857,
        16240900012104288727,
        13936061320958754124,
        7489056125188749067,
        3240618672663587347,
        4473897013556224538,
        15959787311013455542,
        6807910945586226902,
        9410336371061067189,
        6906088553149840730,
        5605158148442495482,
        884531864210940213,
        1872297304786275835,
        313522309067627421,
        17334018801756959340,
        1675436862731542012,
        8842978529412038193,
        16491099153488944340,
        3255602365380029669,
        4091823593236384660,
        9059086866751700824,
        18074592049968473162,
        8939611511088706324,
        2901954556715326677,
        3168063820638083277,
        9642457237234984168,
        12973730047202029231,
        12383420012085361069,
        11980461635855055601,
        815939574328079776,
        14011981531029282088,
        3819777392902083260,
        3664266433302366398,
        3842827072078938508,
        11680613555445372946,
        12778807841055009071,
        12110239716506060424,
        10455001326219377212,
        14037063373827903372,
        7343791660755545799,
        12328389593346708858,
        7199828106464912509,
        4858835493732869191,
        4210694898816644452,
        5207062729711049186,
        6686010191777285325,
        4765116176650914771,
        4260203503346398077,
        1759950825465072730,
        5230132100642234984,
        14615940487884510813,
        17309789486063144027,
        7278701880222450078,
        10589604955548805402,
        13389545410598327517,
        8048423454310044609,
        10174798177374038317,
        11695819581512336602,
        10798166591000354836,
        10103293254150868119,
        157182158726905133,
        1338674327495139085,
        4359740350600884386,
        3252895658818469796,
        10919494111178843097,
        4907614062557818120,
        4955680854509122805,
        11945192504152771627,
        7975797138321745283,
        6605506887556783622,
        6135553468556837256,
        12830560358150860589,
        3963138074064936645,
        17071621175761233015,
        16942996036353652149,
        18009074714271793604,
        1722999483884168113,
        12926214689279125494,
        13895491362136161766,
        2282857362875456337,
        9142994644696487964,
        9268762722221367534,
        10573580827711251601,
        4334519573500535534,
        10883875644989605426,
        7004415645651661648,
        10027237496943886389,
        13381566800231151857,
        17337229971572030119,
        9544236017718236057,
        16499558730912147790,
        16696764467460841050,
        12783153673325726862,
        4801788834514363554,
        9769596680827455135,
        2052933989795058774,
        14012190388893162910,
        2328488528431981564,
        6422943144920158158,
        3344277493662982427,
        17332086124044133390,
        6603250179050887938,
        2729973167059384364,
        10215535361886902702,
        12469382708903994601,
        1202997051177792035,
        3047394247674395800,
        2411456312940888474,
        4837088057329031859,
        13226164937828712217,
        13151155632897757600,
        11689971584362603020,
        14721057194516503031,
        3506623688955464241,
        1023806484371714024,
        616780495049061260,
        5550447694830386961,
        11303599457452379703,
        4026477090451957914,
        12426562795004232982,
        15911784896145106699,
        4007234390509453717,
        10984488057956831607,
        10127069533632441573,
        17026212809323057241,
        9318803717581063712,
        14225402896737171843,
        15831782058852344212,
        14685942491342656916,
        11353950141420870530,
        6899840258039698024,
        16365793951924111762,
        11054065770384370104,
        12313481690905923958,
        11429182630674761557,
        18037807349797853208,
        17855698087768272616,
        9322152574069274970,
        4942329044664759235,
        7995065847246945033,
        17234608471288129109,
        8540482286126463,
        14042109278380290397,
        4245459658137149297,
        8630372384706772616,
        16951967420255591896,
        6140983990759814658,
        15799001042328537181,
        293899216979442252,
        18375466344090472198,
        5023361203279264131,
        2158584219052773880,
        2430714777079983012,
        18439679719922027552,
        8247095638003041692,
        8700129222990386425,
        9065370516758531054,
        7621645239059490705,
        8198370193753546038,
        2570516211974541846,
        17033362784799911757,
        16322248788609588904,
        9688378877889012051,
        17078622631971263745,
        14000745586739559896,
        10022578092954937154,
        5445108204439341684,
        18386610455808271244,
        5092210157433941468,
        6213448264919356969,
        4883013329288095834,
        5478996930332110750,
        8026855029996672366,
        16024447858887376249,
        12067879178821404087,
        11518543008940438069,
        3823610091713721972,
        18069601801912264214,
        11258822797166212826,
        13964841203412084177,
        9414776283754541624,
        10293058710824631389,
        11948877430367495415,
        8513392542107963113,
        6296507345123212825,
        6477999943576666411,
        9572404293136150991,
        5100835030655003210,
        13325655857556084165,
        16324080076960251181,
        8879608339499901790,
        18301788022265813222,
        4530918631858474410,
        7355857660645482071,
        3649239901919106124,
        12889973024998083984,
        11695005857389286582,
        3475833048468156819,
        995729836358583730,
        12325666763829458288,
        14110440261397920019,
        13769832493884639171,
        15593753283105934190,
        7109324739675458351,
        5421147768472920505,
        4412734743279888925,
        11138246548885387220,
        14351840348441253310,
        3556324819053975644,
        464172005362873872,
        6330105154140333710,
        199716684476189301,
        30491931320003660,
        12784214407370490288,
        15867394285597021458,
        15049472685881722845,
        10832317644389672128,
        14180787391549176759,
        6195021812685555238,
        7097651423104249027,
        14212466040470804288,
        933065029493216032,
        340700391640325051,
        5222909044979876332,
        12662368682228247352,
        2784558090880586519,
        11524226622572698014,
        7185977984788112517,
        10872431215518209444,
        13748253290972801025,
        5038089701011291997,
        7535346948699029838,
        13797006813111000874,
        4892711692291451444,
        6793466025450692149,
        12784267157149526257,
        10296537403905285004,
        2323577800704132951,
        5312137140467217143,
        6430484854861543636,
        6338831277270911406,
        3380263422470065531,
        2021125064519606784,
        6156495890069554972,
        11783498133679281022,
        15578447545577779722,
        15814546899991104192,
        13941553944244468050,
        13634474865486767598,
        1056230272770991969,
        6544470833237086052,
        13788795813455716701,
        7695789694537545607,
        8392131987884965107,
        4446829805611351645,
        5546547554488839716,
        12941176365951974041,
        11083456017770653320,
        14243587238307940226,
        4340314402890900681,
        11706773788443852730,
        4344412554812442687,
        11193626359760223528,
        4305913696407512521,
        152872300974481317,
        17563972177873767735,
        6689134738611919649,
        3781413393308080648,
        8321615330761631580,
        14197467496901526225,
        14546626676044239226,
        16456266795492152384,
        11928059952577597101,
        3835042046532738036,
        13754911224713375253,
        7514650130698543676,
        8858336584435716580,
        14887091898219032624,
        16911851326374546737,
        15781280213878900978,
        13174567334832245983,
        12698715736553212443,
        482862054634250522,
        11881655003769883900,
        13759377508601776198,
        1380626582194380651,
        12709962724490385600,
        11830407677567487487,
        4707511235470141279,
        8988833435496096196,
        12849153210950239984,
        6129552893611029481,
        10992680122519594516,
        11411390234302369473,
        12356274253287847627,
        8358264938578134057,
        2779498090106587161,
        18154716656404340371,
        6939980780951404838,
        11644899556767279317,
        6503403399166403612,
        1788328284304710501,
        3402885645044344883,
        6160850982285943593,
        1361188868372704452,
        5295494278668069110,
        3856033404817891402,
        5165875819581549636,
        5432481755911013545,
        6887089866491061103,
        12248786783098658185,
        1872380111306967890,
        10371211044437237288,
        3640308804221372831,
        11707751977394310973,
        2441379059837646171,
        17261873795536786450,
        4576230298744928057,
        13439891433013201618,
        13066055068615706211,
        5023766490253071135,
        4737378710842155527,
        14130528255898995994,
        9297196539004306162,
        10213190959948266193,
        10762620391958680674,
        15631352907504559989,
    ];
    let ys = vec![
        15245088662193948010,
        854969528224537163,
        192457876290468361,
        3156774054099849881,
        10102117358735393641,
        13923135497401538045,
        15603007686998930972,
        3707765480829539463,
        1075990372015045994,
        4440028045035707188,
        779932550205535682,
        13284596850012603887,
        13447370325749987403,
        10657005451799608034,
        17344058779081327933,
        1801131630646010099,
        17879455113972297046,
        1049662270419803525,
        17887003202529550415,
        13730724178286439296,
        3086493866184691051,
        7455503161286080904,
        14945249663072669446,
        7413071270018261565,
        8165098975144402988,
        15667870805615006559,
        4534237642686726425,
        5675059133984408369,
        13542693529471369730,
        4650690134857994243,
        10593876026982724440,
        8719234160809710444,
        7340192483727047710,
        2225660849988538666,
        3260628781823840386,
        14784063213821786553,
        13478324037708856111,
        6239844587086244103,
        14508626048519473050,
        11443816492520902359,
        7084448144752764341,
        11673478635762496725,
        13444020463604694513,
        1798574113181758005,
        15195278749704748030,
        3490272214933312037,
        15632500462832370824,
        9808665338648603851,
        6377980234800091876,
        11306384233660763805,
        6392788317448223882,
        8005181869701567455,
        4601526777105113530,
        9348184476999479133,
        16105441815997897842,
        15373735633778437011,
        11733794529384137433,
        769246272107807645,
        2922899274256775805,
        16218486247871807873,
        10650657974127272786,
        579665301817927565,
        6403006378940431337,
        10150254532952843560,
        3736822004545760197,
        10244207440138560761,
        16631379436671010056,
        17418302422321190629,
        4844439457855539440,
        9662799133272397874,
        11622100630061039998,
        11017257064923257696,
        14025546287952884200,
        1170766120552674008,
        4852413824670160293,
        18019298735978800767,
        14042374992041286164,
        6103187929964524269,
        5988592592688695870,
        5579172720281387479,
        10738878044274955012,
        8401646271610146442,
        12016061916593958227,
        14752402557741497038,
        5053283107906893264,
        12910662726197463795,
        787526459034857809,
        10304827788120361107,
        8387521101013404665,
        6030209567663971422,
        7511028869236306454,
        11105170944119024313,
        2911699195421772292,
        11710398806568443147,
        7599646386487625804,
        2146501359265516686,
        1193294087739295886,
        16419769173966961854,
        14779980297792837632,
        6286361066120350249,
        8246126699673376536,
        2339493649448723726,
        12383521129608538925,
        17459816050942292574,
        7213741082075285427,
        14702683527305456088,
        17849030573001874153,
        3273901152373442943,
        10086273715179643444,
        14351251935054659627,
        3067622597087477151,
        4241957707372911307,
        16686513037697490920,
        1503886102490162470,
        4222986769290077389,
        17209928444872897872,
        10064374817012298812,
        1391022681726221923,
        3482099619102309134,
        151151415131464647,
        5477310851692317777,
        8185741896741403527,
        12297179519749775078,
        6980896315258250234,
        5491311995173541969,
        10908311176531272611,
        15140263006374103771,
        16292302828281485620,
        13488663273854028028,
        17078235461511918753,
        523009743565281503,
        11105648925812514991,
        13827146014280242829,
    ];
    let tp = vec![0; 1444];
    let out_after = vec![
        7119213209737455664,
        8035111372284977647,
        4572010150225077091,
        9836693742249819546,
        11913987255489332987,
        9795418934522178134,
        12039823881052227957,
        1703597587030553464,
        17173440207558913559,
        9133942906034722304,
        9892190423857277000,
        11450449925285493571,
        8229203118528410575,
        18272483595874326782,
        12286453845032957559,
        17397683281593428252,
        17307726796177375265,
        5885130845879194191,
        1645176018776340060,
        7680193366109147043,
        16734119958955208667,
        6536578624341273644,
        5770440598266592917,
        843542653879105004,
        7846103239972868550,
        17767498093293336141,
        8852927397266500772,
        2375241440134626999,
        4434060166952587700,
        2761540810749122567,
        1453459469045559424,
        12942116308370467698,
        5506016901067697399,
        11535214645442000706,
        15126978367780356744,
        12154399742028506377,
        496043512841547027,
        17912935272640820199,
        10986022757903652151,
        6556183826080645558,
        14546786726747802513,
        12005748109900862598,
        7028659269647722317,
        7445941872312834859,
        17378556553372415985,
        6579722616703715705,
        15110932971155985188,
        13357716021096701878,
        14805225292079398749,
        4846395190680470669,
        5496704586153785876,
        13902332896674228944,
        2782564501691101676,
        12874276640173358887,
        16083587358039033190,
        18355037119147466217,
        17905645348986250355,
        17336266670070672432,
        7329875537940689357,
        15143929848768191816,
        2335192162346001268,
        3675321604843848800,
        18055470666128734882,
        7825904415481215047,
        5109358240684702569,
        14285416470839730663,
        5712671120250540046,
        1447875149083639731,
        16825523458715974110,
        435887853762049989,
        6289440856649262026,
        5079567923272969509,
        11992232716208537238,
        13597285185096130255,
        11829047305733652617,
        4311086504067261381,
        15175721011032302019,
        5062112127396725677,
        5556662484107594780,
        16961425301235550719,
        7249744124354557124,
        10415169108908960370,
        10792331692568535985,
        14481109731941072963,
        3493798658848957833,
        3820132639380218489,
        16270989634898866497,
        12612959379075825823,
        2261231936675595340,
        5397727033090527090,
        1595530071661307000,
        8721991197262817968,
        2097281716258616855,
        9720159116732069000,
        13847028604290243745,
        1259097204603535157,
        4488418560755904013,
        6367333815591827979,
        1110836537797269745,
        737322139420954828,
        10719862516375734296,
        17641235722877078710,
        4007603116973007245,
        8186031591789355966,
        824809602592127358,
        15459023162084506830,
        2781779707947579519,
        5340603447447048495,
        10487772282235399213,
        139590844844775293,
        8448523529988919651,
        11294430762236913551,
        7417787798712521690,
        7898687579828307114,
        460432324038279684,
        17287858692967790320,
        1003171402208274758,
        12432863151610498290,
        1772583694811023620,
        2398714257155470903,
        14638551745572956179,
        2453888832037177615,
        17965720127679021564,
        3482752704874523706,
        9460983625185291928,
        7861173646556463420,
        2092158584793655622,
        7860343108590151278,
        5798668224892394938,
        14344358780928405264,
        8930780312248882738,
        2041974908151755313,
        5267057435060043630,
        16349241761951706605,
        7937085583298782596,
        1533874153792017121,
        8977390985744119243,
        8213952522673826258,
        5985476232972805345,
        1767819075525805690,
        7890652703767299436,
        7833570395707421953,
        16483497150383186636,
        3111844668913506626,
        10592215978440849992,
        15760470899502034545,
        14841199295755801240,
        13457358926996905771,
        8495921566729048945,
        12384251008552336501,
        14611927430049516374,
        10145411926842313555,
        13313983588964854484,
        6522555254793521962,
        14886168792472123947,
        16563223991574184817,
        11970636068147089860,
        487573490069849866,
        14517767327925834099,
        358889874180177533,
        2722904686908914583,
        9331922038722423702,
        10427207646299323058,
        4058944134252549339,
        2943158119917296684,
        10957133362022867886,
        11807644687289257630,
        14152770343532942991,
        644765569764633457,
        12835933538365183555,
        3489836693155058202,
        7930565595074376717,
        10663397566559525483,
        10415977712042153468,
        10629891694308728614,
        17218729211483121702,
        12882631064819497692,
        11823247409777216976,
        4429760090149085341,
        4992836119218612253,
        16968182235411645979,
        2833341723517409131,
        9437468414857756700,
        9342501551191707874,
        5401538590112566847,
        11565576817184943683,
        17418902749314320121,
        15515057935262510,
        13023198767155479105,
        12322345548326767749,
        9805678358507392118,
        15196802879249030007,
        8590456626380559194,
        12181129450616746226,
        4662360147888268775,
        7743459026687301615,
        12227881705402238521,
        4104871394210118957,
        2982631795273577607,
        17405629239503027027,
        8575042458975896270,
        5499669298608315445,
        455410535869802297,
        7801072276748452974,
        10258654969684304036,
        5019332302330169406,
        13851706526542678368,
        14388718431838510370,
        6994627771674318027,
        5883188522176688608,
        6953100454027368107,
        16730449049154094699,
        4479760571164126224,
        2442817149002290432,
        2594209501779693152,
        17000985552959046155,
        13392630901869088171,
        4351699921480478565,
        830530327244063521,
        6175340290035796626,
        11478838337470764581,
        4282543001913023167,
        9749956107550685821,
        2694451472405341333,
        14159005131955878971,
        188623324081031138,
        2113957709622881014,
        13346278264743742220,
        1490312624045928630,
        7257319265988714790,
        12897840546280054308,
        10261220359148798170,
        11623514965826520552,
        804176158748924112,
        17254294564975652336,
        14961613837993764505,
        17022609814041542140,
        5050795566934959858,
        3133859061844734723,
        16471861622774443737,
        12873904550161604219,
        8955720228538638459,
        6705947195280088455,
        3312252979433304494,
        13064308724359909641,
        17877454778920390520,
        13974626528815595051,
        5830057811107410067,
        1680557938316663873,
        5360522541537691866,
        16002353064982324832,
        10193786265901148495,
        5965825498900060524,
        14004637605477595175,
        13444980433515313059,
        17123381832713041503,
        395654489392928755,
        17905210858022857309,
        11695619457011399410,
        2050293660264041357,
        13214005508111947011,
        13721733314071779620,
        6957322551477640013,
        17200941870372170988,
        10377268746838169434,
        17697877660887283146,
        13909454659468606094,
        12263365692987306251,
        444868280971136448,
        2249487486097442707,
        10287367344673627295,
        15227830943213591291,
        11384605430871297252,
        18114267789275369190,
        9609419984349670064,
        7173216608425317330,
        3785723985326055000,
        2525275194754047614,
        13535151049834722889,
        17273215075095328812,
        9379065185520973134,
        13156080046058576550,
        13809311185533464020,
        9698193583022285357,
        11293045682332858022,
        3789086099334034431,
        17423609786192009535,
        8700938259391751384,
        6754612211313466065,
        15592171130416925401,
        16281409111498332713,
        3330243176102830812,
        12431102122589837326,
        16006104650687086798,
        5881832849234936462,
        9558494019188617372,
        5910373903796225502,
        7012489078165397708,
        1678461096818873552,
        14039349728684147747,
        16767452777528123993,
        10223391806015696982,
        15346818030164147356,
        1162766693101697053,
        18234451668077951680,
        8347242572094928214,
        6666731739952625453,
        1062103725054959015,
        2916817885872081012,
        1252775340062153472,
        16701352066718298728,
        9660144340038428104,
        14959287155729434404,
        3349821657014683971,
        14124329647242713467,
        16768224457728633355,
        15245206340382728113,
        13349975818727705647,
        7060168455288126345,
        14358009543123557047,
        1671493412977635062,
        13147000836819401629,
        18412981554162763098,
        11420833773021925355,
        4462121868113237202,
        3673613052681393780,
        7933932278185611848,
        2994094088837084031,
        617851389487072906,
        936087254346174626,
        6282395350939998602,
        5564739907135838574,
        357676340385459789,
        4488114251655788009,
        15267875158424192348,
        2784291869179885450,
        11312568718856999737,
        8569642291350942890,
        2238202569818012692,
        11656862683686826121,
        15262363620109289295,
        16524990113573459437,
        5562790604256723201,
        3345369486980494832,
        12006274934570630789,
        9946114845665174629,
        13671323181231836463,
        3970220369626629149,
        7776022796090455195,
        9590755788237311534,
        8142856981292265441,
        321465156536801162,
        5953069648150855351,
        16986574134926902837,
        9332812118546582409,
        10453305700229109136,
        6745273322860959577,
        2992371413743712642,
        16607737435713483528,
        6982491039985356345,
        10635374366254201081,
        5489787617426825481,
        16512907085669471327,
        12008394332273820459,
        13681713057282914887,
        1825484281011599499,
        10265338194463676800,
        231895184071445598,
        8684485436743230364,
        18314390632816293564,
        395173997200045924,
        3458959778923434284,
        14875618389446705178,
        2026228713879608348,
        8096896632351243884,
        11898068926472226654,
        11401424330286284371,
        11388179279009736427,
        8567780769863850951,
        5420955600339252740,
        9557718016358557523,
        10293539895922743855,
        10709104391440822839,
        15398390488930753996,
        11609873443226591907,
        3799303761026674488,
        14827504231551333743,
        5857678196927724111,
        8450122285857845619,
        6120869104368170858,
        13208767594813061501,
        17440504615103435089,
        1352314430040358495,
        4594662627540876693,
        16103658665190650049,
        4604995467068533697,
        1965756000963933588,
        11590357129340578915,
        10706020607921767648,
        435959974903581847,
        8114156514383604689,
        150635546028022237,
        2046711193518988780,
        9302159929442525204,
        4102862072533955538,
        10755931112512381521,
        13759570670120566522,
        11886492672468308648,
        18368564319937059130,
        9170256735689590352,
        89744806848865555,
        17004092425291241458,
        13341437623654656084,
        9602103451691077650,
        805686450066544356,
        2830839197815761419,
        1956329411504418821,
        1856751313451126046,
        8360952867730129523,
        2655094640585883682,
        1812351508323318765,
        5466452692324458722,
        2317993471554330319,
        8386109932957812768,
        191643434261986870,
        8672383672749866782,
        2088248899380502026,
        7296610571351867175,
        13755695345060796205,
        2999982423435890541,
        4129519642079256449,
        12622156276462967022,
        7111496398765881581,
        14480787311565160150,
        3469939266209117746,
        7438701329152033623,
        11629269482462741856,
        4885777542024810464,
        10705129561986474549,
        12704646697057875,
        6458480273092609348,
        6552269679491575287,
        16764409845541378365,
        5112781772516022587,
        8008989787537536761,
        1103584530948037829,
        16382841334779146359,
        10554805089071823936,
        5435260964051060833,
        9791508728754514420,
        490382068908134805,
        17435419070710567937,
        14195398757764953304,
        2963888499740999291,
        4662041165840469949,
        6744621662455431846,
        13427204268640870135,
        3887747288146601313,
        15443876414310792510,
        14209765039523837918,
        15685162874875886369,
        17718873723062454563,
        3899085415479325935,
        8112448753673506965,
        9870640447409364221,
        11832870733499002257,
        12563697741369320162,
        7101757806260064829,
        8836333095435223130,
        2301074177341928226,
        8276824997793946999,
        2827834280767843126,
        11204234843351418659,
        14057032714422307544,
        16637779355549534512,
        17293043019105638911,
        5235444579393367735,
        7875158171121328348,
        12032932633735348172,
        17577724652120330660,
        7795364456390606477,
        4033162617687866088,
        1544683855253756180,
        12172662201233721356,
        3756704469121795835,
        15900453600187755478,
        3111611615821110222,
        12067333759598666114,
        2460839148177982607,
        7102750419395327210,
        11545587889066437759,
        13014356072259624231,
        9055277810304247492,
        14625948105355344074,
        14619092238615835856,
        4627724365506319628,
        12192367475393288119,
        4660777525583106578,
        10602596814120768352,
        15235390391666982533,
        6262394583518039046,
        11215546472975813276,
        17221191340393185135,
        2101601180397124797,
        5801945926643183687,
        13279838326750802748,
        9760225764448182588,
        10638379244001938587,
        14689414070605049956,
        9642847410658476483,
        9252181208713310128,
        10194326651074197381,
        4194873578760608787,
        15948390572816263861,
        11413972117606094823,
        5666682562527317380,
        4558761157644127095,
        16955166507135813953,
        17165455630592879759,
        6709237464973926762,
        8519876379139259581,
        16017543326401035900,
        13443243112246019386,
        15985758849225110622,
        6635201996777679527,
        810401065572784823,
        3192312066161014982,
        9614569995908311868,
        6150822398486473654,
        10813585281758350005,
        8073858541355843438,
        18109256134774887184,
        3173606297852832180,
        1697871109011675466,
        18299820979700369122,
        3429453844247078700,
        5880410106220533795,
        1902086387150156227,
        1095558516266363748,
        7401629960716178240,
        10676693679576960757,
        6803369895878427000,
        679584762058495726,
        8862820141296633751,
        17191945777921342135,
        8948907246409262383,
        3201694424452878897,
        13419812787573406307,
        1123422467792803886,
        16829507079638403272,
        231077225656705538,
        1743801854754216927,
        2267894415989934871,
        10485638453110401044,
        14128191714015568951,
        3134003464552465993,
        16422231357711592145,
        10265419470005494808,
        608502939641364027,
        9134620013637384764,
        12129300312054467857,
        18363959585640954741,
        9300192354341214544,
        10785267438521530991,
        4936458668110384357,
        17991939764954279170,
        1611386959702759931,
        13765557038981607892,
        9945874597041578052,
        4156215181237754094,
        18063177967743727852,
        15711037733871659565,
        18074471117735370517,
        4165544053496883142,
        5279695231734291715,
        1544829019313055335,
        10641384862840576547,
        17779765763310188495,
        5626860848734533473,
        10939014392735308139,
        499526074720537175,
        6841635225707590127,
        8751796502513481516,
        11336340410331983928,
        8161799980755225229,
        3303335824150755556,
        187196914320055288,
        4058076549799940817,
        15401421223440460347,
        10934724927412220331,
        4611229640484146507,
        4222099538065534859,
        17723869573083320478,
        4326485073257732271,
        14233319419690524901,
        10105594311301668570,
        13674225839779959556,
        9223247539431781352,
        5207133412458563780,
        2543064725421193686,
        16112712767696009427,
        14180139311525005755,
        8623263245810438804,
        9872551252324828981,
        7186327511028170781,
        15405568215949189408,
        648741987472856599,
        15504353064913393130,
        9477833781488603469,
        15265929637105201324,
        14321785262909727449,
        5989145253796307072,
        4029928268282443946,
        214922776543851469,
        14661242500471677738,
        17649450017688656343,
        8833974540349191087,
        13816848681848193227,
        9357698275516764935,
        4896085333994455104,
        15704289681227768777,
        16072211553259947696,
        3696086675995567997,
        2705327250235057879,
        3940607606521307638,
        1904439667923426432,
        5211873495099253275,
        12248061263800319556,
        5068931489527810664,
        3181822810361134627,
        2893763819599633264,
        17022013858675764406,
        14432435821204701872,
        5652574963789809237,
        2389493332555305833,
        7138156757153353567,
        11060288640704436502,
        16742145355448544339,
        13832335420610765016,
        13868994572073192755,
        7515903319542781099,
        6444421916061246995,
        11587739604890358174,
        6732571924439013884,
        11724575869028146429,
        12250459832157882902,
        3016621587617492227,
        9032739925629140208,
        17557103950413855460,
        13601852701212599067,
        10511208766396769010,
        1798260311095193927,
        5693423254942127954,
        12655656726468149287,
        11019197760486093174,
        12053338214040694646,
        18408373830237784798,
        6067223765497148246,
        11553996073859513969,
        4236552940838351761,
        9458987771514077962,
        11856103773548100132,
        12956542515015205037,
        4644161276287406073,
        8685301764457396658,
        1616507854541499544,
        10201320335307975884,
        4576763754089281023,
        2461338218102810280,
        91262760005101889,
        11335499049722647439,
        4878593686343800958,
        12877266813141124945,
        11027535651547021298,
        5250333616946137743,
        7088081721141062141,
        14298861153503504925,
        7147145447148416343,
        17047545950712643349,
        4493827337401588739,
        12928986855103603232,
        15542818123557007044,
        13140774562703256605,
        3866700096503647014,
        11880459985577020267,
        9892678920934094494,
        7884199841722717749,
        15763760571691417193,
        10614999011319354481,
        12234066605168430720,
        13097736774835846982,
        11019050032839105206,
        127993841633501445,
        18442075166379932728,
        5173423558140830113,
        5040877753307545604,
        17492079016333825987,
        1593793193144791850,
        1051352355195775735,
        5943763991772466352,
        13308051483591590190,
        9343693271988203192,
        3520113272999099435,
        13156437544558533124,
        4628664430619092695,
        13839519774612268130,
        1561524063476792872,
        1786105529617874762,
        10743318550189039818,
        4780466308508262376,
        16286344021354707563,
        7706876683201466759,
        6056690298161881679,
        10055051256791782547,
        2985438843283121106,
        5662611066107180778,
        11762504057786722681,
        6492163523688561469,
        11903314370703515089,
        6639143404964802752,
        15352864297227042626,
        6467331344424294098,
        2513138096890065757,
        18252010886576525300,
        2137309836787405465,
        5062748182344476458,
        11543605570449724492,
        8967616081750626506,
        14081282030384505465,
        14030488276049836901,
        10391269999968368055,
        1394499028419468024,
        15566682361173996820,
        4824266726532780984,
        10757268905789656792,
        16462615027839033267,
        3588952369216858747,
        7608658025855812414,
        17838642938949526141,
        94781055844175262,
        711508162709410434,
        16198763120066216543,
        14522827050618946105,
        8827834881271403758,
        14961924349064399313,
        14406825157858343587,
        10665706975132276032,
        584919077692434094,
        12685151994185398186,
        13214723590065181555,
        13213787529887690386,
        8702815823276144804,
        11800457387620589360,
        17199643293763420877,
        11515884665346482491,
        13888785899717119262,
        3507252794824964582,
        4603659836413814919,
        4686748937472750550,
        12421832631783901099,
        3359573926155290420,
        8446017905393844760,
        2262184677731317052,
        13013248939510347462,
        14572693118580589660,
        11022830998326129411,
        8408924655992625371,
        10410179516308402041,
        6729141891150201635,
        10466696767386859740,
        2677788096731405850,
        8361098508510730897,
        1435994109558943177,
        10128073597738606818,
        921651131688578288,
        3784288897383787482,
        2528827532726381824,
        2745271865598231885,
        4303509657664184356,
        8598151439188559180,
        7339838340151008759,
        4102212049950464432,
        12029559280219172530,
        8134545883285853776,
        1905850669581557220,
        16936295454560454463,
        3680651425193647974,
        13599577612277546424,
        15046713416606033193,
        456361953791851675,
        4752112709649208116,
        16115819506587034188,
        2144813052901824207,
        17046622154581665407,
        2876106397373513535,
        13003327799466428462,
        16437033639571166321,
        2399609620924500287,
        6243590631410196409,
        533278795730307090,
        1033111886262872863,
        4866574245728597909,
        2464030264651522958,
        13205453272650124362,
        11723186208228000543,
        12969372141223026578,
        13167498178415442543,
        11172031751757823858,
        13257370093102747268,
        3420723884940420444,
        1598261708381549908,
        4391211331742607590,
        17534127798353752916,
        7341206993048506664,
        14415020221961337361,
        2046719475561107676,
        4259820090742316823,
        9276901061275297500,
        4961643293623327681,
        17911768139050064538,
        7558076127984989238,
        568046345613284638,
        6669214817759616213,
        13786197531743943161,
        4249924081611420922,
        3529848342623085628,
        5686448815512694800,
        2430075147871613846,
        1061366453609214842,
        11667688802723514202,
        10816922529577173425,
        15297819755158335361,
        12893049998502519066,
        8535913883749763696,
        6339822152676352172,
        15201150192746395949,
        6947773417864595038,
        1035062681571489613,
        5378407968343096021,
        7821838471743655524,
        8160693950261852840,
        3806489823381045221,
        9110537314944891991,
        6678462809405704107,
        13148862938001788174,
        18343376155927784359,
        1347615916836827854,
        1983837968641288273,
        4808698262452924116,
        16203540206877084005,
        3735610071301703267,
        3879614205585090263,
        14396127625458802513,
        12971705508774594652,
        16855551153787363016,
        13770590905219407421,
        8320920749683191847,
        12731079676051788661,
        6315049700706159729,
        5520681748122702259,
        18377945140487117991,
        3750012964925257010,
        6112975361804514180,
        7762601797879075263,
        7806585903492997505,
        11722560531200514496,
        1245601739242598527,
        9851142601372397178,
        5448093531458783000,
        6655626903986665730,
        1791030450653932131,
        4267138194183414466,
        11787121723746760335,
        8737617848190145545,
        1279353625599713991,
        16837389613968560264,
        12170971524469207688,
        5744210997797297631,
        6252807583283253984,
        11981409579764369313,
        13423106411424571122,
        13506594589042509585,
        9696374086757887423,
        12259201030407607956,
        1940425431459421890,
        6794826149146208424,
        3390019520570000181,
        15663291992287526262,
        8024326304926259059,
        15605237955532295324,
        7521900870833785280,
        17076272368081584726,
        14317742593729071792,
        6186803591370756697,
        8693074866179823680,
        4521657215447236495,
        7139214124438529536,
        11252767985352986779,
        9244757738422684376,
        9181380892380409585,
        14124397466598078340,
        14092092430731683920,
        13444150800556990844,
        4618564184049153098,
        11716810196377677056,
    ];
    test(out, 960, xs, ys, tp, out_after);
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_greater_to_out_fft() {
    let test = |xs: Vec<Limb>, ys: Vec<Limb>, out_before: Vec<Limb>| {
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_basecase(&mut out, &xs, &ys);
        let out_after = out;
        let mut out = out_before.to_vec();
        _limbs_mul_greater_to_out_fft(&mut out, &xs, &ys);
        assert_eq!(out, out_after);
    };
    let xs = vec![
        18446744073709551608,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        4503599627370495,
        0,
        0,
        0,
        0,
        18446744073708503040,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        0,
        0,
        0,
        0,
        18446744073709486080,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let ys = vec![
        18446744073709551614,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
        Limb::MAX,
    ];
    let out_len = xs.len() + ys.len();
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        15561241996849969909,
        17161331991764370680,
        13542369405542484818,
        9366861317246391692,
        1879713116126525058,
        10492767761318699718,
        8723305490320204202,
        9926669858140972029,
        727518276475357059,
        6375060273911823111,
        1545967904352547464,
        7680035920185433214,
        2334337166526588884,
        5552562748278950944,
        17386500686890350305,
        10217921710812901371,
        8543717289253220109,
        14124521442250446370,
        14589309670042595644,
        18156925168844328015,
        5584246381265642902,
        7566115860841845637,
        8931731538698375126,
        5699847318657862769,
        17741350641142021505,
        744643237118415057,
        5585466965395053347,
        15267495080099742996,
        11261382179799118042,
        1842300492441304900,
        11502116924799435228,
        15088936677273191879,
        815009594843649681,
        2921588257002753635,
        9890221151274725,
        2670068039672124019,
        10445106182890186395,
        15539857352544006509,
        6957336632996788688,
        18436185717173412207,
        13918925502156890242,
        6696164851394671837,
        5129589234316242473,
        703262313380909531,
        16882047028800835185,
        704792676269138223,
        7620309322888652115,
        10813226110819242797,
        3068033371928730619,
        17747223928402104569,
        18331207630520747611,
        1140988444416937890,
        17133498773246020494,
        7553948575600031508,
        4627900327891533206,
        5320657850193392181,
        6333535573496776360,
        14864180425761222052,
        4675551302129327222,
        10984491510238592854,
        9540978914755038250,
        5575554220046109525,
        7150320417962865621,
        17773846050168667403,
        11905377307777207480,
        1998276842316551990,
        12505250771087655341,
        8738971895297593909,
        16196972476073743196,
        16436585735760595566,
        16881937248817180369,
        15833673539355507924,
        8231804631355978491,
        3687060348646946770,
        459881351854637798,
        14735474461085740728,
        11006034537836455759,
        7934802390759160193,
        17061916163906249152,
        9576740810457469662,
        8243984591497291048,
        4904702099742941162,
        3308128137245895252,
        12896985133106485304,
        4097336428736714102,
        4468481951742919273,
        3803733973242699195,
        3237999955279733960,
        16200254467754332363,
        18290576520201161844,
        17061694048409396569,
        3761402561432781729,
        11434855933828569539,
        16735474262020942101,
        2778473185754824241,
        15150842398226960251,
        15712151085470647267,
        11059730566581125375,
        7593778494790579631,
        7792484008868458236,
        16139345648209834662,
        17597449847663740968,
        176010513563335153,
        13040436491914832981,
        13308178922257447765,
        12712635357897962476,
        6380808176808838362,
        15285279398045089368,
        1300503008195658330,
        6897214472277128475,
        12586263595456803428,
        495909997975271151,
        9724199262268755696,
        17357446033701463374,
        17636880632793090479,
        14235642473328855995,
        5176935943427641316,
        9185213214411355295,
        2893423891793794857,
        17965604267994751645,
        13310462370659467673,
        12645724231507867284,
        10652624910027304319,
        8480533669648062757,
        14067447703501097906,
        4802628450918434342,
        16109362851891750176,
        2296290926350161737,
        15156419588956956595,
        5590660527258119478,
        6370743135491265766,
        15474687049046449537,
        1813676879212784094,
        3452682300331110146,
        12877203447846433092,
        11964302994157430119,
        17295483154851663270,
        17023022762439459621,
        15311054199294753782,
        9992313506827535017,
        599144367197580398,
        9689433769389811545,
        9328356347387010799,
        4578500405505758736,
        3619490177289935608,
        17618261164620193175,
        16871576937207505335,
        817762203741487048,
        8065681389980804016,
        4525824624206294341,
        10222173464053396704,
        5338164231572750074,
        11119656102596151162,
        7583100486819642373,
        8380383132808952040,
        6745729596872203285,
        13483812875420995333,
        5731551579755589366,
        8064269784247965323,
        9690667130985402742,
        508034167203074307,
        12287438898300726573,
        264541441930003193,
        14093107464491538129,
        17913292260284803226,
        3099290847442964654,
        6506010587203578806,
        941587671415460209,
        10586574452584298678,
        17413690920261524608,
        6679497257754322729,
        15409719880430862620,
        13559718109388563242,
        15367036197701892902,
        5963536582479004822,
        15350086534153848920,
        5408029048955941359,
        7690534216194682138,
        13229935605714115150,
        17821984386846611733,
        16863066685682102291,
        15771216753188533928,
        2092990723034531252,
        396216232393242947,
        5678934915086991946,
        17705263847123728479,
        4668443848008776322,
        12256060402595421471,
        31805890883524002,
        12507262896524773456,
        12020034260145199011,
        10879644528598462314,
        5310817758301588470,
        2509942349602761408,
        8227617452552683151,
        8528578213717904802,
        6881544627770447572,
        5605658314231155001,
        17744991277166364684,
        10430899375347283374,
        3990063234298971740,
        2207702319575325286,
        2325457422135115029,
        9315374295384225762,
        1280471490535671283,
        9367538464165501715,
        11853533379680966167,
        14974510886116165459,
        12126137316850709142,
        11880212221808218612,
        728205732809487353,
        17574807583652596923,
        2876978844013440105,
        5926595243929529222,
        7858468070293042723,
        1934781480778660145,
        5815895473333295635,
        3908760596685574428,
        8513488218974590753,
        11579626435615774283,
        6818969487432362592,
        1709034021997207430,
        8564654410303701932,
        17756210442172706956,
        8542553571605283928,
        2565085812298984790,
        785414370721192754,
        6054001131536180080,
        11875490860913549815,
        962967216569205326,
        13822704786021353572,
        3912826283194556958,
        1450266948168682189,
        2350407735187058634,
        8980814436025223454,
        4125012767131290815,
        8900518166043545511,
        1088260351570780630,
        14941200488967726771,
        15710237891108789271,
        5425586943942504862,
        17047597598359787317,
        9014776667829144972,
        8386987273602428245,
        5176375737232015321,
        16534854499997454589,
        8959478142504091190,
        5791538759632404085,
        4691833123671308106,
        2312354629996102136,
        60051023117340033,
        2964495877935762601,
        7585724003760477959,
        2992410892444998804,
        11044983185984862767,
        4732569112969609372,
        18051539472442902800,
        2652416288818987107,
        6193660021491992261,
        3698443815161231430,
        17681260719873588936,
        4780619762959223829,
        5055605253751785889,
        10642190447045773251,
        14156468848271493167,
        2466157208289455072,
        746969957442825206,
        9078765868748271789,
        11594007710073259840,
        4923895717383115,
        6025999173458722624,
        10940244014339832042,
        9261482910787344635,
        16109796240754885121,
        15546203409411464358,
        17291632124882575682,
        11880736335138736819,
        8898855404992405686,
        3860825410913217221,
        2708360492761604007,
        14215301227705382238,
        14430475116392765427,
        12259369191786492135,
        943142413556605589,
        1820746626327540003,
        15347240505373304278,
        10330098507072001174,
        17678313122167931074,
        11662187520938060925,
        17805507723803550458,
        6452956555417384816,
        7778522570764772458,
    ];
    let ys = vec![
        9514135809229873044,
        3698512996209559156,
        10154122394204803458,
        10982687422112727204,
        11507813226624439274,
        166012027342348057,
        6086694776758974298,
        13263721671606969754,
        12286497588325584955,
        17796082795432890478,
        17564990770389088370,
        13669054183544915057,
        13685863569757810214,
        2886291285861332747,
        968652427504295071,
        5932556827126509169,
        10718524824794904091,
        4204087122221542253,
        11053497255203832609,
        12271624548682388634,
        608319195248983886,
        5228083108971841366,
        9241943284876550908,
        4323882531020364461,
        11588712616865333628,
        16647669755618754083,
        14170385991382348576,
        10925052574801490077,
        4320676212017145403,
        12785937965002712684,
        16985472178136532112,
        9686458431896459087,
        8382824409397627705,
        17355000051905357865,
        13243997480969963899,
        9839107397903394218,
        5936627268218317413,
        8228266168156895422,
        8027244549097026397,
        17467728496864853250,
        16542306773693192603,
        16613582396824988272,
        14499533161815629896,
        12252434945775709734,
        12415965438901232484,
        6387352176001186185,
        18212918411165137381,
        3879262208351232244,
        2366154148653895849,
        13235700775304598790,
        9606636752692436380,
        5597565262865266687,
        1385109378669040485,
        17813792121680896593,
        4849318425903026584,
        10210911202202427731,
        5036879607951402321,
        15426438268850594247,
        12103517823748982136,
        488086507732356110,
        3355400258269678133,
        1350604110800338600,
        5307987817793520946,
        16748214234837440513,
        15155311232678262094,
        1905504508116730885,
        5035955563427955274,
        3915510688000833407,
        4221278786655352593,
        13142485917662016019,
        13148771550467895588,
        14285375733964911538,
        1141214989687624179,
        18288257052071202226,
        2042059252068681452,
        3381249949409330895,
        16756056095968198105,
        9229425992773021242,
        1541906691369424777,
        7340992122461898307,
        1128323881739687497,
        1245432891101280182,
        8865208594102425254,
        14917459168723412568,
        8620769184671921991,
        17655086604422700760,
        15747011290417946554,
        2248154608954788902,
        10215054997153916160,
        16667530501624467776,
        17918895561577721006,
        840040634041297234,
        3088309148067114209,
        13960598353672593621,
        17494267370498029649,
        534043688201054089,
        1425260727230683558,
        7714049286456350845,
        3110182563497109923,
        9107574822769671126,
        8952932895818175537,
        4276364570101513629,
        6304405099615974952,
        18079714232131306711,
        13221778385949376756,
        15153624310672779940,
        9220947267154425372,
        10313634335252369398,
        8084118193850662801,
        7068067966763882007,
        1466517467004082599,
        4449127427477516053,
        3677412217848441894,
        5002687781649756068,
        4732062249701915178,
        12946068622842758335,
        4302837013971980088,
        11057951832474589782,
        743955809767081403,
        12673876175771427771,
        11460277356566770388,
        17370415661627554571,
        15674526231681475949,
        11395707576989766567,
        2803475492240883477,
        10887178092327394503,
        1002278061412404928,
        16102050231569287085,
        9529941435353759330,
        6603257614311373049,
        4337333002462559286,
        13912840258549350513,
        3549174259954467648,
        12733835485022349232,
        2958553296704881691,
        13228334832006605190,
        8502440176829566630,
        13739961508525077108,
        15554310363782300684,
    ];
    let out_len = xs.len() + ys.len();
    test(xs, ys, vec![10; out_len]);
    let xs = vec![
        12477471680342457016,
        7439834363175998259,
        8364531072478531307,
        7720669117264982572,
        13871089126608066865,
        5538739089658515009,
        13485862549968349516,
        16668965138415286574,
        12815918125584966674,
        14984155091932260860,
        16644766636646585123,
        306590725006293979,
        8429368518159297616,
        9218529725576681069,
        15016741949480768499,
        1670879514738013725,
        8417955162372577946,
        15387720484925756369,
        5110476884223883348,
        1816362467650579730,
        6344760880304946457,
        4582050077501139760,
        11544561500401244826,
        17507375286136941082,
        6780825611959218867,
        2173592718397418409,
        14895320899302250577,
        1732130437372403944,
        2652228013798656770,
        14059887082577558829,
        17320142963333434007,
        14639018477416372959,
        4436670787324500429,
        5494397060264160564,
        14648982379079464056,
        4281784633461453767,
        6798187094949642558,
        6608877920405717218,
        12631712797504769978,
        8551308273612802041,
        17246776198396440310,
        6444397599333607623,
        15925650298696285563,
        10601768410796015631,
        15000906276520941112,
        3338797399168993953,
        1246352375954040582,
        11420394385271506024,
        17068095307090480528,
        7644631914604520606,
        11033781661348318008,
        11117169690184835735,
        258761790873428567,
        17489901188933003933,
        14840505235785535230,
        13227413113638715481,
        16997698053799118525,
        9019797589817151925,
        4493694255366969932,
        9725237995968980495,
        15577413875064628551,
        2280312394933338862,
        225569847977698671,
        2323301829890963353,
        10256874123357921822,
        12539122566148296448,
        9989537237723725906,
        6811992642529374338,
        88727847633051669,
        15695593575052197094,
        2761202085861005143,
        16533039048484256106,
        9351088285086271793,
        4055478109313752276,
        10213434408975318081,
        8762684020269433141,
        5837079994402234584,
        16514518402377369291,
        12378208937452956180,
        14421807887515276362,
        3988627559762405319,
        3918544582422029230,
        4755956678288947720,
        9676877814462397554,
        224961575368542488,
        14611489560386313010,
        5196486534973110781,
        14213777193365038984,
        4602978866967803674,
        11003619085742827120,
        16763677630294953394,
        1684559030448096764,
        17767374982649848838,
        4877949630873126245,
        3682814944580280752,
        2561235719818456295,
        2364934896956055350,
        18263613281445563076,
        4089114060737928308,
        1871768083735193579,
        16678770828678552573,
        4414846026098045432,
        17125831209897882395,
        3912127090800830255,
        14011181803889192282,
        1295043426575781791,
        10420967703804408197,
        6199906131836288010,
        11807153033347357192,
        14265899593105313257,
        8147605267573587369,
        3295330776500509264,
        16732577613226211515,
        3630606949899242603,
        4077531443619740772,
        11812426165247810337,
        780989759563676061,
        16843715221613475518,
        520503200629457264,
        15698734581373560858,
        15717047446773117386,
        11739182472950746776,
        5508507755766772851,
        11277744890514126849,
        7102937323315103744,
        15043426316219001362,
        17264933403548961444,
        4786858792980655802,
        2014728966166520846,
        13049152613696846196,
        8986797982833879405,
        5686978963676857351,
        772150166774986658,
        14517086870053753709,
        14954116996489490375,
        7746391697910526188,
        4606434146793009376,
        3009553593220536962,
        11834331104428006940,
        9959812709547803325,
        9312818550721389795,
        8167722699792448458,
        732874657192970052,
        698773781905867242,
        12119405880051172902,
        17673033350796167980,
        13538870733321508367,
        2664725175527539380,
        7636536994105874784,
        8629987496621113680,
        2000550558774774739,
        13628751714628702436,
        3345724186836801042,
        5296651644730514746,
        15440075910536479523,
        11566524344598274755,
        12142530999548267726,
        3178476168461706193,
        11231993373182544616,
        5535836762655782188,
        1821857691788680579,
        15398067123112832375,
        2959937906512595934,
        9894128090659796945,
        10977676213479413606,
        9896053141077387340,
        4732359585478105829,
        2782537058538126590,
        16748650113511090469,
        16234573623069140583,
        13526364553240274764,
        3472042735026885459,
        1375504011635585658,
        14134901088610758184,
        5812986093773998116,
        18343907802066284210,
        10338195362284836496,
        4538933452393836273,
        7202972851508573831,
        10663048845744919725,
        11111095559628771539,
        15813947556665176307,
        3844063447234634925,
        5652338735091822320,
        15812061039848958137,
        8229753298839583649,
        802923134917039889,
        4829163585440544772,
        15429176731296846429,
        8019558793413477543,
        1452525545607666514,
        15573790577533593753,
        491936016981197942,
        10062863560179613545,
        11061384784011621889,
        1900052214617990619,
        7753731008479284745,
        16019010346473083888,
        10253841258470892164,
        13903408453788781151,
        10169884958783022914,
        1771119784479465694,
        16876761255984683913,
        4507734336556855851,
        1644190668914968903,
        11524855357000701681,
        6768296219427733234,
        10057582861726337550,
        9899648217778374596,
        18140808584162437045,
        3502136377186507090,
        4607134693582048621,
        13936949880580583914,
        2596788772608678076,
        1796713826239012327,
        4260582063129126187,
        5748801488885906379,
        16694615442676144004,
        3887305188180051618,
        2550350767205712363,
        18068173339311621649,
        12758173303022710234,
        9740862123276893551,
        5102010307820377604,
        10942936333209708005,
        18421941488948996650,
        11388637231777062032,
        9127668535392226249,
        6469837987038520357,
        14193922743168722337,
        8879463076013852218,
        1299536255974471810,
        11657123384643255381,
        7261659951101262301,
        5894363505946510117,
        4245862285394351605,
        5678371230350087802,
        17178046578086915046,
        5767351492432132301,
        2765778331274782081,
        5032104048099942935,
        17629257268172754881,
        3538476034090404567,
        9059696921132002704,
        10148267678588608063,
        7431557905485244392,
        17701219837659593435,
        11179519028472592747,
        4072852058212419917,
        6998722206646617171,
        4881588377784087158,
        8942392135657118187,
        12450098984983403167,
        4877380715364130438,
        7442425351254657978,
        16893368119062256892,
        4133190116578139434,
        14033231224823505685,
        17690698791038106309,
        69885719555671168,
        5451291976155541960,
        7641909931651695485,
        14034042004808926588,
        12720147227862124510,
        12957030947591398482,
        12124026692922785247,
        4883408107294185147,
        3308537627824539756,
        4406371143811003270,
        17321810257306281660,
        5243104860854009275,
        16431126877381187748,
        9754896554997520777,
        6749101884247660127,
        6263295512058358448,
        8583119091158463486,
        5555416137611535608,
        9162144452187531823,
        15840624178481981270,
        6187472780701357377,
        3164204801472770089,
        9460961259991884760,
        12198117330023239045,
        9445542084090344416,
        6826521970103491663,
        6996442717256261847,
        7363775912789871847,
        1821616883363314737,
        13718695280220668528,
        9265991471759860428,
        15403328465978445840,
        10435756695146507564,
        9134138337791325500,
        17595820721307989341,
        10837897611871188641,
        3628300610284347069,
        6056782082517998847,
        11889121953261384595,
        15658848261681587671,
        760281128415892566,
        9901843341271410215,
        17997287540098693599,
        11471174400256577350,
        13773435664609284401,
        224645455536727129,
        3248370257584471677,
        3402146064818516495,
        15419892046652096835,
        6817408051904455983,
        13462567452174648864,
        3865219578658340818,
        6401692728490725482,
        12241061753482985847,
        18093898726091231688,
        2085695270753393724,
        1486152210073874278,
        10962392580868374592,
        18233050379629714175,
        15440497426454102854,
        17029248778709090701,
        11943840019902256468,
        1838494147415724342,
        10624384750477063994,
        2802400104447544796,
        14482700272009891532,
        7488752288284248623,
        16689053330367821624,
        8122258539396763672,
        9378594940099937779,
        1953829770254669263,
        9095248272317331200,
        8866691394084862202,
        13201017990930506125,
        5874101266603325988,
        12758355031414108476,
        10906401543018450367,
        7070115242582431545,
        8015463853343573521,
        6337419761897564053,
        8245569799737529081,
        2143044650526073628,
        10001469296387640338,
        11129612211343148678,
        9846592166231801208,
        3293328206977069772,
        8271586651454757561,
        2516303987084978983,
        18226852422794010543,
        15105013013529789613,
        18154225228636318154,
        2013990863661732083,
        1784747160358384741,
        12567581004427688912,
        12324983884662973603,
        4935897487517618842,
        14994876132441559883,
        3460392282827044973,
        178151701108469307,
        14330685158880278679,
        17005759398710652579,
        12918079073431941444,
        14737890013936547836,
        13116140709796209375,
        4406659418908136238,
        12427086661031458855,
        7492548499951595477,
        16111633531233494957,
        6547469955282364389,
        10562100669850668222,
        15418878616411295006,
        4956757255402949102,
        8013302230254643702,
        528640010877453099,
        14207088120532813066,
        16751882716911936366,
        7949419147113034512,
        1638837693666608472,
        13878268226712426549,
        8273407385523164786,
        11509174550235804944,
        15966833959669295468,
        16501367189938100697,
        18237618137386130737,
        12449896376279048977,
        18110666911456042806,
        3193062725115205782,
        6188346541223558421,
        8058450572610971381,
        6102995183728564982,
        1217219394955358461,
        4696899915064498873,
        3897448246350199671,
        12662172956137287871,
        6610124623177066401,
        17355303367288349560,
        2046855789488294262,
        3211014904560014361,
        17115241076245460723,
        15298358927000333664,
        9182539314691893135,
        5164209594070862585,
        9062044958688820752,
        11123512834458221854,
        2659061244791686400,
        6806035717656270289,
        1027290028815967628,
        9405947735639936936,
        2540349601344589130,
        6895259978837037548,
        8904474026325226434,
        12273615493885622366,
        8677764880724506780,
        6002959367751808149,
        13123965742105252412,
        11735284964695785299,
        2417001610052848193,
        16769279424767143997,
        7098399088498274096,
        9910748236374366737,
        11111297830299095939,
        13640041663283902885,
        15915174780574330612,
        10929481089808875146,
        4581632826936763294,
        8581099749824253588,
        12645736569302882821,
        7359153121066395683,
        114042912187761457,
        8021867264848320576,
        15492861144941287563,
        17574065125533105845,
        16374369432221228355,
        10459169993431587286,
        16366034776295832243,
        2627084718398353897,
        18099240392705942111,
        4326916362018195403,
        6552915731272193737,
        4273219172539573763,
        12682979794809012349,
        2630341686377453497,
        2883112777041844122,
        17280553753834600520,
        16523493292363775458,
        4645653082909935710,
        10857150457399097857,
        16240900012104288727,
        13936061320958754124,
        7489056125188749067,
        3240618672663587347,
        4473897013556224538,
        15959787311013455542,
        6807910945586226902,
        9410336371061067189,
        6906088553149840730,
        5605158148442495482,
        884531864210940213,
        1872297304786275835,
        313522309067627421,
        17334018801756959340,
        1675436862731542012,
        8842978529412038193,
        16491099153488944340,
        3255602365380029669,
        4091823593236384660,
        9059086866751700824,
        18074592049968473162,
        8939611511088706324,
        2901954556715326677,
        3168063820638083277,
        9642457237234984168,
        12973730047202029231,
        12383420012085361069,
        11980461635855055601,
        815939574328079776,
        14011981531029282088,
        3819777392902083260,
        3664266433302366398,
        3842827072078938508,
        11680613555445372946,
        12778807841055009071,
        12110239716506060424,
        10455001326219377212,
        14037063373827903372,
        7343791660755545799,
        12328389593346708858,
        7199828106464912509,
        4858835493732869191,
        4210694898816644452,
        5207062729711049186,
        6686010191777285325,
        4765116176650914771,
        4260203503346398077,
        1759950825465072730,
        5230132100642234984,
        14615940487884510813,
        17309789486063144027,
        7278701880222450078,
        10589604955548805402,
        13389545410598327517,
        8048423454310044609,
        10174798177374038317,
        11695819581512336602,
        10798166591000354836,
        10103293254150868119,
        157182158726905133,
        1338674327495139085,
        4359740350600884386,
        3252895658818469796,
        10919494111178843097,
        4907614062557818120,
        4955680854509122805,
        11945192504152771627,
        7975797138321745283,
        6605506887556783622,
        6135553468556837256,
        12830560358150860589,
        3963138074064936645,
        17071621175761233015,
        16942996036353652149,
        18009074714271793604,
        1722999483884168113,
        12926214689279125494,
        13895491362136161766,
        2282857362875456337,
        9142994644696487964,
        9268762722221367534,
        10573580827711251601,
        4334519573500535534,
        10883875644989605426,
        7004415645651661648,
        10027237496943886389,
        13381566800231151857,
        17337229971572030119,
        9544236017718236057,
        16499558730912147790,
        16696764467460841050,
        12783153673325726862,
        4801788834514363554,
        9769596680827455135,
        2052933989795058774,
        14012190388893162910,
        2328488528431981564,
        6422943144920158158,
        3344277493662982427,
        17332086124044133390,
        6603250179050887938,
        2729973167059384364,
        10215535361886902702,
        12469382708903994601,
        1202997051177792035,
        3047394247674395800,
        2411456312940888474,
        4837088057329031859,
        13226164937828712217,
        13151155632897757600,
        11689971584362603020,
        14721057194516503031,
        3506623688955464241,
        1023806484371714024,
        616780495049061260,
        5550447694830386961,
        11303599457452379703,
        4026477090451957914,
        12426562795004232982,
        15911784896145106699,
        4007234390509453717,
        10984488057956831607,
        10127069533632441573,
        17026212809323057241,
        9318803717581063712,
        14225402896737171843,
        15831782058852344212,
        14685942491342656916,
        11353950141420870530,
        6899840258039698024,
        16365793951924111762,
        11054065770384370104,
        12313481690905923958,
        11429182630674761557,
        18037807349797853208,
        17855698087768272616,
        9322152574069274970,
        4942329044664759235,
        7995065847246945033,
        17234608471288129109,
        8540482286126463,
        14042109278380290397,
        4245459658137149297,
        8630372384706772616,
        16951967420255591896,
        6140983990759814658,
        15799001042328537181,
        293899216979442252,
        18375466344090472198,
        5023361203279264131,
        2158584219052773880,
        2430714777079983012,
        18439679719922027552,
        8247095638003041692,
        8700129222990386425,
        9065370516758531054,
        7621645239059490705,
        8198370193753546038,
        2570516211974541846,
        17033362784799911757,
        16322248788609588904,
        9688378877889012051,
        17078622631971263745,
        14000745586739559896,
        10022578092954937154,
        5445108204439341684,
        18386610455808271244,
        5092210157433941468,
        6213448264919356969,
        4883013329288095834,
        5478996930332110750,
        8026855029996672366,
        16024447858887376249,
        12067879178821404087,
        11518543008940438069,
        3823610091713721972,
        18069601801912264214,
        11258822797166212826,
        13964841203412084177,
        9414776283754541624,
        10293058710824631389,
        11948877430367495415,
        8513392542107963113,
        6296507345123212825,
        6477999943576666411,
        9572404293136150991,
        5100835030655003210,
        13325655857556084165,
        16324080076960251181,
        8879608339499901790,
        18301788022265813222,
        4530918631858474410,
        7355857660645482071,
        3649239901919106124,
        12889973024998083984,
        11695005857389286582,
        3475833048468156819,
        995729836358583730,
        12325666763829458288,
        14110440261397920019,
        13769832493884639171,
        15593753283105934190,
        7109324739675458351,
        5421147768472920505,
        4412734743279888925,
        11138246548885387220,
        14351840348441253310,
        3556324819053975644,
        464172005362873872,
        6330105154140333710,
        199716684476189301,
        30491931320003660,
        12784214407370490288,
        15867394285597021458,
        15049472685881722845,
        10832317644389672128,
        14180787391549176759,
        6195021812685555238,
        7097651423104249027,
        14212466040470804288,
        933065029493216032,
        340700391640325051,
        5222909044979876332,
        12662368682228247352,
        2784558090880586519,
        11524226622572698014,
        7185977984788112517,
        10872431215518209444,
        13748253290972801025,
        5038089701011291997,
        7535346948699029838,
        13797006813111000874,
        4892711692291451444,
        6793466025450692149,
        12784267157149526257,
        10296537403905285004,
        2323577800704132951,
        5312137140467217143,
        6430484854861543636,
        6338831277270911406,
        3380263422470065531,
        2021125064519606784,
        6156495890069554972,
        11783498133679281022,
        15578447545577779722,
        15814546899991104192,
        13941553944244468050,
        13634474865486767598,
        1056230272770991969,
        6544470833237086052,
        13788795813455716701,
        7695789694537545607,
        8392131987884965107,
        4446829805611351645,
        5546547554488839716,
        12941176365951974041,
        11083456017770653320,
        14243587238307940226,
        4340314402890900681,
        11706773788443852730,
        4344412554812442687,
        11193626359760223528,
        4305913696407512521,
        152872300974481317,
        17563972177873767735,
        6689134738611919649,
        3781413393308080648,
        8321615330761631580,
        14197467496901526225,
        14546626676044239226,
        16456266795492152384,
        11928059952577597101,
        3835042046532738036,
        13754911224713375253,
        7514650130698543676,
        8858336584435716580,
        14887091898219032624,
        16911851326374546737,
        15781280213878900978,
        13174567334832245983,
        12698715736553212443,
        482862054634250522,
        11881655003769883900,
        13759377508601776198,
        1380626582194380651,
        12709962724490385600,
        11830407677567487487,
        4707511235470141279,
        8988833435496096196,
        12849153210950239984,
        6129552893611029481,
        10992680122519594516,
        11411390234302369473,
        12356274253287847627,
        8358264938578134057,
        2779498090106587161,
        18154716656404340371,
        6939980780951404838,
        11644899556767279317,
        6503403399166403612,
        1788328284304710501,
        3402885645044344883,
        6160850982285943593,
        1361188868372704452,
        5295494278668069110,
        3856033404817891402,
        5165875819581549636,
        5432481755911013545,
        6887089866491061103,
        12248786783098658185,
        1872380111306967890,
        10371211044437237288,
        3640308804221372831,
        11707751977394310973,
        2441379059837646171,
        17261873795536786450,
        4576230298744928057,
        13439891433013201618,
        13066055068615706211,
        5023766490253071135,
        4737378710842155527,
        14130528255898995994,
        9297196539004306162,
        10213190959948266193,
        10762620391958680674,
        15631352907504559989,
    ];
    let ys = vec![
        15245088662193948010,
        854969528224537163,
        192457876290468361,
        3156774054099849881,
        10102117358735393641,
        13923135497401538045,
        15603007686998930972,
        3707765480829539463,
        1075990372015045994,
        4440028045035707188,
        779932550205535682,
        13284596850012603887,
        13447370325749987403,
        10657005451799608034,
        17344058779081327933,
        1801131630646010099,
        17879455113972297046,
        1049662270419803525,
        17887003202529550415,
        13730724178286439296,
        3086493866184691051,
        7455503161286080904,
        14945249663072669446,
        7413071270018261565,
        8165098975144402988,
        15667870805615006559,
        4534237642686726425,
        5675059133984408369,
        13542693529471369730,
        4650690134857994243,
        10593876026982724440,
        8719234160809710444,
        7340192483727047710,
        2225660849988538666,
        3260628781823840386,
        14784063213821786553,
        13478324037708856111,
        6239844587086244103,
        14508626048519473050,
        11443816492520902359,
        7084448144752764341,
        11673478635762496725,
        13444020463604694513,
        1798574113181758005,
        15195278749704748030,
        3490272214933312037,
        15632500462832370824,
        9808665338648603851,
        6377980234800091876,
        11306384233660763805,
        6392788317448223882,
        8005181869701567455,
        4601526777105113530,
        9348184476999479133,
        16105441815997897842,
        15373735633778437011,
        11733794529384137433,
        769246272107807645,
        2922899274256775805,
        16218486247871807873,
        10650657974127272786,
        579665301817927565,
        6403006378940431337,
        10150254532952843560,
        3736822004545760197,
        10244207440138560761,
        16631379436671010056,
        17418302422321190629,
        4844439457855539440,
        9662799133272397874,
        11622100630061039998,
        11017257064923257696,
        14025546287952884200,
        1170766120552674008,
        4852413824670160293,
        18019298735978800767,
        14042374992041286164,
        6103187929964524269,
        5988592592688695870,
        5579172720281387479,
        10738878044274955012,
        8401646271610146442,
        12016061916593958227,
        14752402557741497038,
        5053283107906893264,
        12910662726197463795,
        787526459034857809,
        10304827788120361107,
        8387521101013404665,
        6030209567663971422,
        7511028869236306454,
        11105170944119024313,
        2911699195421772292,
        11710398806568443147,
        7599646386487625804,
        2146501359265516686,
        1193294087739295886,
        16419769173966961854,
        14779980297792837632,
        6286361066120350249,
        8246126699673376536,
        2339493649448723726,
        12383521129608538925,
        17459816050942292574,
        7213741082075285427,
        14702683527305456088,
        17849030573001874153,
        3273901152373442943,
        10086273715179643444,
        14351251935054659627,
        3067622597087477151,
        4241957707372911307,
        16686513037697490920,
        1503886102490162470,
        4222986769290077389,
        17209928444872897872,
        10064374817012298812,
        1391022681726221923,
        3482099619102309134,
        151151415131464647,
        5477310851692317777,
        8185741896741403527,
        12297179519749775078,
        6980896315258250234,
        5491311995173541969,
        10908311176531272611,
        15140263006374103771,
        16292302828281485620,
        13488663273854028028,
        17078235461511918753,
        523009743565281503,
        11105648925812514991,
        13827146014280242829,
    ];
    let out_len = xs.len() + ys.len();
    test(xs, ys, vec![10; out_len]);
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_fft_fft() {
    let test = |ap_before: Vec<Vec<Limb>>,
                k: usize,
                ll: Vec<Vec<usize>>,
                ll_offset: usize,
                omega: usize,
                inc: usize,
                tp_before: Vec<Limb>,
                ap_after: Vec<Vec<Limb>>,
                tp_after: Vec<Limb>| {
        let mut ap_clone = ap_before.clone();
        let mut ap: Vec<&mut [Limb]> = Vec::with_capacity(ap_before.len());
        for a in ap_clone.iter_mut() {
            ap.push(a);
        }
        let ll: Vec<&[usize]> = ll.iter().map(|row| row.as_slice()).collect();
        let mut tp = tp_before.clone();
        _limbs_mul_fft_fft(&mut ap, k, &ll, ll_offset, omega, inc, &mut tp);
        assert_eq!(ap.len(), ap_after.len());
        assert!(
            ap.iter()
                .zip(ap_after.iter())
                .all(|(ref xs, ys)| &***xs == ys.as_slice()),
            "{:?}",
            ap
        );
        assert_eq!(tp, tp_after);
    };
    // *xss_0_last > 1 in _limbs_mul_fft_fft
    test(
        vec![vec![0, 0, 2], vec![0, 0, 0]],
        2,
        vec![vec![0], vec![1, 2], vec![3, 4, 5, 6]],
        1,
        2,
        1,
        vec![1, 2, 3],
        vec![vec![Limb::MAX, Limb::MAX, 0], vec![0, 0, 2]],
        vec![0, 0, 2],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_fft_inverse() {
    let test = |ap_before: Vec<Vec<Limb>>,
                k: usize,
                omega: usize,
                tp_before: Vec<Limb>,
                ap_after: Vec<Vec<Limb>>,
                tp_after: Vec<Limb>| {
        let mut ap_clone = ap_before.clone();
        let mut ap: Vec<&mut [Limb]> = Vec::with_capacity(ap_before.len());
        for a in ap_clone.iter_mut() {
            ap.push(a);
        }
        let mut tp = tp_before.clone();
        _limbs_mul_fft_inverse(&mut ap, k, omega, &mut tp);
        assert_eq!(ap.len(), ap_after.len());
        assert!(
            ap.iter()
                .zip(ap_after.iter())
                .all(|(ref xs, ys)| &***xs == ys.as_slice()),
            "{:?}",
            ap
        );
        assert_eq!(tp, tp_after);
    };
    // *xss_0_last > 1 in _limbs_mul_fft_inverse
    test(
        vec![vec![0, 0, 2], vec![0, 0, 0]],
        2,
        2,
        vec![1, 2, 3],
        vec![vec![Limb::MAX, Limb::MAX, 0], vec![0, 0, 2]],
        vec![0, 0, 2],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_fft_normalize_mod_f() {
    let test = |rp_before: Vec<Limb>, n: usize, ap: Vec<Limb>, rp_after: Vec<Limb>| {
        let mut rp = rp_before.clone();
        _limbs_mul_fft_normalize_mod_f(&mut rp, n, &ap);
        assert_eq!(rp, rp_after);
    };
    // xs_len >= 2 * n in _limbs_mul_fft_normalize_mod_f
    test(
        vec![1, 2, 3],
        2,
        vec![4, 5, 6, 7, 8],
        vec![7, 18446744073709551614, 3],
    );
}

#[cfg(not(feature = "32_bit_limbs"))]
#[test]
fn test_limbs_mul_fft_internal() {
    let test = |op_before: Vec<Limb>,
                pl: usize,
                k: usize,
                ap_before: Vec<Vec<Limb>>,
                b_before: Vec<Limb>,
                l: usize,
                mp: usize,
                fft_l: Vec<Vec<usize>>,
                t_before: Vec<Limb>,
                sqr: bool,
                op_after: Vec<Limb>,
                b_after: Vec<Limb>,
                t_after: Vec<Limb>| {
        let mut op = op_before.clone();
        let mut ap_clone = ap_before.clone();
        let mut ap: Vec<&mut [Limb]> = Vec::with_capacity(ap_before.len());
        for a in ap_clone.iter_mut() {
            ap.push(a);
        }
        let mut b = b_before.clone();
        let fft_l: Vec<&[usize]> = fft_l.iter().map(|row| row.as_slice()).collect();
        let mut t = t_before.clone();
        _limbs_mul_fft_internal(&mut op, pl, k, ap, &mut b, l, mp, &fft_l, &mut t, sqr);
        assert_eq!(op, op_after);
        assert_eq!(b, b_after);
        assert_eq!(t, t_after);
    };
    test(
        vec![1, 2, 3],
        2,
        1,
        vec![vec![4, 5, 6], vec![7, 8, 9]],
        vec![10, 11, 12, 13, 14, 15],
        2,
        3,
        vec![vec![0], vec![1, 2], vec![3, 4, 5, 6]],
        vec![13, 14, 15, 16, 17, 18],
        false,
        vec![9223372036854775669, 4611686018427387916, 3],
        vec![
            18446744073709551457,
            2,
            9223372036854775788,
            13835058055282163703,
            Limb::MAX,
            0,
        ],
        vec![0, 0, 0, 18446744073709551458, 1, 0],
    );
}

#[test]
fn test_mul() {
    let test = |u, v, out| {
        let mut n = Natural::from_str(u).unwrap();
        n *= Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let mut n = Natural::from_str(u).unwrap();
        n *= &Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let n = Natural::from_str(u).unwrap() * Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let n = &Natural::from_str(u).unwrap() * Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let n = Natural::from_str(u).unwrap() * &Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let n = &Natural::from_str(u).unwrap() * &Natural::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
        assert!(n.is_valid());

        let n = BigUint::from_str(u).unwrap() * BigUint::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);

        let n = rug::Integer::from_str(u).unwrap() * rug::Integer::from_str(v).unwrap();
        assert_eq!(n.to_string(), out);
    };
    test("0", "0", "0");
    test("0", "123", "0");
    test("123", "0", "0");
    test("1", "123", "123");
    test("123", "1", "123");
    test("123", "456", "56088");
    test("0", "1000000000000", "0");
    test("1000000000000", "0", "0");
    test("1", "1000000000000", "1000000000000");
    test("1000000000000", "1", "1000000000000");
    test("1000000000000", "123", "123000000000000");
    test("123", "1000000000000", "123000000000000");
    test("123456789000", "987654321000", "121932631112635269000000");
    test("4294967295", "2", "8589934590");
    test("4294967295", "4294967295", "18446744065119617025");
    test(
        "147502279655636565600250358452694051893980186696958535174009956523855720107322638159749368\
        0808217479494744305876890972595771484769733857514529616096199394092858302265998260483416016\
        5763904522044264005938281072568140883513713255548643044250086110483617215935636533809248102\
        6926590789142079805638445494760177551776636747830014495012489743990407355232286842071418922\
        9921358409573480901624487977319782755422730834468673438076805532952821406024399006814390166\
        6949827530796971086011267864607814906313334525518102221919643040440267323688341889035864376\
        1377246644579088153222669672271414315240318439843720039808993886410874969340996645010795670\
        2133518716987668865936529827437388042190084309005369564717390726257594902619365180097509576\
        6240189037770619308206906414128686856349950952623970023039440323701643457411485666776354448\
        186307133288106956593939073729500658176632828099789",
        "577397114388109712462006371470162814529304445639807296878809567953200969820156259914159240\
        9106139481288193067515284601342023565222679498917484131095648263181800618990427694244342686\
        4412105186059052689237237088193855584354278755933606296018800151986520872701706693002473648\
        4330061421236425747083307907706860804054565348593527605104495080560663025897787060638154303\
        7631781316565710346299551930891169154491973589315700505458672804104869879731391323700304",
        "851673906388325341550957943071111911557800036845129556099360938813259608650267079456739978\
        1156959952275409185911771336067392377245918291754269000751186715279414560474882570499082990\
        4913122978897463970860833616251189242098804876664368441608727895141238953179204529256780277\
        5978105200286025161944212712977056343127682601975191673217459602567633602198262568921008081\
        9448556670912575287371251190800855926311768876808375177446530243635212748346921654224589861\
        0625170426812525829689862407515510419445335472631905610235915226032848323874067128872385291\
        3730739275467227364692195226129501338887049710586931141309357190341064532366013123280106098\
        6468151628797945455179649866890394481799639832540978091736379482964522229064478167730317490\
        8194108506704480750395054067032502530392147690725919399930683143510771646869931527123340650\
        0547649792331568913460415939722111305270588701531404490040034302102101083691706550376288655\
        2667382899390792494118931379237432071316543313379792218794371176529684614085109418328963817\
        0601432767270419229719490809539776535671938041618536196941370647945336401901450921413823163\
        4059991707077834107830876756821880651429748186401020760113859498185638133726165286481741014\
        9079906337286599226335508424466369316294442004040440528589582239717042654541745348050157252\
        3448224036804997350851153108395928780441635856",
    );
}

fn limbs_mul_helper(f: &Fn(&[Limb], &[Limb]) -> Vec<Limb>, xs: &Vec<Limb>, ys: &Vec<Limb>) {
    let result = f(xs, ys);
    assert_eq!(result.len(), xs.len() + ys.len());
    assert_eq!(
        Natural::from_owned_limbs_asc(result),
        Natural::from_limbs_asc(xs) * Natural::from_limbs_asc(ys)
    );
}

#[test]
fn limbs_mul_greater_properties() {
    test_properties(pairs_of_unsigned_vec_var_4, |&(ref xs, ref ys)| {
        limbs_mul_helper(&limbs_mul_greater, xs, ys);
    });
}

#[test]
fn limbs_mul_properties() {
    test_properties(pairs_of_unsigned_vec_var_5, |&(ref xs, ref ys)| {
        limbs_mul_helper(&limbs_mul, xs, ys);
    });
}

#[test]
fn limbs_mul_same_length_to_out_properties() {
    test_properties(
        triples_of_unsigned_vec_var_25,
        |&(ref out_before, ref xs, ref ys)| {
            let mut out = out_before.to_vec();
            let old_out = out_before.clone();
            limbs_mul_same_length_to_out(&mut out, xs, ys);
            let n = Natural::from_limbs_asc(xs) * Natural::from_limbs_asc(ys);
            let len = xs.len() << 1;
            let mut limbs = n.into_limbs_asc();
            limbs.resize(len, 0);
            assert_eq!(limbs, &out[..len]);
            assert_eq!(&out[len..], &old_out[len..]);
        },
    );
}

fn limbs_mul_basecase_helper(out: &Vec<Limb>, xs: &Vec<Limb>, ys: &Vec<Limb>) -> Vec<Limb> {
    let mut out = out.to_vec();
    let old_out = out.clone();
    _limbs_mul_greater_to_out_basecase(&mut out, xs, ys);
    let n = Natural::from_limbs_asc(xs) * Natural::from_limbs_asc(ys);
    let len = xs.len() + ys.len();
    let mut limbs = n.into_limbs_asc();
    limbs.resize(len, 0);
    assert_eq!(limbs, &out[..len]);
    assert_eq!(&out[len..], &old_out[len..]);
    out
}

#[test]
fn limbs_mul_greater_to_out_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_10,
        |&(ref out_before, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out_before, xs, ys);
            let mut out = out_before.to_vec();
            let highest_result_limb = limbs_mul_greater_to_out(&mut out, xs, ys);
            assert_eq!(highest_result_limb, out[xs.len() + ys.len() - 1]);
            assert_eq!(out, expected_out);
            let mut out = out_before.to_vec();
            _limbs_mul_greater_to_out_basecase_mem_opt(&mut out, xs, ys);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_to_out_properties() {
    test_properties(
        triples_of_unsigned_vec_var_26,
        |&(ref out_before, ref xs, ref ys)| {
            let mut out = out_before.to_vec();
            let old_out = out_before.clone();
            let highest_result_limb = limbs_mul_to_out(&mut out, xs, ys);
            assert_eq!(highest_result_limb, out[xs.len() + ys.len() - 1]);
            let n = Natural::from_limbs_asc(xs) * Natural::from_limbs_asc(ys);
            let len = xs.len() + ys.len();
            let mut limbs = n.into_limbs_asc();
            limbs.resize(len, 0);
            assert_eq!(limbs, &out[..len]);
            assert_eq!(&out[len..], &old_out[len..]);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_22_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_11,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_22_scratch_size(xs.len())];
            _limbs_mul_greater_to_out_toom_22(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_32_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_12,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_32_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_32(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_33_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_13,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_33_scratch_size(xs.len())];
            _limbs_mul_greater_to_out_toom_33(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_42_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_14,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_42_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_42(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_43_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_15,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_43_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_43(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_44_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_16,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch = vec![0; _limbs_mul_greater_to_out_toom_44_scratch_size(xs.len())];
            _limbs_mul_greater_to_out_toom_44(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_52_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_17,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_52_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_52(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_53_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_18,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_53_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_53(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_54_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_19,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_54_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_54(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_62_properties() {
    test_properties_custom_scale(
        512,
        triples_of_unsigned_vec_var_20,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_62_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_62(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_63_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_21,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_63_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_63(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_6h_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_22,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_6h_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_6h(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_toom_8h_properties() {
    test_properties_custom_scale(
        2_048,
        triples_of_unsigned_vec_var_23,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            let mut scratch =
                vec![0; _limbs_mul_greater_to_out_toom_8h_scratch_size(xs.len(), ys.len())];
            _limbs_mul_greater_to_out_toom_8h(&mut out, xs, ys, &mut scratch);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn limbs_mul_greater_to_out_fft_properties() {
    test_properties_custom_scale(
        2048,
        triples_of_unsigned_vec_var_10,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            _limbs_mul_greater_to_out_fft(&mut out, xs, ys);
            assert_eq!(out, expected_out);
        },
    );
    test_properties_custom_scale(
        64,
        triples_of_unsigned_vec_var_24,
        |&(ref out, ref xs, ref ys)| {
            let expected_out = limbs_mul_basecase_helper(out, xs, ys);
            let mut out = out.to_vec();
            _limbs_mul_greater_to_out_fft(&mut out, xs, ys);
            assert_eq!(out, expected_out);
        },
    );
}

#[test]
fn mul_properties() {
    test_properties_custom_scale(2_048, pairs_of_naturals, |&(ref x, ref y)| {
        let product_val_val = x.clone() * y.clone();
        let product_val_ref = x.clone() * y;
        let product_ref_val = x * y.clone();
        let product = x * y;
        assert!(product_val_val.is_valid());
        assert!(product_val_ref.is_valid());
        assert!(product_ref_val.is_valid());
        assert!(product.is_valid());
        assert_eq!(product_val_val, product);
        assert_eq!(product_val_ref, product);
        assert_eq!(product_ref_val, product);

        let mut mut_x = x.clone();
        mut_x *= y.clone();
        assert!(mut_x.is_valid());
        assert_eq!(mut_x, product);

        let mut mut_x = x.clone();
        mut_x *= y;
        assert_eq!(mut_x, product);
        assert!(mut_x.is_valid());

        assert_eq!(
            biguint_to_natural(&(natural_to_biguint(x) * natural_to_biguint(y))),
            product
        );
        assert_eq!(
            rug_integer_to_natural(&(natural_to_rug_integer(x) * natural_to_rug_integer(y))),
            product
        );
        assert_eq!(y * x, product);
        //TODO assert_eq!((product / x).unwrap(), *y);
        //TODO assert_eq!((product / y).unwrap(), *x);

        if *x != 0 as Limb && *y != 0 as Limb {
            assert!(product >= *x);
            assert!(product >= *y);
        }
    });

    test_properties_custom_scale(
        2_048,
        pairs_of_natural_and_unsigned,
        |&(ref x, y): &(Natural, Limb)| {
            let product = x * Natural::from(y);
            assert_eq!(x * y, product);
            assert_eq!(y * x, product);
        },
    );

    test_properties_custom_scale(
        2_048,
        pairs_of_natural_and_unsigned::<Limb>,
        |&(ref x, y)| {
            let product = x * Natural::from(y);
            assert_eq!(x * y, product);
            assert_eq!(y * x, product);
        },
    );

    test_properties_custom_scale(2_048, pairs_of_unsigneds::<Limb>, |&(x, y)| {
        assert_eq!(
            Natural::from(DoubleLimb::from(x) * DoubleLimb::from(y)),
            Natural::from(x) * Natural::from(y)
        );
    });

    #[allow(unknown_lints, erasing_op)]
    test_properties_custom_scale(2_048, naturals, |x| {
        assert_eq!(x * Natural::ZERO, 0 as Limb);
        assert_eq!(Natural::ZERO * x, 0 as Limb);
        assert_eq!(x * Natural::ONE, *x);
        assert_eq!(Natural::ONE * x, *x);
        //TODO assert_eq!(x * x, x.pow(2));
    });

    test_properties_custom_scale(2_048, triples_of_naturals, |&(ref x, ref y, ref z)| {
        assert_eq!((x * y) * z, x * (y * z));
        assert_eq!(x * (y + z), x * y + x * z);
        assert_eq!((x + y) * z, x * z + y * z);
    });
}
